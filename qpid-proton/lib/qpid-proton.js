/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

(function() { // Start of self-calling lambda used to avoid polluting global namespace.

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

var Module = {}

if (typeof global === 'object') { // If Node.js
    if (global['PROTON_TOTAL_MEMORY']) {
        Module['TOTAL_MEMORY'] = global['PROTON_TOTAL_MEMORY'];
    }
    if (global['PROTON_TOTAL_STACK']) {
        Module['TOTAL_STACK'] = global['PROTON_TOTAL_STACK'];
    }
} else if (typeof window === 'object') { // If Browser
    if (window['PROTON_TOTAL_MEMORY']) {
        Module['TOTAL_MEMORY'] = window['PROTON_TOTAL_MEMORY'];
    }
    if (window['PROTON_TOTAL_STACK']) {
        Module['TOTAL_STACK'] = window['PROTON_TOTAL_STACK'];
    }
}

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof proton !== 'undefined' ? proton : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['proton'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['proton'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 16288;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([112,110,95,111,98,106,101,99,116,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,112,110,95,118,111,105,100,0,96,0,0,0,2,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,99,108,97,122,122,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,111,98,106,101,99,116,47,111,98,106,101,99,116,46,99,0,0,0,112,110,95,99,108,97,115,115,95,110,101,119,0,0,0,0,112,110,95,99,108,97,115,115,95,105,110,99,114,101,102,0,112,110,95,99,108,97,115,115,95,114,101,102,99,111,117,110,116,0,0,0,0,0,0,0,112,110,95,99,108,97,115,115,95,100,101,99,114,101,102,0,112,110,95,99,108,97,115,115,95,102,114,101,101,0,0,0,114,99,32,61,61,32,49,32,124,124,32,114,99,32,61,61,32,45,49,0,0,0,0,0,114,99,32,61,61,32,48,0,112,110,95,99,108,97,115,115,95,104,97,115,104,99,111,100,101,0,0,0,0,0,0,0,112,110,95,99,108,97,115,115,95,99,111,109,112,97,114,101,0,0,0,0,0,0,0,0,112,110,95,99,108,97,115,115,95,105,110,115,112,101,99,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,97,110,111,110,62,0,0,37,115,60,37,112,62,0,0,111,98,106,101,99,116,0,0,112,110,95,111,98,106,101,99,116,95,114,101,102,99,111,117,110,116,0,0,0,0,0,0,104,101,97,100,45,62,114,101,102,99,111,117,110,116,32,62,32,48,0,0,0,0,0,0,112,110,95,111,98,106,101,99,116,95,100,101,99,114,101,102,0,0,0,0,0,0,0,0,112,110,95,119,101,97,107,114,101,102,0,0,0,0,0,0,24,2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,40,2,0,0,0,0,0,0,108,105,115,116,0,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,111,98,106,101,99,116,47,108,105,115,116,46,99,0,0,0,0,0,112,110,95,108,105,115,116,95,115,105,122,101,0,0,0,0,112,110,95,108,105,115,116,95,103,101,116,0,0,0,0,0,108,105,115,116,45,62,115,105,122,101,0,0,0,0,0,0,112,110,95,108,105,115,116,95,101,110,115,117,114,101,0,0,108,105,115,116,45,62,101,108,101,109,101,110,116,115,0,0,112,110,95,108,105,115,116,95,97,100,100,0,0,0,0,0,112,110,95,108,105,115,116,95,112,111,112,0,0,0,0,0,112,110,95,108,105,115,116,95,114,101,109,111,118,101,0,0,112,110,95,108,105,115,116,95,100,101,108,0,0,0,0,0,112,110,95,108,105,115,116,95,99,108,101,97,114,0,0,0,136,3,0,0,5,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,25,0,0,0,5,0,0,0,6,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,112,110,95,108,105,115,116,0,111,98,106,0,0,0,0,0,112,110,95,108,105,115,116,95,105,110,115,112,101,99,116,0,91,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,93,0,0,0,0,0,0,0,111,97,0,0,0,0,0,0,112,110,95,108,105,115,116,95,99,111,109,112,97,114,101,0,111,98,0,0,0,0,0,0,111,98,106,101,99,116,0,0,112,110,95,108,105,115,116,95,104,97,115,104,99,111,100,101,0,0,0,0,0,0,0,0,112,110,95,108,105,115,116,95,102,105,110,97,108,105,122,101,0,0,0,0,0,0,0,0,80,4,0,0,6,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,29,0,0,0,5,0,0,0,6,0,0,0,30,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,112,110,95,109,97,112,0,0,109,97,112,0,0,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,111,98,106,101,99,116,47,109,97,112,46,99,0,0,0,0,0,0,112,110,95,109,97,112,95,112,117,116,0,0,0,0,0,0,112,110,95,109,97,112,95,103,101,116,0,0,0,0,0,0,112,110,95,109,97,112,95,114,101,104,97,115,104,0,0,0,101,110,116,114,121,0,0,0,101,110,116,114,121,45,62,115,116,97,116,101,32,33,61,32,80,78,73,95,69,78,84,82,89,95,70,82,69,69,0,0,101,110,116,114,121,45,62,115,116,97,116,101,32,61,61,32,80,78,73,95,69,78,84,82,89,95,76,73,78,75,0,0,114,101,108,111,99,45,62,115,116,97,116,101,32,61,61,32,80,78,73,95,69,78,84,82,89,95,84,65,73,76,0,0,112,110,95,109,97,112,95,100,101,108,0,0,0,0,0,0,112,110,95,109,97,112,95,104,101,97,100,0,0,0,0,0,112,110,95,109,97,112,95,107,101,121,0,0,0,0,0,0,112,110,95,109,97,112,95,118,97,108,117,101,0,0,0,0,112,110,105,95,117,105,110,116,112,116,114,0,0,0,0,0,120,5,0,0,2,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,5,0,0,0,0,0,0,111,98,106,0,0,0,0,0,112,110,95,109,97,112,95,105,110,115,112,101,99,116,0,0,123,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,58,32,0,0,0,0,0,0,125,0,0,0,0,0,0,0,56,6,0,0,4,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,36,0,0,0,5,0,0,0,6,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,112,110,95,115,116,114,105,110,103,0,0,0,0,0,0,0,115,116,114,105,110,103,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,111,98,106,101,99,116,47,115,116,114,105,110,103,46,99,0,0,0,112,110,95,115,116,114,105,110,103,95,103,101,116,0,0,0,112,110,95,115,116,114,105,110,103,95,115,105,122,101,0,0,0,0,0,0,0,0,0,0,112,110,95,115,116,114,105,110,103,95,98,117,102,102,101,114,0,0,0,0,0,0,0,0,112,110,95,115,116,114,105,110,103,95,99,97,112,97,99,105,116,121,0,0,0,0,0,0,112,110,95,115,116,114,105,110,103,95,114,101,115,105,122,101,0,0,0,0,0,0,0,0,110,117,108,108,0,0,0,0,34,0,0,0,0,0,0,0,37,99,0,0,0,0,0,0,92,120,37,46,50,120,0,0,88,7,0,0,8,0,0,0,1,0,0,0,40,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,41,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,95,114,101,99,111,114,100,0,0,0,0,0,0,0,114,101,99,111,114,100,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,111,98,106,101,99,116,47,114,101,99,111,114,100,46,99,0,0,0,112,110,95,114,101,99,111,114,100,95,100,101,102,0,0,0,99,108,97,122,122,0,0,0,102,105,101,108,100,45,62,99,108,97,122,122,32,61,61,32,99,108,97,122,122,0,0,0,112,110,95,114,101,99,111,114,100,95,99,108,101,97,114,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,80,78,95,84,82,65,67,69,95,76,79,71,0,0,0,0,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,92,120,37,46,50,120,0,0,116,114,117,101,0,0,0,0,49,0,0,0,0,0,0,0,121,101,115,0,0,0,0,0,111,110,0,0,0,0,0,0,101,114,114,111,114,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,101,114,114,111,114,46,99,0,0,0,112,110,95,101,114,114,111,114,95,115,101,116,0,0,0,0,112,110,95,101,114,114,111,114,95,118,102,111,114,109,97,116,0,0,0,0,0,0,0,0,112,110,95,101,114,114,111,114,95,102,111,114,109,97,116,0,112,110,95,101,114,114,111,114,95,116,101,120,116,0,0,0,60,111,107,62,0,0,0,0,80,78,95,69,79,83,0,0,80,78,95,69,82,82,0,0,80,78,95,79,86,69,82,70,76,79,87,0,0,0,0,0,80,78,95,85,78,68,69,82,70,76,79,87,0,0,0,0,80,78,95,83,84,65,84,69,95,69,82,82,0,0,0,0,80,78,95,65,82,71,95,69,82,82,0,0,0,0,0,0,80,78,95,84,73,77,69,79,85,84,0,0,0,0,0,0,80,78,95,73,78,84,82,0,60,117,110,107,110,111,119,110,62,0,0,0,0,0,0,0,0,99,111,100,101,0,114,101,109,111,116,101,45,99,104,97,110,110,101,108,0,103,108,111,98,97,108,45,105,100,0,105,100,108,101,45,116,105,109,101,45,111,117,116,0,100,121,110,97,109,105,99,0,116,116,108,0,100,101,116,97,99,104,0,100,101,108,101,116,101,45,111,110,45,110,111,45,108,105,110,107,115,0,99,104,97,110,110,101,108,45,109,97,120,0,105,110,105,116,105,97,108,45,114,101,115,112,111,110,115,101,0,99,111,110,116,97,105,110,101,114,45,105,100,0,99,97,112,97,98,105,108,105,116,105,101,115,0,115,111,117,114,99,101,0,109,101,115,115,97,103,101,45,97,110,110,111,116,97,116,105,111,110,115,0,104,97,110,100,108,101,0,116,111,0,97,112,112,108,105,99,97,116,105,111,110,45,112,114,111,112,101,114,116,105,101,115,0,116,114,97,110,115,97,99,116,105,111,110,97,108,45,115,116,97,116,101,0,105,110,99,111,109,112,108,101,116,101,45,117,110,115,101,116,116,108,101,100,0,97,98,115,111,108,117,116,101,45,101,120,112,105,114,121,45,116,105,109,101,0,100,105,115,116,114,105,98,117,116,105,111,110,45,109,111,100,101,0,110,101,120,116,45,111,117,116,103,111,105,110,103,45,105,100,0,97,98,111,114,116,101,100,0,97,99,99,101,112,116,101,100,0,99,111,110,100,105,116,105,111,110,0,110,97,109,101,0,116,105,109,101,111,117,116,0,109,101,115,115,97,103,101,45,105,100,0,114,99,118,45,115,101,116,116,108,101,45,109,111,100,101,0,100,101,99,108,97,114,101,100,0,100,101,108,105,118,101,114,121,45,99,111,117,110,116,0,99,114,101,97,116,105,111,110,45,116,105,109,101,0,105,110,99,111,109,105,110,103,45,108,111,99,97,108,101,115,0,101,120,112,105,114,121,45,112,111,108,105,99,121,0,115,97,115,108,45,111,117,116,99,111,109,101,0,100,101,108,101,116,101,45,111,110,45,110,111,45,109,101,115,115,97,103,101,115,0,102,97,105,108,0,100,101,115,105,114,101,100,45,99,97,112,97,98,105,108,105,116,105,101,115,0,116,120,110,45,105,100,0,100,121,110,97,109,105,99,45,110,111,100,101,45,112,114,111,112,101,114,116,105,101,115,0,115,117,98,106,101,99,116,0,99,111,114,114,101,108,97,116,105,111,110,45,105,100,0,115,116,97,116,101,0,99,108,111,115,101,100,0,100,101,108,105,118,101,114,121,45,105,100,0,97,118,97,105,108,97,98,108,101,0,100,101,108,105,118,101,114,121,45,102,97,105,108,101,100,0,111,102,102,101,114,101,100,45,99,97,112,97,98,105,108,105,116,105,101,115,0,114,101,115,117,109,101,0,100,105,115,112,111,115,105,116,105,111,110,0,97,100,100,114,101,115,115,0,111,117,116,103,111,105,110,103,45,108,111,99,97,108,101,115,0,112,114,111,112,101,114,116,105,101,115,0,114,101,99,101,105,118,101,100,0,115,97,115,108,45,115,101,114,118,101,114,45,109,101,99,104,97,110,105,115,109,115,0,108,97,115,116,0,103,114,111,117,112,45,105,100,0,99,111,110,116,101,110,116,45,101,110,99,111,100,105,110,103,0,102,105,108,116,101,114,0,115,97,115,108,45,99,104,97,108,108,101,110,103,101,0,98,97,116,99,104,97,98,108,101,0,109,97,120,45,102,114,97,109,101,45,115,105,122,101,0,100,101,108,105,118,101,114,121,45,116,97,103,0,115,101,116,116,108,101,100,0,102,105,114,115,116,0,100,101,108,105,118,101,114,121,45,97,110,110,111,116,97,116,105,111,110,115,0,108,105,110,107,45,99,114,101,100,105,116,0,111,117,116,103,111,105,110,103,45,119,105,110,100,111,119,0,111,117,116,99,111,109,101,115,0,104,101,97,100,101,114,0,114,101,112,108,121,45,116,111,45,103,114,111,117,112,45,105,100,0,115,97,115,108,45,109,101,99,104,97,110,105,115,109,115,0,111,112,101,110,0,109,101,115,115,97,103,101,45,102,111,114,109,97,116,0,116,114,97,110,115,102,101,114,0,100,117,114,97,98,108,101,0,97,109,113,112,45,118,97,108,117,101,0,105,110,105,116,105,97,108,45,100,101,108,105,118,101,114,121,45,99,111,117,110,116,0,104,97,110,100,108,101,45,109,97,120,0,112,114,105,111,114,105,116,121,0,97,116,116,97,99,104,0,97,100,100,105,116,105,111,110,97,108,45,100,97,116,97,0,109,97,120,45,109,101,115,115,97,103,101,45,115,105,122,101,0,109,111,114,101,0,117,110,115,101,116,116,108,101,100,0,114,101,106,101,99,116,101,100,0,114,101,108,101,97,115,101,100,0,102,105,114,115,116,45,97,99,113,117,105,114,101,114,0,105,110,99,111,109,105,110,103,45,119,105,110,100,111,119,0,115,110,100,45,115,101,116,116,108,101,45,109,111,100,101,0,117,115,101,114,45,105,100,0,115,101,99,116,105,111,110,45,111,102,102,115,101,116,0,105,110,102,111,0,100,101,108,101,116,101,45,111,110,45,110,111,45,108,105,110,107,115,45,111,114,45,109,101,115,115,97,103,101,115,0,116,97,114,103,101,116,0,99,104,97,108,108,101,110,103,101,0,109,111,100,105,102,105,101,100,0,117,110,100,101,108,105,118,101,114,97,98,108,101,45,104,101,114,101,0,101,114,114,111,114,0,111,117,116,99,111,109,101,0,100,101,99,108,97,114,101,0,103,114,111,117,112,45,115,101,113,117,101,110,99,101,0,100,101,108,101,116,101,45,111,110,45,99,108,111,115,101,0,115,101,99,116,105,111,110,45,110,117,109,98,101,114,0,99,111,111,114,100,105,110,97,116,111,114,0,100,101,102,97,117,108,116,45,111,117,116,99,111,109,101,0,99,108,111,115,101,0,101,99,104,111,0,101,110,100,0,104,111,115,116,110,97,109,101,0,109,101,99,104,97,110,105,115,109,0,114,111,108,101,0,115,97,115,108,45,114,101,115,112,111,110,115,101,0,110,101,120,116,45,105,110,99,111,109,105,110,103,45,105,100,0,98,101,103,105,110,0,100,101,115,99,114,105,112,116,105,111,110,0,115,97,115,108,45,105,110,105,116,0,100,105,115,99,104,97,114,103,101,0,114,101,112,108,121,45,116,111,0,100,97,116,97,0,114,101,115,112,111,110,115,101,0,100,114,97,105,110,0,102,111,111,116,101,114,0,99,111,110,116,101,110,116,45,116,121,112,101,0,102,108,111,119,0,97,109,113,112,45,115,101,113,117,101,110,99,101,0,80,9,0,0,0,0,0,0,0,0,141,3,110,5,232,3,197,5,161,3,113,2,57,0,51,5,40,5,200,4,161,2,47,1,31,4,40,4,172,4,138,0,155,4,237,4,64,0,188,1,124,4,12,5,214,4,138,5,106,1,198,0,125,3,128,5,231,2,79,5,175,1,100,3,42,3,145,0,150,2,175,0,157,5,202,5,178,3,177,5,0,0,0,0,0,0,0,0,112,0,55,5,0,3,83,0,31,0,133,2,144,1,85,2,215,1,150,2,6,0,22,1,64,4,75,3,212,3,85,2,215,1,150,2,66,1,165,0,74,5,80,4,90,1,138,0,155,4,21,4,218,0,189,3,255,3,85,2,215,1,150,2,93,5,64,4,22,1,75,3,165,0,115,1,63,3,59,2,171,5,46,5,150,2,165,0,47,2,15,3,146,3,28,3,16,4,90,1,34,2,106,2,39,1,246,2,74,5,36,3,193,2,28,3,34,2,246,2,165,0,40,2,200,4,200,4,200,4,56,1,116,5,119,4,253,4,104,4,200,4,69,2,181,4,145,0,125,2,170,3,161,1,71,1,45,0,243,1,4,1,224,2,24,5,91,3,125,0,125,2,170,3,161,1,71,1,45,0,243,1,125,0,125,0,21,0,236,1,210,1,236,1,236,1,206,4,170,2,64,5,95,0,55,5,162,4,162,5,1,0,239,3,170,3,223,3,53,0,49,4,115,1,79,1,96,4,172,0,11,2,148,5,19,2,184,5,207,2,239,0,130,1,198,2,222,4,107,3,0,0,0,0,1,1,10,2,11,8,3,19,14,4,33,11,5,44,11,6,55,6,7,61,3,8,64,1,9,65,1,0,0,0,0,0,0,0,0,0,0,0,0,10,66,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,69,2,12,0,0,13,71,1,14,0,0,15,72,3,16,75,11,17,86,7,0,0,0,18,0,0,19,0,0,20,0,0,21,0,0,0,0,0,22,93,1,23,94,1,24,95,2,25,97,1,26,98,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,100,1,28,101,3,29,104,1,30,105,1,31,106,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,108,5,33,0,0,34,0,0,35,113,13,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,0,0,0,0,0,80,78,95,78,85,76,76,0,80,78,95,66,79,79,76,0,80,78,95,85,66,89,84,69,0,0,0,0,0,0,0,0,80,78,95,66,89,84,69,0,80,78,95,85,83,72,79,82,84,0,0,0,0,0,0,0,80,78,95,83,72,79,82,84,0,0,0,0,0,0,0,0,80,78,95,85,73,78,84,0,80,78,95,73,78,84,0,0,80,78,95,67,72,65,82,0,80,78,95,85,76,79,78,71,0,0,0,0,0,0,0,0,80,78,95,76,79,78,71,0,80,78,95,84,73,77,69,83,84,65,77,80,0,0,0,0,80,78,95,70,76,79,65,84,0,0,0,0,0,0,0,0,80,78,95,68,79,85,66,76,69,0,0,0,0,0,0,0,80,78,95,68,69,67,73,77,65,76,51,50,0,0,0,0,80,78,95,68,69,67,73,77,65,76,54,52,0,0,0,0,80,78,95,68,69,67,73,77,65,76,49,50,56,0,0,0,80,78,95,85,85,73,68,0,80,78,95,66,73,78,65,82,89,0,0,0,0,0,0,0,80,78,95,83,84,82,73,78,71,0,0,0,0,0,0,0,80,78,95,83,89,77,66,79,76,0,0,0,0,0,0,0,80,78,95,68,69,83,67,82,73,66,69,68,0,0,0,0,80,78,95,65,82,82,65,89,0,0,0,0,0,0,0,0,80,78,95,76,73,83,84,0,80,78,95,77,65,80,0,0,60,85,78,75,78,79,87,78,62,0,0,0,0,0,0,0,110,117,108,108,0,0,0,0,116,114,117,101,0,0,0,0,102,97,108,115,101,0,0,0,37,117,0,0,0,0,0,0,37,105,0,0,0,0,0,0,37,99,0,0,0,0,0,0,37,108,108,117,0,0,0,0,37,108,108,105,0,0,0,0,37,103,0,0,0,0,0,0,68,51,50,40,37,117,41,0,68,54,52,40,37,108,108,117,41,0,0,0,0,0,0,0,68,49,50,56,40,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,41,0,0,85,85,73,68,40,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,45,37,48,50,104,104,120,37,48,50,104,104,120,45,37,48,50,104,104,120,37,48,50,104,104,120,45,37,48,50,104,104,120,37,48,50,104,104,120,45,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,37,48,50,104,104,120,41,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,99,111,100,101,99,47,99,111,100,101,99,46,99,0,0,0,0,0,112,110,105,95,105,110,115,112,101,99,116,95,97,116,111,109,0,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,34,0,0,0,0,0,0,0,60,108,105,115,116,62,0,0,60,109,97,112,62,0,0,0,60,97,114,114,97,121,62,0,60,100,101,115,99,114,105,98,101,100,62,0,0,0,0,0,60,117,110,100,101,102,105,110,101,100,58,32,37,105,62,0,37,115,61,0,0,0,0,0,64,0,0,0,0,0,0,0,64,37,115,91,0,0,0,0,91,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,160,21,0,0,13,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,42,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,112,110,95,100,97,116,97,0,0,0,0,0,0,0,0,0,110,97,107,101,100,32,116,121,112,101,0,0,0,0,0,0,101,120,105,116,32,102,97,105,108,101,100,0,0,0,0,0,115,0,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,42,32,99,111,100,101,58,32,48,120,37,46,50,88,32,39,37,99,39,0,0,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,102,105,108,108,32,99,111,100,101,58,32,48,120,37,46,50,88,32,39,37,99,39,0,0,0,0,0,99,111,100,101,115,32,109,117,115,116,32,102,111,108,108,111,119,32,97,32,63,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,115,99,97,110,32,99,111,100,101,58,32,48,120,37,46,50,88,32,39,37,99,39,0,0,0,0,0,160,22,0,0,12,0,0,0,1,0,0,0,44,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,45,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,95,100,101,99,111,100,101,114,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,116,121,112,101,99,111,100,101,58,32,37,117,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,100,97,116,97,32,116,111,32,100,101,99,111,100,101,0,0,0,0,0,0,0,40,23,0,0,11,0,0,0,1,0,0,0,46,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,47,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,95,101,110,99,111,100,101,114,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,115,112,97,99,101,32,116,111,32,101,110,99,111,100,101,0,0,0,0,0,0,110,111,116,32,97,32,118,97,108,117,101,32,116,121,112,101,58,32,37,117,10,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,101,110,99,111,100,105,110,103,58,32,37,117,0,0,0,0,0,0,0,69,114,114,111,114,32,100,105,115,112,97,116,99,104,105,110,103,32,102,114,97,109,101,58,32,116,121,112,101,58,32,37,100,58,32,85,110,107,110,111,119,110,32,112,101,114,102,111,114,109,97,116,105,118,101,0,69,114,114,111,114,32,100,105,115,112,97,116,99,104,105,110,103,32,102,114,97,109,101,58,32,85,110,107,110,111,119,110,32,102,114,97,109,101,32,116,121,112,101,58,32,37,100,0,37,117,32,60,45,32,40,69,77,80,84,89,32,70,82,65,77,69,41,10,0,0,0,0,69,114,114,111,114,32,100,101,99,111,100,105,110,103,32,102,114,97,109,101,58,32,37,115,32,37,115,10,0,0,0,0,68,63,76,46,0,0,0,0,83,99,97,110,32,101,114,114,111,114,0,0,0,0,0,0,69,114,114,111,114,32,100,105,115,112,97,116,99,104,105,110,103,32,102,114,97,109,101,0,99,111,110,110,101,99,116,105,111,110,0,0,0,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,101,110,103,105,110,101,47,101,110,103,105,110,101,46,99,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,111,112,101,110,0,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,99,108,111,115,101,0,0,0,0,0,33,99,111,110,110,101,99,116,105,111,110,45,62,101,110,100,112,111,105,110,116,46,102,114,101,101,100,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,114,101,108,101,97,115,101,0,0,0,102,97,108,115,101,0,0,0,99,111,110,110,0,0,0,0,115,101,115,115,105,111,110,0,112,110,95,115,101,115,115,105,111,110,95,111,112,101,110,0,112,110,95,115,101,115,115,105,111,110,95,99,108,111,115,101,0,0,0,0,0,0,0,0,33,115,101,115,115,105,111,110,45,62,101,110,100,112,111,105,110,116,46,102,114,101,101,100,0,0,0,0,0,0,0,0,112,110,95,115,101,115,115,105,111,110,95,102,114,101,101,0,108,105,110,107,0,0,0,0,112,110,95,108,105,110,107,95,111,112,101,110,0,0,0,0,112,110,95,108,105,110,107,95,99,108,111,115,101,0,0,0,112,110,95,108,105,110,107,95,100,101,116,97,99,104,0,0,33,108,105,110,107,45,62,101,110,100,112,111,105,110,116,46,102,114,101,101,100,0,0,0,112,110,95,108,105,110,107,95,102,114,101,101,0,0,0,0,101,110,100,112,111,105,110,116,45,62,114,101,102,99,111,117,110,116,32,62,32,48,0,0,112,110,95,101,112,95,100,101,99,114,101,102,0,0,0,0,72,26,0,0,14,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,48,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,0,0,0,5,0,0,0,13,0,0,0,19,0,0,0,19,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,103,101,116,95,99,111,110,116,97,105,110,101,114,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,115,101,116,95,99,111,110,116,97,105,110,101,114,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,103,101,116,95,104,111,115,116,110,97,109,101,0,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,115,101,116,95,104,111,115,116,110,97,109,101,0,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,103,101,116,95,117,115,101,114,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,115,101,116,95,117,115,101,114,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,115,101,116,95,112,97,115,115,119,111,114,100,0,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,114,101,109,111,116,101,95,99,111,110,116,97,105,110,101,114,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,114,101,109,111,116,101,95,104,111,115,116,110,97,109,101,0,0,0,100,101,108,105,118,101,114,121,0,0,0,0,0,0,0,0,33,100,101,108,105,118,101,114,121,45,62,108,111,99,97,108,46,115,101,116,116,108,101,100,0,0,0,0,0,0,0,0,112,110,95,97,100,100,95,119,111,114,107,0,0,0,0,0,112,110,95,115,101,115,115,105,111,110,0,0,0,0,0,0,184,27,0,0,15,0,0,0,1,0,0,0,0,0,0,0,49,0,0,0,3,0,0,0,4,0,0,0,50,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,115,110,0,0,0,0,0,112,110,95,115,101,115,115,105,111,110,95,98,111,117,110,100,0,0,0,0,0,0,0,0,112,110,95,115,101,115,115,105,111,110,95,117,110,98,111,117,110,100,0,0,0,0,0,0,112,28,0,0,16,0,0,0,1,0,0,0,0,0,0,0,51,0,0,0,3,0,0,0,4,0,0,0,52,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,95,108,105,110,107,0,112,110,95,108,105,110,107,95,117,110,98,111,117,110,100,0,116,101,114,109,105,110,117,115,0,0,0,0,0,0,0,0,112,110,95,116,101,114,109,105,110,117,115,95,103,101,116,95,97,100,100,114,101,115,115,0,112,110,95,116,101,114,109,105,110,117,115,95,115,101,116,95,97,100,100,114,101,115,115,0,112,110,95,108,105,110,107,95,110,97,109,101,0,0,0,0,112,110,95,108,105,110,107,95,115,101,115,115,105,111,110,0,112,110,95,100,101,108,105,118,101,114,121,0,0,0,0,0,232,28,0,0,17,0,0,0,1,0,0,0,0,0,0,0,53,0,0,0,3,0,0,0,4,0,0,0,54,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,100,101,108,105,118,101,114,121,45,62,115,116,97,116,101,46,105,110,105,116,0,0,0,112,110,95,100,101,108,105,118,101,114,121,95,98,117,102,102,101,114,101,100,0,0,0,0,112,110,95,100,101,108,105,118,101,114,121,95,115,101,116,116,108,101,0,0,0,0,0,0,114,101,99,101,105,118,101,114,0,0,0,0,0,0,0,0,112,110,95,108,105,110,107,95,102,108,111,119,0,0,0,0,112,110,95,108,105,110,107,95,105,115,95,114,101,99,101,105,118,101,114,40,114,101,99,101,105,118,101,114,41,0,0,0,112,110,95,108,105,110,107,95,115,101,116,95,100,114,97,105,110,0,0,0,0,0,0,0,112,110,95,100,101,108,105,118,101,114,121,95,108,105,110,107,0,0,0,0,0,0,0,0,112,110,95,100,101,108,105,118,101,114,121,95,108,111,99,97,108,95,115,116,97,116,101,0,112,110,95,100,101,108,105,118,101,114,121,95,114,101,109,111,116,101,95,115,116,97,116,101,0,0,0,0,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,99,111,110,100,105,116,105,111,110,0,99,111,110,100,105,116,105,111,110,0,0,0,0,0,0,0,112,110,95,99,111,110,100,105,116,105,111,110,95,99,108,101,97,114,0,0,0,0,0,0,112,110,95,99,111,110,100,105,116,105,111,110,95,103,101,116,95,110,97,109,101,0,0,0,112,110,95,99,111,110,100,105,116,105,111,110,95,115,101,116,95,110,97,109,101,0,0,0,112,110,95,99,111,110,100,105,116,105,111,110,95,103,101,116,95,100,101,115,99,114,105,112,116,105,111,110,0,0,0,0,112,110,95,99,111,110,100,105,116,105,111,110,95,115,101,116,95,100,101,115,99,114,105,112,116,105,111,110,0,0,0,0,112,110,95,99,111,110,100,105,116,105,111,110,95,105,110,102,111,0,0,0,0,0,0,0,112,110,95,114,101,102,99,111,117,110,116,40,100,101,108,105,118,101,114,121,41,32,61,61,32,48,0,0,0,0,0,0,112,110,95,100,101,108,105,118,101,114,121,95,102,105,110,97,108,105,122,101,0,0,0,0,112,110,95,114,101,102,99,111,117,110,116,40,100,101,108,105,118,101,114,121,41,32,61,61,32,49,0,0,0,0,0,0,33,108,105,110,107,45,62,117,110,115,101,116,116,108,101,100,95,104,101,97,100,45,62,114,101,102,101,114,101,110,99,101,100,0,0,0,0,0,0,0,112,110,95,108,105,110,107,95,102,105,110,97,108,105,122,101,0,0,0,0,0,0,0,0,112,110,95,101,112,95,98,111,117,110,100,0,0,0,0,0,112,110,105,95,101,110,100,112,111,105,110,116,95,108,105,118,101,0,0,0,0,0,0,0,112,110,95,101,112,95,112,97,114,101,110,116,0,0,0,0,33,101,110,100,112,111,105,110,116,45,62,114,101,102,101,114,101,110,99,101,100,0,0,0,112,110,105,95,102,114,101,101,95,99,104,105,108,100,114,101,110,0,0,0,0,0,0,0,33,99,111,110,110,45,62,116,114,97,110,115,112,111,114,116,45,62,114,101,102,101,114,101,110,99,101,100,0,0,0,0,112,110,95,99,111,110,110,101,99,116,105,111,110,95,102,105,110,97,108,105,122,101,0,0,112,110,95,102,105,110,97,108,95,116,121,112,101,0,0,0,101,110,100,112,111,105,110,116,95,101,118,101,110,116,0,0,120,32,0,0,9,0,0,0,1,0,0,0,55,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,56,0,0,0,5,0,0,0,6,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,0,0,0,0,99,111,108,108,101,99,116,111,114,0,0,0,0,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,101,118,101,110,116,115,47,101,118,101,110,116,46,99,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,95,102,114,101,101,0,0,0,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,95,114,101,108,101,97,115,101,0,0,0,0,99,111,110,116,101,120,116,0,112,110,95,99,111,108,108,101,99,116,111,114,95,112,117,116,0,0,0,0,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,95,109,111,114,101,0,0,0,0,0,0,0,120,33,0,0,10,0,0,0,1,0,0,0,60,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,61,0,0,0,5,0,0,0,6,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,0,0,0,0,112,110,95,101,118,101,110,116,0,0,0,0,0,0,0,0,101,118,101,110,116,0,0,0,112,110,95,101,118,101,110,116,95,99,108,97,115,115,0,0,112,110,95,101,118,101,110,116,95,99,111,110,116,101,120,116,0,0,0,0,0,0,0,0,80,78,95,69,86,69,78,84,95,78,79,78,69,0,0,0,80,78,95,82,69,65,67,84,79,82,95,73,78,73,84,0,80,78,95,82,69,65,67,84,79,82,95,81,85,73,69,83,67,69,68,0,0,0,0,0,80,78,95,82,69,65,67,84,79,82,95,70,73,78,65,76,0,0,0,0,0,0,0,0,80,78,95,84,73,77,69,82,95,84,65,83,75,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,73,78,73,84,0,0,0,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,66,79,85,78,68,0,0,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,85,78,66,79,85,78,68,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,82,69,77,79,84,69,95,79,80,69,78,0,0,0,0,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,76,79,67,65,76,95,79,80,69,78,0,0,0,0,0,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,82,69,77,79,84,69,95,67,76,79,83,69,0,0,0,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,76,79,67,65,76,95,67,76,79,83,69,0,0,0,0,0,0,0,80,78,95,67,79,78,78,69,67,84,73,79,78,95,70,73,78,65,76,0,0,0,0,0,80,78,95,83,69,83,83,73,79,78,95,73,78,73,84,0,80,78,95,83,69,83,83,73,79,78,95,82,69,77,79,84,69,95,79,80,69,78,0,0,80,78,95,83,69,83,83,73,79,78,95,76,79,67,65,76,95,79,80,69,78,0,0,0,80,78,95,83,69,83,83,73,79,78,95,82,69,77,79,84,69,95,67,76,79,83,69,0,80,78,95,83,69,83,83,73,79,78,95,76,79,67,65,76,95,67,76,79,83,69,0,0,80,78,95,83,69,83,83,73,79,78,95,70,73,78,65,76,0,0,0,0,0,0,0,0,80,78,95,76,73,78,75,95,73,78,73,84,0,0,0,0,80,78,95,76,73,78,75,95,82,69,77,79,84,69,95,79,80,69,78,0,0,0,0,0,80,78,95,76,73,78,75,95,76,79,67,65,76,95,79,80,69,78,0,0,0,0,0,0,80,78,95,76,73,78,75,95,82,69,77,79,84,69,95,67,76,79,83,69,0,0,0,0,80,78,95,76,73,78,75,95,76,79,67,65,76,95,68,69,84,65,67,72,0,0,0,0,80,78,95,76,73,78,75,95,82,69,77,79,84,69,95,68,69,84,65,67,72,0,0,0,80,78,95,76,73,78,75,95,76,79,67,65,76,95,67,76,79,83,69,0,0,0,0,0,80,78,95,76,73,78,75,95,70,76,79,87,0,0,0,0,80,78,95,76,73,78,75,95,70,73,78,65,76,0,0,0,80,78,95,68,69,76,73,86,69,82,89,0,0,0,0,0,80,78,95,84,82,65,78,83,80,79,82,84,0,0,0,0,80,78,95,84,82,65,78,83,80,79,82,84,95,65,85,84,72,69,78,84,73,67,65,84,69,68,0,0,0,0,0,0,80,78,95,84,82,65,78,83,80,79,82,84,95,69,82,82,79,82,0,0,0,0,0,0,80,78,95,84,82,65,78,83,80,79,82,84,95,72,69,65,68,95,67,76,79,83,69,68,0,0,0,0,0,0,0,0,80,78,95,84,82,65,78,83,80,79,82,84,95,84,65,73,76,95,67,76,79,83,69,68,0,0,0,0,0,0,0,0,80,78,95,84,82,65,78,83,80,79,82,84,95,67,76,79,83,69,68,0,0,0,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,73,78,73,84,0,0,0,0,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,85,80,68,65,84,69,68,0,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,82,69,65,68,65,66,76,69,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,87,82,73,84,65,66,76,69,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,69,82,82,79,82,0,0,0,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,69,88,80,73,82,69,68,0,0,0,80,78,95,83,69,76,69,67,84,65,66,76,69,95,70,73,78,65,76,0,0,0,0,0,37,115,60,37,112,62,0,0,112,110,95,101,118,101,110,116,95,105,110,115,112,101,99,116,0,0,0,0,0,0,0,0,100,115,116,0,0,0,0,0,40,37,115,0,0,0,0,0,40,60,37,117,62,0,0,0,44,32,0,0,0,0,0,0,41,0,0,0,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,95,115,104,114,105,110,107,0,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,95,100,114,97,105,110,0,0,0,0,0,0,33,99,111,108,108,101,99,116,111,114,45,62,104,101,97,100,0,0,0,0,0,0,0,0,33,99,111,108,108,101,99,116,111,114,45,62,116,97,105,108,0,0,0,0,0,0,0,0,112,110,95,99,111,108,108,101,99,116,111,114,95,105,110,115,112,101,99,116,0,0,0,0,69,86,69,78,84,83,91,0,93,0,0,0,0,0,0,0,136,38,0,0,176,38,0,0,200,38,0,0,224,38,0,0,240,38,0,0,0,39,0,0,16,39,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,100,97,116,97,32,116,111,32,100,101,116,101,114,109,105,110,101,32,112,114,111,116,111,99,111,108,0,85,110,107,110,111,119,110,32,112,114,111,116,111,99,111,108,0,0,0,0,0,0,0,0,83,83,76,47,84,76,83,32,99,111,110,110,101,99,116,105,111,110,0,0,0,0,0,0,65,77,81,80,32,84,76,83,32,108,97,121,101,114,0,0,65,77,81,80,32,83,65,83,76,32,108,97,121,101,114,0,65,77,81,80,32,49,46,48,32,108,97,121,101,114,0,0,80,114,101,32,115,116,97,110,100,97,114,100,32,65,77,81,80,32,99,111,110,110,101,99,116,105,111,110,0,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,68,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,65,0,0,0,69,0,0,0,67,0,0,0,0,0,0,0,68,0,0,0,69,0,0,0,67,0,0,0,0,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,232,39,0,0,18,0,0,0,1,0,0,0,78,0,0,0,79,0,0,0,3,0,0,0,4,0,0,0,80,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,0,0,0,0,116,114,97,110,115,112,111,114,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,116,114,97,110,115,112,111,114,116,47,116,114,97,110,115,112,111,114,116,46,99,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,115,101,116,95,115,101,114,118,101,114,0,112,110,95,116,114,97,110,115,112,111,114,116,95,114,101,113,117,105,114,101,95,97,117,116,104,0,0,0,0,0,0,0,33,116,114,97,110,115,112,111,114,116,45,62,102,114,101,101,100,0,0,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,102,114,101,101,0,0,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,98,105,110,100,0,0,0,0,0,0,0,99,111,110,110,101,99,116,105,111,110,0,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,117,110,98,105,110,100,0,0,0,0,0,91,63,68,76,91,115,83,67,93,93,0,0,0,0,0,0,91,111,111,67,93,0,0,0,37,117,32,37,115,32,0,0,45,62,0,0,0,0,0,0,60,45,0,0,0,0,0,0,40,69,77,80,84,89,32,70,82,65,77,69,41,0,0,0,32,40,37,122,117,41,32,34,37,115,34,37,115,0,0,0,46,46,46,32,40,116,114,117,110,99,97,116,101,100,41,0,0,0,0,0,0,0,0,0,101,114,114,111,114,32,112,111,115,116,105,110,103,32,102,114,97,109,101,58,32,37,115,44,32,37,115,58,32,37,115,0,101,114,114,111,114,32,112,111,115,116,105,110,103,32,102,114,97,109,101,58,32,37,115,0,82,65,87,58,32,34,0,0,34,0,0,0,0,0,0,0,68,76,91,73,73,122,73,111,111,110,63,68,76,67,93,0,101,114,114,111,114,32,112,111,115,116,105,110,103,32,116,114,97,110,115,102,101,114,32,102,114,97,109,101,58,32,37,115,58,32,37,115,0,0,0,0,68,76,91,63,68,76,91,115,83,67,93,93,0,0,0,0,68,76,91,83,93,0,0,0,37,115,32,40,37,115,41,0,69,82,82,79,82,32,37,115,32,37,115,0,0,0,0,0,68,46,91,63,83,63,83,73,72,73,46,46,67,67,67,93,0,0,0,0,0,0,0,0,80,101,101,114,32,97,100,118,101,114,116,105,115,101,100,32,98,97,100,32,109,97,120,45,102,114,97,109,101,32,40,37,117,41,44,32,102,111,114,99,105,110,103,32,116,111,32,37,117,0,0,0,0,0,0,0,68,46,91,63,72,73,93,0,116,101,114,109,105,110,117,115,0,0,0,0,0,0,0,0,112,110,95,116,101,114,109,105,110,117,115,95,115,101,116,95,97,100,100,114,101,115,115,95,98,121,116,101,115,0,0,0,68,46,91,83,73,111,63,66,63,66,68,46,91,83,73,115,73,111,46,115,93,68,46,91,83,73,115,73,111,93,46,46,73,93,0,0,0,0,0,0,97,109,113,112,58,99,111,110,110,101,99,116,105,111,110,58,110,111,45,115,101,115,115,105,111,110,0,0,0,0,0,0,97,116,116,97,99,104,32,119,105,116,104,111,117,116,32,97,32,115,101,115,115,105,111,110,0,0,0,0,0,0,0,0,68,46,91,46,46,46,46,46,68,46,46,68,76,91,67,93,46,46,46,93,0,0,0,0,68,46,91,46,46,46,46,46,68,46,91,46,46,46,46,46,67,46,67,46,67,67,93,68,46,91,46,46,46,46,46,67,67,93,0,0,0,0,0,0,68,46,91,73,63,73,122,46,111,111,46,68,63,76,67,93,0,0,0,0,0,0,0,0,97,109,113,112,58,115,101,115,115,105,111,110,58,119,105,110,100,111,119,45,118,105,111,108,97,116,105,111,110,0,0,0,105,110,99,111,109,105,110,103,32,115,101,115,115,105,111,110,32,119,105,110,100,111,119,32,101,120,99,101,101,100,101,100,0,0,0,0,0,0,0,0,97,109,113,112,58,115,101,115,115,105,111,110,58,105,110,118,97,108,105,100,45,102,105,101,108,100,0,0,0,0,0,0,115,101,113,117,101,110,99,105,110,103,32,101,114,114,111,114,44,32,101,120,112,101,99,116,101,100,32,100,101,108,105,118,101,114,121,45,105,100,32,37,117,44,32,103,111,116,32,37,117,0,0,0,0,0,0,0,68,46,91,63,73,73,73,73,63,73,63,73,73,46,111,93,0,0,0,0,0,0,0,0,68,46,91,111,73,63,73,111,68,63,76,67,93,0,0,0,91,68,46,91,115,83,67,93,0,0,0,0,0,0,0,0,68,46,91,73,111,93,0,0,97,109,113,112,58,105,110,118,97,108,105,100,45,102,105,101,108,100,0,0,0,0,0,0,110,111,32,115,117,99,104,32,99,104,97,110,110,101,108,58,32,37,117,0,0,0,0,0,110,111,32,115,117,99,104,32,104,97,110,100,108,101,58,32,37,117,0,0,0,0,0,0,68,46,91,46,46,68,46,91,115,83,67,93,0,0,0,0,68,46,91,68,46,91,115,83,67,93,0,0,0,0,0,0,68,76,91,83,83,63,73,63,72,63,73,110,110,67,67,67,93,0,0,0,0,0,0,0,68,76,91,63,72,73,73,73,93,0,0,0,0,0,0,0,68,76,91,83,73,111,66,66,63,68,76,91,83,73,115,73,111,67,63,115,67,110,67,67,93,68,76,91,67,93,110,110,73,93,0,0,0,0,0,0,68,76,91,83,73,111,66,66,63,68,76,91,83,73,115,73,111,67,63,115,67,110,67,67,93,63,68,76,91,83,73,115,73,111,67,67,93,110,110,73,93,0,0,0,0,0,0,0,68,76,91,63,73,73,73,73,63,73,63,73,63,73,110,63,111,93,0,0,0,0,0,0,68,76,91,111,73,73,111,63,68,76,91,93,93,0,0,0,115,116,97,116,101,45,62,105,110,105,116,0,0,0,0,0,112,110,95,112,111,115,116,95,100,105,115,112,0,0,0,0,68,76,91,111,73,73,111,63,68,76,67,93,0,0,0,0,68,76,91,73,111,63,68,76,91,115,83,67,93,93,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,108,111,103,0,0,0,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,112,117,115,104,0,0,0,0,0,0,0,100,115,116,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,112,114,111,99,101,115,115,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,112,101,110,100,105,110,103,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,112,101,101,107,0,0,0,0,0,0,0,115,114,99,0,0,0,0,0,116,114,97,110,115,112,111,114,116,45,62,111,117,116,112,117,116,95,112,101,110,100,105,110,103,32,62,61,32,115,105,122,101,0,0,0,0,0,0,0,112,110,95,116,114,97,110,115,112,111,114,116,95,112,111,112,0,0,0,0,0,0,0,0,32,32,45,62,32,69,79,83,0,0,0,0,0,0,0,0,112,114,111,99,101,115,115,32,101,114,114,111,114,32,37,105,0,0,0,0,0,0,0,0,32,32,45,62,32,37,115,0,65,77,81,80,0,0,0,0,97,118,97,105,108,97,98,108,101,32,62,61,32,56,0,0,112,110,95,111,117,116,112,117,116,95,119,114,105,116,101,95,97,109,113,112,95,104,101,97,100,101,114,0,0,0,0,0,65,77,81,80,0,1,0,0,0,0,0,0,0,0,0,0,33,100,101,108,105,118,101,114,121,45,62,119,111,114,107,0,112,110,95,102,117,108,108,95,115,101,116,116,108,101,0,0,99,111,112,121,0,0,0,0,109,111,118,101,0,0,0,0,108,105,110,107,45,100,101,116,97,99,104,0,0,0,0,0,99,111,110,110,101,99,116,105,111,110,45,99,108,111,115,101,0,0,0,0,0,0,0,0,110,101,118,101,114,0,0,0,102,97,108,115,101,0,0,0,97,108,108,111,99,97,116,101,95,97,108,105,97,115,0,0,97,109,113,112,58,114,101,115,111,117,114,99,101,45,108,105,109,105,116,45,101,120,99,101,101,100,101,100,0,0,0,0,108,111,99,97,108,45,105,100,108,101,45,116,105,109,101,111,117,116,32,101,120,112,105,114,101,100,0,0,0,0,0,0,97,109,113,112,58,99,111,110,110,101,99,116,105,111,110,58,102,114,97,109,105,110,103,45,101,114,114,111,114,0,0,0,100,97,116,97,32,97,102,116,101,114,32,99,108,111,115,101,0,0,0,0,0,0,0,0,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,0,0,0,0,0,32,32,60,45,32,37,115,0,37,115,32,104,101,97,100,101,114,32,109,105,115,109,97,116,99,104,58,32,37,115,32,91,39,37,115,39,93,37,115,0,32,40,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,41,0,0,0,110,32,61,61,32,80,78,95,69,79,83,0,0,0,0,0,116,114,97,110,115,112,111,114,116,95,99,111,110,115,117,109,101,0,0,0,0,0,0,0,32,32,60,45,32,69,79,83,0,0,0,0,0,0,0,0,115,101,115,115,105,111,110,45,101,110,100,0,0,0,0,0,80,78,95,84,82,65,67,69,95,82,65,87,0,0,0,0,80,78,95,84,82,65,67,69,95,70,82,77,0,0,0,0,80,78,95,84,82,65,67,69,95,68,82,86,0,0,0,0,91,37,112,93,58,37,115,10,0,0,0,0,0,0,0,0,78,111,32,118,97,108,105,100,32,112,114,111,116,111,99,111,108,32,104,101,97,100,101,114,32,102,111,117,110,100,0,0,37,115,32,100,101,116,101,99,116,101,100,0,0,0,0,0,83,65,83,76,0,0,0,0,97,109,113,112,58,99,111,110,110,101,99,116,105,111,110,58,112,111,108,105,99,121,45,101,114,114,111,114,0,0,0,0,67,108,105,101,110,116,32,115,107,105,112,112,101,100,32,97,117,116,104,101,110,116,105,99,97,116,105,111,110,32,45,32,102,111,114,98,105,100,100,101,110,0,0,0,0,0,0,0,69,110,100,32,111,102,32,105,110,112,117,116,32,115,116,114,101,97,109,32,98,101,102,111,114,101,32,112,114,111,116,111,99,111,108,32,100,101,116,101,99,116,105,111,110,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,65,77,81,80,32,99,111,110,110,101,99,116,105,111,110,32,100,101,116,101,99,116,101,100,0,0,0,85,110,107,110,111,119,110,32,112,114,111,116,111,99,111,108,32,100,101,116,101,99,116,101,100,0,0,0,0,0,0,0,37,115,58,32,39,37,115,39,37,115,0,0,0,0,0,0,108,97,121,101,114,32,61,61,32,48,0,0,0,0,0,0,112,110,95,105,111,95,108,97,121,101,114,95,115,101,116,117,112,0,0,0,0,0,0,0,77,101,115,115,97,103,101,123,0,0,0,0,0,0,0,0,97,100,100,114,101,115,115,61,0,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,100,117,114,97,98,108,101,61,37,105,44,32,0,0,0,0,112,114,105,111,114,105,116,121,61,37,105,44,32,0,0,0,116,116,108,61,37,117,44,32,0,0,0,0,0,0,0,0,102,105,114,115,116,95,97,99,113,117,105,114,101,114,61,37,105,44,32,0,0,0,0,0,100,101,108,105,118,101,114,121,95,99,111,117,110,116,61,37,117,44,32,0,0,0,0,0,105,100,61,0,0,0,0,0,117,115,101,114,95,105,100,61,0,0,0,0,0,0,0,0,115,117,98,106,101,99,116,61,0,0,0,0,0,0,0,0,114,101,112,108,121,95,116,111,61,0,0,0,0,0,0,0,99,111,114,114,101,108,97,116,105,111,110,95,105,100,61,0,99,111,110,116,101,110,116,95,116,121,112,101,61,0,0,0,99,111,110,116,101,110,116,95,101,110,99,111,100,105,110,103,61,0,0,0,0,0,0,0,101,120,112,105,114,121,95,116,105,109,101,61,37,108,108,105,44,32,0,0,0,0,0,0,99,114,101,97,116,105,111,110,95,116,105,109,101,61,37,108,108,105,44,32,0,0,0,0,103,114,111,117,112,95,105,100,61,0,0,0,0,0,0,0,103,114,111,117,112,95,115,101,113,117,101,110,99,101,61,37,105,44,32,0,0,0,0,0,114,101,112,108,121,95,116,111,95,103,114,111,117,112,95,105,100,61,0,0,0,0,0,0,105,110,102,101,114,114,101,100,61,37,105,44,32,0,0,0,105,110,115,116,114,117,99,116,105,111,110,115,61,0,0,0,97,110,110,111,116,97,116,105,111,110,115,61,0,0,0,0,112,114,111,112,101,114,116,105,101,115,61,0,0,0,0,0,98,111,100,121,61,0,0,0,125,0,0,0,0,0,0,0,192,51,0,0,19,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,81,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,112,110,95,109,101,115,115,97,103,101,0,0,0,0,0,0,109,115,103,0,0,0,0,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,109,101,115,115,97,103,101,47,109,101,115,115,97,103,101,46,99,0,112,110,95,109,101,115,115,97,103,101,95,105,115,95,100,117,114,97,98,108,101,0,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,100,117,114,97,98,108,101,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,112,114,105,111,114,105,116,121,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,112,114,105,111,114,105,116,121,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,116,116,108,0,0,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,116,116,108,0,0,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,105,115,95,102,105,114,115,116,95,97,99,113,117,105,114,101,114,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,102,105,114,115,116,95,97,99,113,117,105,114,101,114,0,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,100,101,108,105,118,101,114,121,95,99,111,117,110,116,0,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,100,101,108,105,118,101,114,121,95,99,111,117,110,116,0,0,0,112,110,95,109,101,115,115,97,103,101,95,105,100,0,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,97,100,100,114,101,115,115,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,97,100,100,114,101,115,115,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,115,117,98,106,101,99,116,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,115,117,98,106,101,99,116,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,114,101,112,108,121,95,116,111,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,114,101,112,108,121,95,116,111,0,112,110,95,109,101,115,115,97,103,101,95,99,111,114,114,101,108,97,116,105,111,110,95,105,100,0,0,0,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,99,111,110,116,101,110,116,95,116,121,112,101,0,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,99,111,110,116,101,110,116,95,116,121,112,101,0,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,99,111,110,116,101,110,116,95,101,110,99,111,100,105,110,103,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,99,111,110,116,101,110,116,95,101,110,99,111,100,105,110,103,0,112,110,95,109,101,115,115,97,103,101,95,103,101,116,95,103,114,111,117,112,95,105,100,0,112,110,95,109,101,115,115,97,103,101,95,115,101,116,95,103,114,111,117,112,95,105,100,0,109,115,103,32,38,38,32,98,121,116,101,115,32,38,38,32,115,105,122,101,0,0,0,0,112,110,95,109,101,115,115,97,103,101,95,100,101,99,111,100,101,0,0,0,0,0,0,0,100,97,116,97,32,101,114,114,111,114,58,32,37,115,0,0,68,63,76,46,0,0,0,0,68,46,91,111,66,73,111,73,93,0,0,0,0,0,0,0,68,46,91,67,122,83,83,83,67,115,115,116,116,83,73,83,93,0,0,0,0,0,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,117,115,101,114,95,105,100,0,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,97,100,100,114,101,115,115,0,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,115,117,98,106,101,99,116,0,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,114,101,112,108,121,95,116,111,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,99,111,110,116,101,110,116,95,116,121,112,101,0,0,0,0,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,99,111,110,116,101,110,116,95,101,110,99,111,100,105,110,103,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,103,114,111,117,112,95,105,100,0,0,101,114,114,111,114,32,115,101,116,116,105,110,103,32,114,101,112,108,121,95,116,111,95,103,114,111,117,112,95,105,100,0,68,76,91,111,66,63,73,111,73,93,0,0,0,0,0,0,68,76,91,67,122,83,83,83,67,115,115,116,116,83,73,83,93,0,0,0,0,0,0,0,83,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,84,114,121,105,110,103,32,116,111,32,115,101,110,100,32,83,65,83,76,32,102,114,97,109,101,32,40,37,100,41,44,32,98,117,116,32,105,108,108,101,103,97,108,58,32,97,108,114,101,97,100,121,32,105,110,32,108,97,116,101,114,32,115,116,97,116,101,32,40,37,100,41,0,0,0,0,0,0,0,0,84,114,121,105,110,103,32,116,111,32,115,101,110,100,32,115,101,114,118,101,114,32,83,65,83,76,32,102,114,97,109,101,32,40,37,100,41,32,111,110,32,97,32,99,108,105,101,110,116,0,0,0,0,0,0,0,84,114,121,105,110,103,32,116,111,32,115,101,110,100,32,99,108,105,101,110,116,32,83,65,83,76,32,102,114,97,109,101,32,40,37,100,41,32,111,110,32,97,32,115,101,114,118,101,114,0,0,0,0,0,0,0,80,78,95,83,65,83,76,95,67,79,78,70,73,71,95,80,65,84,72,0,0,0,0,0,112,114,111,116,111,110,45,99,108,105,101,110,116,0,0,0,112,114,111,116,111,110,45,115,101,114,118,101,114,0,0,0,68,46,91,115,122,93,0,0,68,46,91,64,91,0,0,0,0,0,0,0,0,0,0,0,37,42,115,32,0,0,0,0,68,46,91,122,93,0,0,0,68,46,91,66,93,0,0,0,68,76,91,115,122,93,0,0,68,76,91,64,84,91,42,115,93,93,0,0,0,0,0,0,68,76,91,122,93,0,0,0,68,76,91,66,93,0,0,0,32,32,45,62,32,37,115,0,83,65,83,76,0,0,0,0,115,105,122,101,32,62,61,32,83,65,83,76,95,72,69,65,68,69,82,95,76,69,78,0,47,104,111,109,101,47,103,111,114,100,111,110,47,112,114,111,106,101,99,116,115,47,112,114,111,116,111,110,45,103,105,116,47,112,114,111,116,111,110,45,99,47,115,114,99,47,115,97,115,108,47,115,97,115,108,46,99,0,0,0,0,0,0,0,112,110,95,111,117,116,112,117,116,95,119,114,105,116,101,95,115,97,115,108,95,104,101,97,100,101,114,0,0,0,0,0,65,77,81,80,3,1,0,0,0,0,0,0,0,0,0,0,97,109,113,112,58,99,111,110,110,101,99,116,105,111,110,58,102,114,97,109,105,110,103,45,101,114,114,111,114,0,0,0,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,0,0,0,0,0,32,32,60,45,32,37,115,0,37,115,32,104,101,97,100,101,114,32,109,105,115,109,97,116,99,104,58,32,37,115,32,91,39,37,115,39,93,37,115,0,32,40,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,41,0,0,0,80,76,65,73,78,0,0,0,65,78,79,78,89,77,79,85,83,0,0,0,0,0,0,0,97,110,111,110,121,109,111,117,115,0,0,0,0,0,0,0,65,78,79,78,89,77,79,85,83,0,0,0,0,0,0,0,97,110,111,110,121,109,111,117,115,0,0,0,0,0,0,0,87,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  var _DtoIHigh=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'AMQPWSB10'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

   
  Module["_strncpy"] = _strncpy;

   
  Module["_i64Add"] = _i64Add;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _BItoD=true;

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
___buildEnvironment(ENV);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "_send": _send, "___setErrNo": ___setErrNo, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_getenv": _getenv, "_write": _write, "___errno_location": ___errno_location, "_mkport": _mkport, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var _send=env._send;
  var ___setErrNo=env.___setErrNo;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _getenv=env._getenv;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _mkport=env._mkport;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _pn_get_version_major() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _pn_get_version_minor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 10;
}
function _pn_object_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _pn_object_compare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $2;
 $4 = $1;
 $5 = $4;
 $6 = (($3) - ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function _pn_object_new($clazz,$size) {
 $clazz = $clazz|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, $object = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $size;
 $object = 0;
 $2 = $1;
 $3 = (8 + ($2))|0;
 $4 = (_malloc($3)|0);
 $head = $4;
 $5 = $head;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $13 = $object;
  STACKTOP = sp;return ($13|0);
 }
 $7 = $head;
 $8 = (($7) + 8|0);
 $object = $8;
 $9 = $0;
 $10 = $head;
 HEAP32[$10>>2] = $9;
 $11 = $head;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 1;
 $13 = $object;
 STACKTOP = sp;return ($13|0);
}
function _pn_object_incref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + -8|0);
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _pn_object_decref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = (($1) + -8|0);
 $head = $2;
 $3 = $head;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = $head;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + -1)|0;
  HEAP32[$8>>2] = $10;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((488|0),(176|0),238,(512|0));
  // unreachable;
 }
}
function _pn_object_refcount($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + -8|0);
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((456|0),(176|0),231,(464|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_object_free($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $head = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = (($1) + -8|0);
 $head = $2;
 $3 = $head;
 _free($3);
 STACKTOP = sp;return;
}
function _pn_object_reify($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $object;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (($4) + -8|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 } else {
  $7 = HEAP32[80>>2]|0;
  $0 = $7;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _pn_void_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _pn_void_compare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $2;
 $4 = $1;
 $5 = $4;
 $6 = (($3) - ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function _pn_void_inspect($object,$dst) {
 $object = $object|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $object;
 $1 = $dst;
 $2 = $1;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (_pn_string_addf($2,88,$vararg_buffer)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_class_id($clazz) {
 $clazz = $clazz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_class_new($clazz,$size) {
 $clazz = $clazz|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $object = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $size;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((168|0),(176|0),62,(240|0));
  // unreachable;
 }
 $4 = $0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $1;
 $9 = (FUNCTION_TABLE_iii[$6 & 127]($7,$8)|0);
 $object = $9;
 $10 = $0;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $18 = $object;
  STACKTOP = sp;return ($18|0);
 }
 $14 = $0;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $object;
 FUNCTION_TABLE_vi[$16 & 127]($17);
 $18 = $object;
 STACKTOP = sp;return ($18|0);
}
function _pn_class_incref($clazz,$object) {
 $clazz = $clazz|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $object;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((168|0),(176|0),72,(256|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 $6 = $0;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_ii[$8 & 127]($9)|0);
 $0 = $10;
 $11 = $0;
 $12 = (($11) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 FUNCTION_TABLE_vi[$13 & 127]($14);
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _pn_class_refcount($clazz,$object) {
 $clazz = $clazz|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $object;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (FUNCTION_TABLE_ii[$6 & 127]($7)|0);
  $0 = $8;
  $9 = $0;
  $10 = (($9) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = (FUNCTION_TABLE_ii[$11 & 127]($12)|0);
  STACKTOP = sp;return ($13|0);
 } else {
  ___assert_fail((168|0),(176|0),82,(272|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_class_decref($clazz,$object) {
 $clazz = $clazz|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $clazz;
 $2 = $object;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((168|0),(176|0),89,(296|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $1;
   $8 = (($7) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $2;
   $11 = (FUNCTION_TABLE_ii[$9 & 127]($10)|0);
   $1 = $11;
   $12 = $1;
   $13 = (($12) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $2;
   FUNCTION_TABLE_vi[$14 & 127]($15);
   $16 = $1;
   $17 = (($16) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $2;
   $20 = (FUNCTION_TABLE_ii[$18 & 127]($19)|0);
   $rc = $20;
   $21 = $rc;
   $22 = ($21|0)==(0);
   if (!($22)) {
    $42 = $rc;
    $0 = $42;
    $43 = $0;
    STACKTOP = sp;return ($43|0);
   }
   $23 = $1;
   $24 = (($23) + 28|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0|0);
   if ($26) {
    $27 = $1;
    $28 = (($27) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $2;
    FUNCTION_TABLE_vi[$29 & 127]($30);
    $31 = $1;
    $32 = (($31) + 24|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $2;
    $35 = (FUNCTION_TABLE_ii[$33 & 127]($34)|0);
    $rc = $35;
   }
   $36 = $rc;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = $1;
    $39 = (($38) + 32|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $2;
    FUNCTION_TABLE_vi[$40 & 127]($41);
    $0 = 0;
    $43 = $0;
    STACKTOP = sp;return ($43|0);
   } else {
    break;
   }
  }
 } while(0);
 $0 = 0;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _pn_class_free($clazz,$object) {
 $clazz = $clazz|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $object;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((168|0),(176|0),116,(312|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_ii[$8 & 127]($9)|0);
 $0 = $10;
 $11 = $0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (FUNCTION_TABLE_ii[$13 & 127]($14)|0);
 $rc = $15;
 $16 = $rc;
 $17 = ($16|0)==(1);
 if (!($17)) {
  $18 = $rc;
  $19 = ($18|0)==(-1);
  if (!($19)) {
   ___assert_fail((328|0),(176|0),120,(312|0));
   // unreachable;
  }
 }
 $20 = $rc;
 $21 = ($20|0)==(1);
 do {
  if ($21) {
   $22 = $0;
   $23 = $1;
   $24 = (_pn_class_decref($22,$23)|0);
   $rc = $24;
   $25 = $rc;
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   } else {
    ___assert_fail((352|0),(176|0),123,(312|0));
    // unreachable;
   }
  } else {
   $27 = $0;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $0;
    $32 = (($31) + 28|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    FUNCTION_TABLE_vi[$33 & 127]($34);
   }
   $35 = $0;
   $36 = (($35) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   FUNCTION_TABLE_vi[$37 & 127]($38);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _pn_class_hashcode($clazz,$object) {
 $clazz = $clazz|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $clazz;
 $2 = $object;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((168|0),(176|0),141,(360|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = (FUNCTION_TABLE_ii[$9 & 127]($10)|0);
 $1 = $11;
 $12 = $1;
 $13 = (($12) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = (FUNCTION_TABLE_ii[$18 & 127]($19)|0);
  $0 = $20;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $21 = $2;
  $22 = $21;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _pn_class_compare($clazz,$a,$b) {
 $clazz = $clazz|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $clazz;
 $2 = $a;
 $3 = $b;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((168|0),(176|0),156,(384|0));
  // unreachable;
 }
 $6 = $2;
 $7 = $3;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $9 = $1;
 $10 = (($9) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (FUNCTION_TABLE_ii[$11 & 127]($12)|0);
 $1 = $13;
 $14 = $2;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $3;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $1;
   $19 = (($18) + 44|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $1;
    $23 = (($22) + 44|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $2;
    $26 = $3;
    $27 = (FUNCTION_TABLE_iii[$24 & 127]($25,$26)|0);
    $0 = $27;
    $33 = $0;
    STACKTOP = sp;return ($33|0);
   }
  }
 }
 $28 = $2;
 $29 = $28;
 $30 = $3;
 $31 = $30;
 $32 = (($29) - ($31))|0;
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _pn_class_equals($clazz,$a,$b) {
 $clazz = $clazz|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_pn_class_compare($3,$4,$5)|0);
 $7 = ($6|0)==(0);
 STACKTOP = sp;return ($7|0);
}
function _pn_class_inspect($clazz,$object,$dst) {
 $clazz = $clazz|0;
 $object = $object|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $clazz;
 $2 = $object;
 $3 = $dst;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((168|0),(176|0),176,(408|0));
  // unreachable;
 }
 $6 = $1;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (FUNCTION_TABLE_ii[$8 & 127]($9)|0);
 $1 = $10;
 $11 = $3;
 $12 = (_pn_string_get($11)|0);
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = $3;
  (_pn_string_set($14,432)|0);
 }
 $15 = $2;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = (($17) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $1;
   $22 = (($21) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $2;
   $25 = $3;
   $26 = (FUNCTION_TABLE_iii[$23 & 127]($24,$25)|0);
   $0 = $26;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31;
 } else {
  $32 = 440;
 }
 $name = $32;
 $33 = $3;
 $34 = $name;
 $35 = $2;
 HEAP32[$vararg_buffer>>2] = $34;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $35;
 $36 = (_pn_string_addf($33,448,$vararg_buffer)|0);
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _pn_incref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[80>>2]|0;
 $2 = $0;
 $3 = (_pn_class_incref($1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pn_decref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[80>>2]|0;
 $2 = $0;
 $3 = (_pn_class_decref($1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pn_refcount($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[80>>2]|0;
 $2 = $0;
 $3 = (_pn_class_refcount($1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pn_free($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[80>>2]|0;
 $2 = $0;
 _pn_class_free($1,$2);
 STACKTOP = sp;return;
}
function _pn_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[80>>2]|0;
 $2 = $0;
 $3 = (_pn_class_hashcode($1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pn_compare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = HEAP32[80>>2]|0;
 $3 = $0;
 $4 = $1;
 $5 = (_pn_class_compare($2,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pn_equals($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_compare($2,$3)|0);
 $5 = ($4|0)!=(0);
 $6 = $5 ^ 1;
 STACKTOP = sp;return ($6|0);
}
function _pn_inspect($object,$dst) {
 $object = $object|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $dst;
 $2 = HEAP32[80>>2]|0;
 $3 = $0;
 $4 = $1;
 $5 = (_pn_class_inspect($2,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pn_list_size($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((616|0),(624|0),35,(688|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_list_get($list,$index) {
 $list = $list|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $index;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((616|0),(624|0),41,(704|0));
  // unreachable;
 }
 $4 = $0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = $0;
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($8>>>0) % ($11>>>0))&-1;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  STACKTOP = sp;return ($17|0);
 } else {
  ___assert_fail((720|0),(624|0),41,(704|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_list_ensure($list,$capacity) {
 $list = $list|0;
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newcap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $capacity;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((616|0),(624|0),56,(736|0));
  // unreachable;
 }
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ($6>>>0)<($7>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $newcap = $11;
 while(1) {
  $12 = $newcap;
  $13 = $1;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $newcap;
  $16 = $15<<1;
  $newcap = $16;
 }
 $17 = $0;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $newcap;
 $21 = $20<<2;
 $22 = (_realloc($19,$21)|0);
 $23 = $0;
 $24 = (($23) + 12|0);
 HEAP32[$24>>2] = $22;
 $25 = $0;
 $26 = (($25) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  ___assert_fail((752|0),(624|0),61,(736|0));
  // unreachable;
 }
 $29 = $newcap;
 $30 = $0;
 $31 = (($30) + 4|0);
 HEAP32[$31>>2] = $29;
 STACKTOP = sp;return;
}
function _pn_list_add($list,$value) {
 $list = $list|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $value;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = $0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  _pn_list_ensure($4,$8);
  $9 = $1;
  $10 = $0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$11>>2] = $13;
  $14 = $0;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($12<<2)|0);
  HEAP32[$17>>2] = $9;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  (_pn_class_incref($19,$20)|0);
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((616|0),(624|0),68,(768|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_list_pop($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $list;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((616|0),(624|0),77,(784|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -1)|0;
  HEAP32[$9>>2] = $11;
  $12 = $1;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _pn_list_index($list,$value) {
 $list = $list|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $list;
 $2 = $value;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = $i;
  $11 = $1;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (_pn_class_equals($9,$15,$16)|0);
  if ($17) {
   label = 4;
   break;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 4) {
  $18 = $i;
  $0 = $18;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pn_list_remove($list,$value) {
 $list = $list|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $list;
 $2 = $value;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((616|0),(624|0),98,(800|0));
  // unreachable;
 }
 $5 = $1;
 $6 = $2;
 $7 = (_pn_list_index($5,$6)|0);
 $idx = $7;
 $8 = $idx;
 $9 = ($8|0)<(0);
 if ($9) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $12 = $$pre_trunc&1;
  STACKTOP = sp;return ($12|0);
 }
 $10 = $1;
 $11 = $idx;
 _pn_list_del($10,$11,1);
 $$expand_i1_val2 = 1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function _pn_list_del($list,$index,$n) {
 $list = $list|0;
 $index = $index|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $slide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $index;
 $2 = $n;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((616|0),(624|0),111,(816|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12>>>0) % ($11>>>0))&-1;
 $1 = $13;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $2;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = $i;
  $21 = (($19) + ($20))|0;
  $22 = $0;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  (_pn_class_decref($18,$26)|0);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = $0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $1;
 $33 = $2;
 $34 = (($32) + ($33))|0;
 $35 = (($31) - ($34))|0;
 $slide = $35;
 $i1 = 0;
 while(1) {
  $36 = $i1;
  $37 = $slide;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $1;
  $40 = $2;
  $41 = (($39) + ($40))|0;
  $42 = $i1;
  $43 = (($41) + ($42))|0;
  $44 = $0;
  $45 = (($44) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($43<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $1;
  $50 = $i1;
  $51 = (($49) + ($50))|0;
  $52 = $0;
  $53 = (($52) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  HEAP32[$55>>2] = $48;
  $56 = $i1;
  $57 = (($56) + 1)|0;
  $i1 = $57;
 }
 $58 = $2;
 $59 = $0;
 $60 = (($59) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) - ($58))|0;
 HEAP32[$60>>2] = $62;
 STACKTOP = sp;return;
}
function _pn_list_clear($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $list;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = $0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  _pn_list_del($3,0,$6);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((616|0),(624|0),129,(832|0));
  // unreachable;
 }
}
function _pn_list($clazz,$capacity) {
 $clazz = $clazz|0;
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $capacity;
 $2 = (_pn_class_new(848,16)|0);
 $list = $2;
 $3 = $0;
 $4 = $list;
 HEAP32[$4>>2] = $3;
 $5 = $1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $10 = $7;
 } else {
  $10 = 16;
 }
 $8 = $list;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $10;
 $11 = $list;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<2;
 $15 = (_malloc($14)|0);
 $16 = $list;
 $17 = (($16) + 12|0);
 HEAP32[$17>>2] = $15;
 $18 = $list;
 $19 = (($18) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = $list;
 STACKTOP = sp;return ($20|0);
}
function _pn_map($key,$value,$capacity,$load_factor) {
 $key = $key|0;
 $value = $value|0;
 $capacity = $capacity|0;
 $load_factor = +$load_factor;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $map = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $value;
 $2 = $capacity;
 $3 = $load_factor;
 $4 = (_pn_class_new(1048,36)|0);
 $map = $4;
 $5 = $0;
 $6 = $map;
 HEAP32[$6>>2] = $5;
 $7 = $1;
 $8 = $map;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $2;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $2;
  $15 = $12;
 } else {
  $15 = 16;
 }
 $13 = $map;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = $15;
 $16 = $map;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+($18>>>0));
 $20 = $19 * 0.85999999999999999;
 $21 = (~~(($20))>>>0);
 $22 = $map;
 $23 = (($22) + 16|0);
 HEAP32[$23>>2] = $21;
 $24 = $map;
 $25 = (($24) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $28 = $map;
  $29 = (($28) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $map;
  $32 = (($31) + 16|0);
  HEAP32[$32>>2] = $30;
 }
 $33 = $3;
 $34 = $map;
 $35 = (($34) + 32|0);
 HEAPF32[$35>>2] = $33;
 $36 = $map;
 $37 = (($36) + 24|0);
 HEAP32[$37>>2] = 90;
 $38 = $map;
 $39 = (($38) + 28|0);
 HEAP32[$39>>2] = 91;
 $40 = $map;
 _pni_map_allocate($40);
 $41 = $map;
 STACKTOP = sp;return ($41|0);
}
function _pn_map_put($map,$key,$value) {
 $map = $map|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dref_val = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $key;
 $2 = $value;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = $1;
  $7 = (_pni_map_entry($5,$6,0,1)|0);
  $entry = $7;
  $8 = $entry;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $dref_val = $10;
  $11 = $2;
  $12 = $entry;
  $13 = (($12) + 4|0);
  HEAP32[$13>>2] = $11;
  $14 = $0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  (_pn_class_incref($16,$17)|0);
  $18 = $0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $dref_val;
  (_pn_class_decref($20,$21)|0);
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((1112|0),(1120|0),252,(1184|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_map_get($map,$key) {
 $map = $map|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $key;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1112|0),(1120|0),263,(1200|0));
  // unreachable;
 }
 $4 = $0;
 $5 = $1;
 $6 = (_pni_map_entry($4,$5,0,0)|0);
 $entry = $6;
 $7 = $entry;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $entry;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  STACKTOP = sp;return ($12|0);
 } else {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_map_rehash($map,$index) {
 $map = $map|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $complete = 0, $current = 0, $entry = 0;
 var $hashcode = 0, $i = 0, $reloc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $index;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1112|0),(1120|0),271,(1216|0));
  // unreachable;
 }
 $4 = $1;
 $i = $4;
 $complete = 0;
 while(1) {
  $5 = $complete;
  $6 = $5&1;
  $7 = $6 ^ 1;
  if (!($7)) {
   label = 23;
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8<<4)|0);
  $entry = $12;
  $13 = $entry;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 6;
   break;
  }
  $15 = $entry;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   label = 8;
   break;
  }
  $20 = $i;
  $current = $20;
  $21 = $entry;
  $22 = (($21) + 12|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(2);
  if ($25) {
   $complete = 1;
  } else {
   $26 = $entry;
   $27 = (($26) + 12|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)==(1);
   if (!($30)) {
    label = 12;
    break;
   }
   $31 = $entry;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $i = $33;
  }
  $34 = $0;
  $35 = (($34) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $entry;
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_ii[$36 & 127]($38)|0);
  $hashcode = $39;
  $40 = $hashcode;
  $41 = $0;
  $42 = (($41) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40>>>0) % ($43>>>0))&-1;
  $45 = $0;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($44<<4)|0);
  $reloc = $48;
  $49 = $reloc;
  $50 = (($49) + 12|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = $reloc;
   $55 = (($54) + 12|0);
   HEAP8[$55>>0] = 2;
   $56 = $entry;
   $57 = HEAP32[$56>>2]|0;
   $58 = $reloc;
   HEAP32[$58>>2] = $57;
   $59 = $entry;
   $60 = (($59) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $reloc;
   $63 = (($62) + 4|0);
   HEAP32[$63>>2] = $61;
   $64 = $entry;
   HEAP32[$64>>2] = 0;
   $65 = $entry;
   $66 = (($65) + 4|0);
   HEAP32[$66>>2] = 0;
   $67 = $entry;
   $68 = (($67) + 12|0);
   HEAP8[$68>>0] = 0;
   $69 = $entry;
   $70 = (($69) + 8|0);
   HEAP32[$70>>2] = 0;
  } else {
   while(1) {
    $71 = $reloc;
    $72 = (($71) + 12|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = ($74|0)==(1);
    if (!($75)) {
     break;
    }
    $76 = $reloc;
    $77 = (($76) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $0;
    $80 = (($79) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($78<<4)|0);
    $reloc = $82;
   }
   $83 = $reloc;
   $84 = (($83) + 12|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = ($86|0)==(2);
   if (!($87)) {
    label = 20;
    break;
   }
   $88 = $reloc;
   $89 = (($88) + 12|0);
   HEAP8[$89>>0] = 1;
   $90 = $current;
   $91 = $reloc;
   $92 = (($91) + 8|0);
   HEAP32[$92>>2] = $90;
   $93 = $entry;
   $94 = (($93) + 12|0);
   HEAP8[$94>>0] = 2;
   $95 = $entry;
   $96 = (($95) + 8|0);
   HEAP32[$96>>2] = 0;
  }
 }
 if ((label|0) == 6) {
  ___assert_fail((1232|0),(1120|0),276,(1216|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  ___assert_fail((1240|0),(1120|0),277,(1216|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  ___assert_fail((1272|0),(1120|0),282,(1216|0));
  // unreachable;
 }
 else if ((label|0) == 20) {
  ___assert_fail((1304|0),(1120|0),302,(1216|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _pn_map_del($map,$key) {
 $map = $map|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dref_key = 0, $dref_value = 0, $entry = 0, $orig_next = 0, $orig_state = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $prev = sp + 16|0;
 $0 = $map;
 $1 = $key;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1112|0),(1120|0),314,(1336|0));
  // unreachable;
 }
 HEAP32[$prev>>2] = 0;
 $4 = $0;
 $5 = $1;
 $6 = (_pni_map_entry($4,$5,$prev,0)|0);
 $entry = $6;
 $7 = $entry;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $entry;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $orig_state = $11;
 $12 = $entry;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $orig_next = $14;
 $15 = $entry;
 $16 = HEAP32[$15>>2]|0;
 $dref_key = $16;
 $17 = $entry;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $dref_value = $19;
 $20 = HEAP32[$prev>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = HEAP32[$prev>>2]|0;
  $23 = (($22) + 8|0);
  HEAP32[$23>>2] = 0;
  $24 = HEAP32[$prev>>2]|0;
  $25 = (($24) + 12|0);
  HEAP8[$25>>0] = 2;
 }
 $26 = $entry;
 $27 = (($26) + 12|0);
 HEAP8[$27>>0] = 0;
 $28 = $entry;
 $29 = (($28) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = $entry;
 HEAP32[$30>>2] = 0;
 $31 = $entry;
 $32 = (($31) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = $0;
 $34 = (($33) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + -1)|0;
 HEAP32[$34>>2] = $36;
 $37 = $orig_state;
 $38 = $37&255;
 $39 = ($38|0)==(1);
 if ($39) {
  $40 = $0;
  $41 = $orig_next;
  _pn_map_rehash($40,$41);
 }
 $42 = $0;
 $43 = HEAP32[$42>>2]|0;
 $44 = $dref_key;
 (_pn_class_decref($43,$44)|0);
 $45 = $0;
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $dref_value;
 (_pn_class_decref($47,$48)|0);
 STACKTOP = sp;return;
}
function _pn_map_head($map) {
 $map = $map|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $map;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1112|0),(1120|0),345,(1352|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<4)|0);
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  if ($17) {
   label = 6;
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 6) {
  $18 = $i;
  $19 = (($18) + 1)|0;
  $0 = $19;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pn_map_next($map,$entry) {
 $map = $map|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $map;
 $2 = $entry;
 $3 = $2;
 $i = $3;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9<<4)|0);
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  if ($17) {
   label = 4;
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 4) {
  $18 = $i;
  $19 = (($18) + 1)|0;
  $0 = $19;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pn_map_key($map,$entry) {
 $map = $map|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $entry;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1112|0),(1120|0),369,(1368|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) - 1)|0;
  $8 = $0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7<<4)|0);
  $12 = HEAP32[$11>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((1232|0),(1120|0),370,(1368|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_map_value($map,$entry) {
 $map = $map|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $entry;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1112|0),(1120|0),376,(1384|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) - 1)|0;
  $8 = $0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7<<4)|0);
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  STACKTOP = sp;return ($13|0);
 } else {
  ___assert_fail((1232|0),(1120|0),377,(1384|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_hash($clazz,$capacity,$load_factor) {
 $clazz = $clazz|0;
 $capacity = $capacity|0;
 $load_factor = +$load_factor;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $capacity;
 $2 = $load_factor;
 $3 = HEAP32[1472>>2]|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_pn_map($3,$4,$5,$6)|0);
 $hash = $7;
 $8 = $hash;
 $9 = (($8) + 24|0);
 HEAP32[$9>>2] = 92;
 $10 = $hash;
 $11 = (($10) + 28|0);
 HEAP32[$11>>2] = 93;
 $12 = $hash;
 STACKTOP = sp;return ($12|0);
}
function _pn_hash_put($hash,$key,$value) {
 $hash = $hash|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $key;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = $2;
 $7 = (_pn_map_put($3,$5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pn_hash_get($hash,$key) {
 $hash = $hash|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $key;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (_pn_map_get($2,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pn_hash_del($hash,$key) {
 $hash = $hash|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $key;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _pn_map_del($2,$4);
 STACKTOP = sp;return;
}
function _pn_hash_head($hash) {
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $0;
 $2 = (_pn_map_head($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _pn_hash_next($hash,$entry) {
 $hash = $hash|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $entry;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_map_next($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_hash_key($hash,$entry) {
 $hash = $hash|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $entry;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_map_key($2,$3)|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function _pn_hash_value($hash,$entry) {
 $hash = $hash|0;
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hash;
 $1 = $entry;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_map_value($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_string($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (_strlen(($4|0))|0);
  $6 = $5;
 } else {
  $6 = 0;
 }
 $7 = (_pn_stringn($1,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pn_stringn($bytes,$n) {
 $bytes = $bytes|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $string = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $n;
 $2 = (_pn_class_new(1536,12)|0);
 $string = $2;
 $3 = $1;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = $5;
  $9 = $6;
 } else {
  $9 = 16;
 }
 $7 = $string;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = $9;
 $10 = $string;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_malloc($12)|0);
 $14 = $string;
 HEAP32[$14>>2] = $13;
 $15 = $string;
 $16 = $0;
 $17 = $1;
 (_pn_string_setn($15,$16,$17)|0);
 $18 = $string;
 STACKTOP = sp;return ($18|0);
}
function _pn_string_setn($string,$bytes,$n) {
 $string = $string|0;
 $bytes = $bytes|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string;
 $2 = $bytes;
 $3 = $n;
 $4 = $1;
 $5 = $3;
 $6 = (_pn_string_grow($4,$5)|0);
 $err = $6;
 $7 = $err;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $err;
  $0 = $9;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = $3;
  $16 = $15;
  _memcpy(($13|0),($14|0),($16|0))|0;
  $17 = $3;
  $18 = $1;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17)|0);
  HEAP8[$20>>0] = 0;
  $21 = $3;
  $22 = $1;
  $23 = (($22) + 4|0);
  HEAP32[$23>>2] = $21;
 } else {
  $24 = $1;
  $25 = (($24) + 4|0);
  HEAP32[$25>>2] = -1;
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _pn_string_get($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1608|0),(1616|0),119,(1680|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _pn_string_size($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((1608|0),(1616|0),129,(1696|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = $1;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _pn_string_set($string,$bytes) {
 $string = $string|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $bytes;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = (_strlen(($6|0))|0);
  $8 = $7;
 } else {
  $8 = 0;
 }
 $9 = (_pn_string_setn($2,$3,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _pn_string_grow($string,$capacity) {
 $string = $string|0;
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $grow = 0, $growed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string;
 $2 = $capacity;
 $grow = 0;
 while(1) {
  $3 = $1;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $2;
  $7 = $6;
  $8 = (($7) + 1)|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12<<1;
  HEAP32[$11>>2] = $13;
  $grow = 1;
 }
 $14 = $grow;
 $15 = $14&1;
 do {
  if ($15) {
   $16 = $1;
   $17 = HEAP32[$16>>2]|0;
   $18 = $1;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_realloc($17,$20)|0);
   $growed = $21;
   $22 = $growed;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $growed;
    $25 = $1;
    HEAP32[$25>>2] = $24;
    break;
   } else {
    $0 = -2;
    $26 = $0;
    STACKTOP = sp;return ($26|0);
   }
  }
 } while(0);
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _pn_string_clear($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $0;
 (_pn_string_set($1,0)|0);
 STACKTOP = sp;return;
}
function _pn_string_format($string,$format,$varargs) {
 $string = $string|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 8|0;
 $0 = $string;
 $1 = $format;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_string_vformat($2,$3,$ap)|0);
 $err = $4;
 $5 = $err;
 STACKTOP = sp;return ($5|0);
}
function _pn_string_vformat($string,$format,$ap) {
 $string = $string|0;
 $format = $format|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $format;
 $2 = $ap;
 $3 = $0;
 (_pn_string_set($3,1712)|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = (_pn_string_vaddf($4,$5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pn_string_vaddf($string,$format,$ap) {
 $string = $string|0;
 $format = $format|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy = 0, $err = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copy = sp + 8|0;
 $1 = $string;
 $2 = $format;
 $3 = $ap;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $0 = -2;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 while(1) {
  $8 = $3;
  $vacopy_currentptr = HEAP32[$8>>2]|0;
  HEAP32[$copy>>2] = $vacopy_currentptr;
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($10) + ($13)|0);
  $15 = $1;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($17) - ($20))|0;
  $22 = $2;
  $23 = (_vsnprintf($14,$21,$22,$copy)|0);
  $err = $23;
  $24 = $err;
  $25 = ($24|0)<(0);
  if ($25) {
   label = 5;
   break;
  }
  $27 = $err;
  $28 = $1;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($30) - ($33))|0;
  $35 = ($27>>>0)>=($34>>>0);
  if (!($35)) {
   label = 8;
   break;
  }
  $36 = $1;
  $37 = $1;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $err;
  $41 = (($39) + ($40))|0;
  (_pn_string_grow($36,$41)|0);
 }
 if ((label|0) == 5) {
  $26 = $err;
  $0 = $26;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 8) {
  $42 = $err;
  $43 = $1;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42))|0;
  HEAP32[$44>>2] = $46;
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _pn_string_addf($string,$format,$varargs) {
 $string = $string|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 8|0;
 $0 = $string;
 $1 = $format;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_string_vaddf($2,$3,$ap)|0);
 $err = $4;
 $5 = $err;
 STACKTOP = sp;return ($5|0);
}
function _pn_string_buffer($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  ___assert_fail((1608|0),(1616|0),246,(1720|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_string_capacity($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) - 1)|0;
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((1608|0),(1616|0),252,(1744|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_string_resize($string,$size) {
 $string = $string|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1608|0),(1616|0),258,(1768|0));
  // unreachable;
 }
 $5 = $1;
 $6 = $2;
 $7 = (_pn_string_grow($5,$6)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $11 = $2;
  $12 = $1;
  $13 = (($12) + 4|0);
  HEAP32[$13>>2] = $11;
  $14 = $2;
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14)|0);
  HEAP8[$17>>0] = 0;
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _pn_record() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $record = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_pn_class_new(1824,12)|0);
 $record = $0;
 $1 = $record;
 $2 = HEAP32[160>>2]|0;
 _pn_record_def($1,0,$2);
 $3 = $record;
 STACKTOP = sp;return ($3|0);
}
function _pn_record_def($record,$key,$clazz) {
 $record = $record|0;
 $key = $key|0;
 $clazz = $clazz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $field = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $record;
 $1 = $key;
 $2 = $clazz;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1896|0),(1904|0),93,(1968|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((1984|0),(1904|0),94,(1968|0));
  // unreachable;
 }
 $7 = $0;
 $8 = $1;
 $9 = (_pni_record_find($7,$8)|0);
 $field = $9;
 $10 = $field;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $17 = $0;
  $18 = (_pni_record_create($17)|0);
  $field = $18;
  $19 = $1;
  $20 = $field;
  HEAP32[$20>>2] = $19;
  $21 = $2;
  $22 = $field;
  $23 = (($22) + 4|0);
  HEAP32[$23>>2] = $21;
  STACKTOP = sp;return;
 }
 $12 = $field;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ($14|0)==($15|0);
 if (!($16)) {
  ___assert_fail((1992|0),(1904|0),98,(1968|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _pn_record_clear($record) {
 $record = $record|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $field = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $record;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((1896|0),(1904|0),143,(2016|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + (($7*12)|0)|0);
  $field = $11;
  $12 = $field;
  $13 = (($12) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $field;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  (_pn_class_decref($14,$17)|0);
  $18 = $field;
  HEAP32[$18>>2] = 0;
  $19 = $field;
  $20 = (($19) + 4|0);
  HEAP32[$20>>2] = 0;
  $21 = $field;
  $22 = (($21) + 8|0);
  HEAP32[$22>>2] = 0;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $0;
 HEAP32[$25>>2] = 0;
 $26 = $0;
 $27 = HEAP32[160>>2]|0;
 _pn_record_def($26,0,$27);
 STACKTOP = sp;return;
}
function _pn_log_enabled() {
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[2032>>2]|0;
 $2 = ($1|0)!=(-1);
 if ($2) {
  $3 = HEAP32[2032>>2]|0;
  $4 = ($3|0)!=(0);
  $$expand_i1_val = $4&1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $11 = $$pre_trunc&1;
  STACKTOP = sp;return ($11|0);
 }
 $5 = HEAP32[2040>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = (_pn_env_bool(2048)|0);
  $8 = $7&1;
  HEAP32[2040>>2] = $8;
 }
 $9 = HEAP32[2040>>2]|0;
 $10 = ($9|0)!=(0);
 $$expand_i1_val2 = $10&1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $11 = $$pre_trunc&1;
 STACKTOP = sp;return ($11|0);
}
function _pn_vlogf_impl($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $fmt;
 $1 = $ap;
 $2 = (_pn_string(2064)|0);
 $msg = $2;
 $3 = $msg;
 $4 = $0;
 $5 = $1;
 (_pn_string_vformat($3,$4,$5)|0);
 $6 = HEAP32[_stderr>>2]|0;
 $7 = $msg;
 $8 = (_pn_string_get($7)|0);
 HEAP32[$vararg_buffer>>2] = $8;
 (_fprintf(($6|0),(2072|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _pn_logf_impl($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $1 = $0;
 _pn_vlogf_impl($1,$ap);
 STACKTOP = sp;return;
}
function _pn_quote_data($dst,$capacity,$src,$size) {
 $dst = $dst|0;
 $capacity = $capacity|0;
 $src = $src|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $idx = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $dst;
 $2 = $capacity;
 $3 = $src;
 $4 = $size;
 $idx = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5>>>0)<($6>>>0);
  if (!($7)) {
   label = 18;
   break;
  }
  $8 = $i;
  $9 = $3;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $c = $11;
  $12 = $c;
  $13 = $12&255;
  $14 = (_isprint($13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $idx;
   $17 = $2;
   $18 = (($17) - 1)|0;
   $19 = ($16|0)<($18|0);
   if (!($19)) {
    label = 6;
    break;
   }
   $20 = $c;
   $21 = $idx;
   $22 = (($21) + 1)|0;
   $idx = $22;
   $23 = $1;
   $24 = (($23) + ($21)|0);
   HEAP8[$24>>0] = $20;
  } else {
   $31 = $idx;
   $32 = $2;
   $33 = (($32) - 4)|0;
   $34 = ($31|0)<($33|0);
   if (!($34)) {
    label = 12;
    break;
   }
   $35 = $1;
   $36 = $idx;
   $37 = (($35) + ($36)|0);
   $38 = $c;
   $39 = $38&255;
   HEAP32[$vararg_buffer>>2] = $39;
   $40 = (_sprintf($37,2080,$vararg_buffer)|0);
   $41 = $idx;
   $42 = (($41) + ($40))|0;
   $idx = $42;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 if ((label|0) == 6) {
  $25 = $idx;
  $26 = ($25|0)>(0);
  if ($26) {
   $27 = $idx;
   $28 = (($27) - 1)|0;
   $29 = $1;
   $30 = (($29) + ($28)|0);
   HEAP8[$30>>0] = 0;
  }
  $0 = -3;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 12) {
  $43 = $idx;
  $44 = ($43|0)>(0);
  if ($44) {
   $45 = $idx;
   $46 = (($45) - 1)|0;
   $47 = $1;
   $48 = (($47) + ($46)|0);
   HEAP8[$48>>0] = 0;
  }
  $0 = -3;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 18) {
  $51 = $idx;
  $52 = $1;
  $53 = (($52) + ($51)|0);
  HEAP8[$53>>0] = 0;
  $54 = $idx;
  $0 = $54;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _pn_quote($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capacity = 0, $err = 0, $ssize = 0, $str = 0, $str_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dst;
 $2 = $src;
 $3 = $size;
 while(1) {
  $4 = $1;
  $5 = (_pn_string_size($4)|0);
  $str_size = $5;
  $6 = $1;
  $7 = (_pn_string_buffer($6)|0);
  $8 = $str_size;
  $9 = (($7) + ($8)|0);
  $str = $9;
  $10 = $1;
  $11 = (_pn_string_capacity($10)|0);
  $12 = $str_size;
  $13 = (($11) - ($12))|0;
  $capacity = $13;
  $14 = $str;
  $15 = $capacity;
  $16 = $2;
  $17 = $3;
  $18 = (_pn_quote_data($14,$15,$16,$17)|0);
  $ssize = $18;
  $19 = $ssize;
  $20 = ($19|0)==(-3);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = $str_size;
  $23 = $capacity;
  $24 = (($22) + ($23))|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $str_size;
   $27 = $capacity;
   $28 = (($26) + ($27))|0;
   $29 = $28<<1;
   $30 = $29;
  } else {
   $30 = 16;
  }
  $31 = (_pn_string_grow($21,$30)|0);
  $err = $31;
  $32 = $err;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $34 = $err;
  $0 = $34;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $35 = $ssize;
 $36 = ($35|0)>=(0);
 if ($36) {
  $37 = $1;
  $38 = $str_size;
  $39 = $ssize;
  $40 = (($38) + ($39))|0;
  $41 = (_pn_string_resize($37,$40)|0);
  $0 = $41;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 } else {
  $42 = $ssize;
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _pn_strcasecmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 while(1) {
  $3 = $2;
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $1;
  $7 = (($6) + 1|0);
  $1 = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_tolower($9)|0);
  $11 = $2;
  $12 = (($11) + 1|0);
  $2 = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_tolower($14)|0);
  $16 = (($10) - ($15))|0;
  $diff = $16;
  $17 = $diff;
  $18 = ($17|0)!=(0);
  if ($18) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $19 = $diff;
  $0 = $19;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $20 = $1;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _pn_strncasecmp($a,$b,$len) {
 $a = $a|0;
 $b = $b|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $len;
 $diff = 0;
 while(1) {
  $4 = $2;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $3;
   $9 = ($8>>>0)>(0);
   $34 = $9;
  } else {
   $34 = 0;
  }
  if (!($34)) {
   break;
  }
  $10 = $1;
  $11 = (($10) + 1|0);
  $1 = $11;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (_tolower($13)|0);
  $15 = $2;
  $16 = (($15) + 1|0);
  $2 = $16;
  $17 = HEAP8[$15>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = (_tolower($18)|0);
  $20 = (($14) - ($19))|0;
  $diff = $20;
  $21 = $diff;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 6;
   break;
  }
  $24 = $3;
  $25 = (($24) + -1)|0;
  $3 = $25;
 }
 if ((label|0) == 6) {
  $23 = $diff;
  $0 = $23;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $26 = $3;
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = $diff;
  $32 = $28;
 } else {
  $29 = $1;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = $31;
 }
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _pn_env_bool($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_getenv(($1|0))|0);
 $v = $2;
 $3 = $v;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $18 = 0;
  STACKTOP = sp;return ($18|0);
 }
 $5 = $v;
 $6 = (_pn_strcasecmp($5,2088)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $v;
  $9 = (_pn_strcasecmp($8,2096)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $v;
   $12 = (_pn_strcasecmp($11,2104)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $v;
    $15 = (_pn_strcasecmp($14,2112)|0);
    $16 = ($15|0)!=(0);
    $17 = $16 ^ 1;
    $19 = $17;
   } else {
    $19 = 1;
   }
  } else {
   $19 = 1;
  }
 } else {
  $19 = 1;
 }
 $18 = $19;
 STACKTOP = sp;return ($18|0);
}
function _pn_strdup($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $src;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = $1;
   $5 = (_strlen(($4|0))|0);
   $6 = (($5) + 1)|0;
   $7 = $6;
   $8 = (_malloc($7)|0);
   $dest = $8;
   $9 = $dest;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $dest;
    $12 = $1;
    $13 = (_strcpy(($11|0),($12|0))|0);
    $0 = $13;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_strndup($src,$n) {
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $dest = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $src;
 $2 = $n;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $size = 0;
 $5 = $1;
 $c = $5;
 while(1) {
  $6 = $size;
  $7 = $2;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $c;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $size;
  $14 = (($13) + 1)|0;
  $size = $14;
  $15 = $c;
  $16 = (($15) + 1|0);
  $c = $16;
 }
 $17 = $size;
 $18 = (($17) + 1)|0;
 $19 = (_malloc($18)|0);
 $dest = $19;
 $20 = $dest;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $dest;
  $23 = $1;
  $24 = $2;
  (_strncpy(($22|0),($23|0),($24|0))|0);
  $25 = $size;
  $26 = $dest;
  $27 = (($26) + ($25)|0);
  HEAP8[$27>>0] = 0;
  $28 = $dest;
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _pn_timestamp_min($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = $6;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $3;
 $15 = $5;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)!=(0);
 $22 = ($20|0)!=(0);
 $23 = $21 | $22;
 if ($23) {
  $24 = $6;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)!=(0);
  $31 = ($29|0)!=(0);
  $32 = $30 | $31;
  if ($32) {
   $33 = $5;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = $6;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = ($38|0)>($44|0);
   $46 = ($35>>>0)>($41>>>0);
   $47 = ($38|0)==($44|0);
   $48 = $47 & $46;
   $49 = $45 | $48;
   if ($49) {
    $50 = $6;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($50) + 4)|0;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $64 = $52;$67 = $55;
   } else {
    $56 = $5;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = (($56) + 4)|0;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $64 = $58;$67 = $61;
   }
   $62 = $4;
   $63 = $62;
   HEAP32[$63>>2] = $64;
   $65 = (($62) + 4)|0;
   $66 = $65;
   HEAP32[$66>>2] = $67;
   $97 = $4;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + 4)|0;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   tempRet0 = $102;
   STACKTOP = sp;return ($99|0);
  }
 }
 $68 = $5;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70|0)!=(0);
 $75 = ($73|0)!=(0);
 $76 = $74 | $75;
 if ($76) {
  $77 = $5;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $4;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  $97 = $4;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  tempRet0 = $102;
  STACKTOP = sp;return ($99|0);
 } else {
  $87 = $6;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = $4;
  $94 = $93;
  HEAP32[$94>>2] = $89;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
  $97 = $4;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  tempRet0 = $102;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _pn_error() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_malloc(12)|0);
 $error = $0;
 $1 = $error;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $8 = $error;
  STACKTOP = sp;return ($8|0);
 }
 $3 = $error;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = $error;
 HEAP32[$5>>2] = 0;
 $6 = $error;
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $error;
 STACKTOP = sp;return ($8|0);
}
function _pn_error_free($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $error;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $0;
 _free($5);
 STACKTOP = sp;return;
}
function _pn_error_clear($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $error;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $0;
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return;
}
function _pn_error_set($error,$code,$text) {
 $error = $error|0;
 $code = $code|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $error;
 $1 = $code;
 $2 = $text;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((2120|0),(2128|0),66,(2184|0));
  // unreachable;
 }
 $5 = $0;
 _pn_error_clear($5);
 $6 = $1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $1;
 $9 = $0;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = (_pn_strdup($11)|0);
 $13 = $0;
 HEAP32[$13>>2] = $12;
 $14 = $1;
 STACKTOP = sp;return ($14|0);
}
function _pn_error_vformat($error,$code,$fmt,$ap) {
 $error = $error|0;
 $code = $code|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $text = sp + 24|0;
 $0 = $error;
 $1 = $code;
 $2 = $fmt;
 $3 = $ap;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((2120|0),(2128|0),77,(2200|0));
  // unreachable;
 }
 $6 = $2;
 $7 = $3;
 $8 = (_vsnprintf($text,1024,$6,$7)|0);
 $n = $8;
 $9 = $n;
 $10 = ($9|0)>=(1024);
 if ($10) {
  $11 = (($text) + 1023|0);
  HEAP8[$11>>0] = 0;
 }
 $12 = $0;
 $13 = $1;
 $14 = (_pn_error_set($12,$13,$text)|0);
 STACKTOP = sp;return ($14|0);
}
function _pn_error_format($error,$code,$fmt,$varargs) {
 $error = $error|0;
 $code = $code|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $rcode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 8|0;
 $0 = $error;
 $1 = $code;
 $2 = $fmt;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  HEAP32[$ap>>2] = $varargs;
  $5 = $0;
  $6 = $1;
  $7 = $2;
  $8 = (_pn_error_vformat($5,$6,$7,$ap)|0);
  $rcode = $8;
  $9 = $rcode;
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail((2120|0),(2128|0),88,(2224|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_error_text($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $error;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  ___assert_fail((2120|0),(2128|0),104,(2240|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_code($code) {
 $code = $code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $code;
 $2 = $1;
 do {
  switch ($2|0) {
  case -3:  {
   $0 = 2280;
   break;
  }
  case -1:  {
   $0 = 2264;
   break;
  }
  case -4:  {
   $0 = 2296;
   break;
  }
  case -8:  {
   $0 = 2360;
   break;
  }
  case -2:  {
   $0 = 2272;
   break;
  }
  case -5:  {
   $0 = 2312;
   break;
  }
  case 0:  {
   $0 = 2256;
   break;
  }
  case -6:  {
   $0 = 2328;
   break;
  }
  case -7:  {
   $0 = 2344;
   break;
  }
  default: {
   $0 = 2368;
  }
  }
 } while(0);
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _pn_buffer($capacity) {
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $capacity;
 $1 = (_malloc(16)|0);
 $buf = $1;
 $2 = $buf;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $23 = $buf;
  STACKTOP = sp;return ($23|0);
 }
 $4 = $0;
 $5 = $buf;
 HEAP32[$5>>2] = $4;
 $6 = $buf;
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $buf;
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = ($10>>>0)>(0);
 if ($11) {
  $12 = $0;
  $13 = (_malloc($12)|0);
  $14 = $buf;
  $15 = (($14) + 12|0);
  HEAP32[$15>>2] = $13;
  $16 = $buf;
  $17 = (($16) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $20 = $buf;
   _free($20);
   $buf = 0;
  }
 } else {
  $21 = $buf;
  $22 = (($21) + 12|0);
  HEAP32[$22>>2] = 0;
 }
 $23 = $buf;
 STACKTOP = sp;return ($23|0);
}
function _pn_buffer_free($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 _free($6);
 STACKTOP = sp;return;
}
function _pn_buffer_size($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_buffer_capacity($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _pn_buffer_available($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) - ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function _pn_buffer_head($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_buffer_tail($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6))|0;
 $tail = $7;
 $8 = $tail;
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>=($10>>>0);
 if (!($11)) {
  $16 = $tail;
  STACKTOP = sp;return ($16|0);
 }
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $tail;
 $15 = (($14) - ($13))|0;
 $tail = $15;
 $16 = $tail;
 STACKTOP = sp;return ($16|0);
}
function _pn_buffer_wrapped($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $5 = $0;
 $6 = (_pn_buffer_head($5)|0);
 $7 = $0;
 $8 = (_pn_buffer_tail($7)|0);
 $9 = ($6>>>0)>=($8>>>0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _pn_buffer_tail_space($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $1;
 $3 = (_pn_buffer_wrapped($2)|0);
 if ($3) {
  $4 = $1;
  $5 = (_pn_buffer_available($4)|0);
  $0 = $5;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = (_pn_buffer_tail($8)|0);
  $10 = (($7) - ($9))|0;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _pn_buffer_ensure($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $n = 0, $new_bytes = 0, $old_capacity = 0, $old_head = 0, $wrapped = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $size;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $old_capacity = $3;
 $4 = $0;
 $5 = (_pn_buffer_head($4)|0);
 $old_head = $5;
 $6 = $0;
 $7 = (_pn_buffer_wrapped($6)|0);
 $8 = $7&1;
 $wrapped = $8;
 while(1) {
  $9 = $0;
  $10 = (_pn_buffer_available($9)|0);
  $11 = $1;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = HEAP32[$16>>2]|0;
   $19 = $17;
  } else {
   $19 = 16;
  }
  $18 = $19<<1;
  $20 = $0;
  HEAP32[$20>>2] = $18;
 }
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 $23 = $old_capacity;
 $24 = ($22|0)!=($23|0);
 if (!($24)) {
  STACKTOP = sp;return 0;
 }
 $25 = $0;
 $26 = (($25) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_realloc($27,$29)|0);
 $new_bytes = $30;
 $31 = $new_bytes;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $new_bytes;
  $34 = $0;
  $35 = (($34) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $wrapped;
  $37 = $36&1;
  if ($37) {
   $38 = $old_capacity;
   $39 = $old_head;
   $40 = (($38) - ($39))|0;
   $n = $40;
   $41 = $0;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $0;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + ($45)|0);
   $47 = $n;
   $48 = (0 - ($47))|0;
   $49 = (($46) + ($48)|0);
   $50 = $0;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $old_head;
   $54 = (($52) + ($53)|0);
   $55 = $n;
   _memmove(($49|0),($54|0),($55|0))|0;
   $56 = $0;
   $57 = HEAP32[$56>>2]|0;
   $58 = $n;
   $59 = (($57) - ($58))|0;
   $60 = $0;
   $61 = (($60) + 4|0);
   HEAP32[$61>>2] = $59;
  }
 }
 STACKTOP = sp;return 0;
}
function _pn_buffer_append($buf,$bytes,$size) {
 $buf = $buf|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $err = 0, $n = 0, $tail = 0, $tail_space = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $bytes;
 $3 = $size;
 $4 = $1;
 $5 = $3;
 $6 = (_pn_buffer_ensure($4,$5)|0);
 $err = $6;
 $7 = $err;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $err;
  $0 = $9;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $10 = $1;
 $11 = (_pn_buffer_tail($10)|0);
 $tail = $11;
 $12 = $1;
 $13 = (_pn_buffer_tail_space($12)|0);
 $tail_space = $13;
 $14 = $tail_space;
 $15 = $3;
 $16 = ($14>>>0)>($15>>>0);
 if ($16) {
  $17 = $3;
  $19 = $17;
 } else {
  $18 = $tail_space;
  $19 = $18;
 }
 $n = $19;
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $tail;
 $24 = (($22) + ($23)|0);
 $25 = $2;
 $26 = $n;
 _memmove(($24|0),($25|0),($26|0))|0;
 $27 = $1;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $2;
 $31 = $n;
 $32 = (($30) + ($31)|0);
 $33 = $3;
 $34 = $n;
 $35 = (($33) - ($34))|0;
 _memmove(($29|0),($32|0),($35|0))|0;
 $36 = $3;
 $37 = $1;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36))|0;
 HEAP32[$38>>2] = $40;
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _pn_buffer_index($buf,$index) {
 $buf = $buf|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $index;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $result = $6;
 $7 = $result;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>=($9>>>0);
 if (!($10)) {
  $15 = $result;
  STACKTOP = sp;return ($15|0);
 }
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $result;
 $14 = (($13) - ($12))|0;
 $result = $14;
 $15 = $result;
 STACKTOP = sp;return ($15|0);
}
function _pn_buffer_get($buf,$offset,$size,$dst) {
 $buf = $buf|0;
 $offset = $offset|0;
 $size = $size|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, $stop = 0, $sz1 = 0, $sz2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $offset;
 $3 = $size;
 $4 = $dst;
 $5 = $3;
 $6 = $1;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>($8>>>0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 } else {
  $13 = $3;
  $14 = $13;
 }
 $3 = $14;
 $15 = $1;
 $16 = $2;
 $17 = (_pn_buffer_index($15,$16)|0);
 $start = $17;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = (($19) + ($20))|0;
 $22 = (_pn_buffer_index($18,$21)|0);
 $stop = $22;
 $23 = $3;
 $24 = ($23|0)==(0);
 if ($24) {
  $0 = 0;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $25 = $start;
 $26 = $stop;
 $27 = ($25>>>0)>=($26>>>0);
 if ($27) {
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = $start;
  $31 = (($29) - ($30))|0;
  $sz1 = $31;
  $32 = $stop;
  $sz2 = $32;
 } else {
  $33 = $stop;
  $34 = $start;
  $35 = (($33) - ($34))|0;
  $sz1 = $35;
  $sz2 = 0;
 }
 $36 = $4;
 $37 = $1;
 $38 = (($37) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $start;
 $41 = (($39) + ($40)|0);
 $42 = $sz1;
 _memmove(($36|0),($41|0),($42|0))|0;
 $43 = $4;
 $44 = $sz1;
 $45 = (($43) + ($44)|0);
 $46 = $1;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $sz2;
 _memmove(($45|0),($48|0),($49|0))|0;
 $50 = $sz1;
 $51 = $sz2;
 $52 = (($50) + ($51))|0;
 $0 = $52;
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function _pn_buffer_trim($buf,$left,$right) {
 $buf = $buf|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $left;
 $3 = $right;
 $4 = $2;
 $5 = $3;
 $6 = (($4) + ($5))|0;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)>($9>>>0);
 if ($10) {
  $0 = -6;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $11 = $2;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11))|0;
 HEAP32[$13>>2] = $15;
 $16 = $1;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18>>>0)>=($20>>>0);
 if ($21) {
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) - ($23))|0;
  HEAP32[$25>>2] = $27;
 }
 $28 = $2;
 $29 = $3;
 $30 = (($28) + ($29))|0;
 $31 = $1;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - ($30))|0;
 HEAP32[$32>>2] = $34;
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _pn_buffer_clear($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _pn_buffer_defrag($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _pn_buffer_rotate($1,$4);
 $5 = $0;
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return 0;
}
function _pn_buffer_bytes($agg$result,$buf) {
 $agg$result = $agg$result|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  (_pn_buffer_defrag($3)|0);
  $4 = $0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  _pn_bytes($agg$result,$6,$9);
  STACKTOP = sp;return;
 } else {
  _pn_bytes($agg$result,0,0);
  STACKTOP = sp;return;
 }
}
function _pn_buffer_memory($agg$result,$buf) {
 $agg$result = $agg$result|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $r1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 8|0;
 $r1 = sp;
 $0 = $buf;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  (_pn_buffer_defrag($3)|0);
  $4 = $0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$r>>2] = $6;
  $7 = (($r) + 4|0);
  $8 = $0;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$7>>2] = $10;
  ;HEAP32[$agg$result+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$r1+0>>2]=0|0;HEAP32[$r1+4>>2]=0|0;
  ;HEAP32[$agg$result+0>>2]=HEAP32[$r1+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r1+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _pn_parser_free($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $parser;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 _pn_scanner_free($4);
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $0;
 _free($8);
 STACKTOP = sp;return;
}
function _pn_scanner_free($scanner) {
 $scanner = $scanner|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $scanner;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 _pn_error_free($5);
 $6 = $0;
 _free($6);
 STACKTOP = sp;return;
}
function _pn_bytes($agg$result,$size,$start) {
 $agg$result = $agg$result|0;
 $size = $size|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes = sp;
 $0 = $size;
 $1 = $start;
 $2 = $0;
 HEAP32[$bytes>>2] = $2;
 $3 = (($bytes) + 4|0);
 $4 = $1;
 HEAP32[$3>>2] = $4;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$bytes+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$bytes+4>>2]|0;
 STACKTOP = sp;return;
}
function _pn_read_frame($frame,$bytes,$available) {
 $frame = $frame|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $doff = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $frame;
 $2 = $bytes;
 $3 = $available;
 $4 = $3;
 $5 = ($4>>>0)>=(8);
 do {
  if ($5) {
   $6 = $2;
   $7 = (_pn_i_read32($6)|0);
   $size = $7;
   $8 = $3;
   $9 = $size;
   $10 = ($8>>>0)>=($9>>>0);
   if (!($10)) {
    break;
   }
   $11 = $2;
   $12 = (($11) + 4|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = $14<<2;
   $doff = $15;
   $16 = $size;
   $17 = $doff;
   $18 = (($16) - ($17))|0;
   $19 = $1;
   $20 = (($19) + 12|0);
   HEAP32[$20>>2] = $18;
   $21 = $doff;
   $22 = (($21) - 8)|0;
   $23 = $1;
   $24 = (($23) + 4|0);
   HEAP32[$24>>2] = $22;
   $25 = $2;
   $26 = (($25) + 5|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $1;
   HEAP8[$28>>0] = $27;
   $29 = $2;
   $30 = (($29) + 6|0);
   $31 = (_pn_i_read16($30)|0);
   $32 = $1;
   $33 = (($32) + 2|0);
   HEAP16[$33>>1] = $31;
   $34 = $2;
   $35 = (($34) + 8|0);
   $36 = $1;
   $37 = (($36) + 8|0);
   HEAP32[$37>>2] = $35;
   $38 = $2;
   $39 = $doff;
   $40 = (($38) + ($39)|0);
   $41 = $1;
   $42 = (($41) + 16|0);
   HEAP32[$42>>2] = $40;
   $43 = $size;
   $0 = $43;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  }
 } while(0);
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _pn_write_frame($bytes,$available,$frame) {
 $bytes = $bytes|0;
 $available = $available|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $doff = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $bytes;
 $2 = $available;
 $3 = (($frame) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (8 + ($4))|0;
 $6 = (($frame) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7))|0;
 $size = $8;
 $9 = $size;
 $10 = $2;
 $11 = ($9>>>0)<=($10>>>0);
 if ($11) {
  $12 = $1;
  $13 = $size;
  _pn_i_write32($12,$13);
  $14 = (($frame) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 8)|0;
  $17 = (($16) - 1)|0;
  $18 = (($17>>>0) / 4)&-1;
  $19 = (($18) + 1)|0;
  $doff = $19;
  $20 = $doff;
  $21 = $20&255;
  $22 = $1;
  $23 = (($22) + 4|0);
  HEAP8[$23>>0] = $21;
  $24 = HEAP8[$frame>>0]|0;
  $25 = $1;
  $26 = (($25) + 5|0);
  HEAP8[$26>>0] = $24;
  $27 = $1;
  $28 = (($27) + 6|0);
  $29 = (($frame) + 2|0);
  $30 = HEAP16[$29>>1]|0;
  _pn_i_write16($28,$30);
  $31 = $1;
  $32 = (($31) + 8|0);
  $33 = (($frame) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($frame) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  _memmove(($32|0),($34|0),($36|0))|0;
  $37 = $1;
  $38 = $doff;
  $39 = $38<<2;
  $40 = (($37) + ($39)|0);
  $41 = (($frame) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($frame) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  _memmove(($40|0),($42|0),($44|0))|0;
  $45 = $size;
  $0 = $45;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _pn_type_name($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 do {
  switch ($2|0) {
  case 6:  {
   $0 = 4608;
   break;
  }
  case 11:  {
   $0 = 4664;
   break;
  }
  case 13:  {
   $0 = 4688;
   break;
  }
  case 1:  {
   $0 = 4552;
   break;
  }
  case 5:  {
   $0 = 4592;
   break;
  }
  case 21:  {
   $0 = 4808;
   break;
  }
  case 22:  {
   $0 = 4824;
   break;
  }
  case 9:  {
   $0 = 4640;
   break;
  }
  case 17:  {
   $0 = 4752;
   break;
  }
  case 18:  {
   $0 = 4768;
   break;
  }
  case 25:  {
   $0 = 4864;
   break;
  }
  case 7:  {
   $0 = 4624;
   break;
  }
  case 15:  {
   $0 = 4720;
   break;
  }
  case 2:  {
   $0 = 4560;
   break;
  }
  case 3:  {
   $0 = 4568;
   break;
  }
  case 14:  {
   $0 = 4704;
   break;
  }
  case 16:  {
   $0 = 4736;
   break;
  }
  case 23:  {
   $0 = 4840;
   break;
  }
  case 24:  {
   $0 = 4856;
   break;
  }
  case 19:  {
   $0 = 4776;
   break;
  }
  case 20:  {
   $0 = 4792;
   break;
  }
  case 4:  {
   $0 = 4584;
   break;
  }
  case 8:  {
   $0 = 4632;
   break;
  }
  case 12:  {
   $0 = 4672;
   break;
  }
  case 10:  {
   $0 = 4648;
   break;
  }
  default: {
   $0 = 4872;
  }
  }
 } while(0);
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _pni_inspect_atom($atom,$str) {
 $atom = $atom|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0;
 var $99 = 0.0, $bin = 0, $err = 0, $i = 0, $pfx = 0, $quote = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer44 = 0, $vararg_buffer5 = 0, $vararg_buffer62 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0;
 var $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr74 = 0, $vararg_ptr75 = 0, $vararg_ptr76 = 0, $vararg_ptr77 = 0;
 var $vararg_ptr78 = 0, $vararg_ptr79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer95 = sp + 312|0;
 $vararg_buffer93 = sp + 304|0;
 $vararg_buffer91 = sp + 296|0;
 $vararg_buffer89 = sp + 288|0;
 $vararg_buffer87 = sp + 280|0;
 $vararg_buffer85 = sp + 272|0;
 $vararg_buffer83 = sp + 264|0;
 $vararg_buffer80 = sp + 256|0;
 $vararg_buffer62 = sp + 192|0;
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $bin = sp + 320|0;
 $1 = $atom;
 $2 = $str;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 do {
  switch ($4|0) {
  case 1:  {
   $5 = $2;
   $6 = (_pn_string_addf($5,4888,$vararg_buffer)|0);
   $0 = $6;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 5:  {
   $26 = $2;
   $27 = $1;
   $28 = (($27) + 8|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29&65535;
   HEAP32[$vararg_buffer8>>2] = $30;
   $31 = (_pn_string_addf($26,4912,$vararg_buffer8)|0);
   $0 = $31;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 6:  {
   $32 = $2;
   $33 = $1;
   $34 = (($33) + 8|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   HEAP32[$vararg_buffer11>>2] = $36;
   $37 = (_pn_string_addf($32,4920,$vararg_buffer11)|0);
   $0 = $37;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 3:  {
   $14 = $2;
   $15 = $1;
   $16 = (($15) + 8|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   HEAP32[$vararg_buffer3>>2] = $18;
   $19 = (_pn_string_addf($14,4912,$vararg_buffer3)|0);
   $0 = $19;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 2:  {
   $7 = $2;
   $8 = $1;
   $9 = (($8) + 8|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   $12 = $11 ? 4896 : 4904;
   $13 = (_pn_string_addf($7,$12,$vararg_buffer1)|0);
   $0 = $13;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 8:  {
   $43 = $2;
   $44 = $1;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $46;
   $47 = (_pn_string_addf($43,4920,$vararg_buffer17)|0);
   $0 = $47;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 9:  {
   $48 = $2;
   $49 = $1;
   $50 = (($49) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   HEAP32[$vararg_buffer20>>2] = $51;
   $52 = (_pn_string_addf($48,4928,$vararg_buffer20)|0);
   $0 = $52;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 10:  {
   $53 = $2;
   $54 = $1;
   $55 = (($54) + 8|0);
   $56 = $55;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = $vararg_buffer23;
   $63 = $62;
   HEAP32[$63>>2] = $58;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP32[$65>>2] = $61;
   $66 = (_pn_string_addf($53,4936,$vararg_buffer23)|0);
   $0 = $66;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 4:  {
   $20 = $2;
   $21 = $1;
   $22 = (($21) + 8|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   HEAP32[$vararg_buffer5>>2] = $24;
   $25 = (_pn_string_addf($20,4920,$vararg_buffer5)|0);
   $0 = $25;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 7:  {
   $38 = $2;
   $39 = $1;
   $40 = (($39) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$vararg_buffer14>>2] = $41;
   $42 = (_pn_string_addf($38,4912,$vararg_buffer14)|0);
   $0 = $42;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 16:  {
   $111 = $2;
   $112 = $1;
   $113 = (($112) + 8|0);
   $114 = $113;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($114) + 4)|0;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = $vararg_buffer41;
   $121 = $120;
   HEAP32[$121>>2] = $116;
   $122 = (($120) + 4)|0;
   $123 = $122;
   HEAP32[$123>>2] = $119;
   $124 = (_pn_string_addf($111,4968,$vararg_buffer41)|0);
   $0 = $124;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 11:  {
   $67 = $2;
   $68 = $1;
   $69 = (($68) + 8|0);
   $70 = $69;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $vararg_buffer26;
   $77 = $76;
   HEAP32[$77>>2] = $72;
   $78 = (($76) + 4)|0;
   $79 = $78;
   HEAP32[$79>>2] = $75;
   $80 = (_pn_string_addf($67,4944,$vararg_buffer26)|0);
   $0 = $80;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 12:  {
   $81 = $2;
   $82 = $1;
   $83 = (($82) + 8|0);
   $84 = $83;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) + 4)|0;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = $vararg_buffer29;
   $91 = $90;
   HEAP32[$91>>2] = $86;
   $92 = (($90) + 4)|0;
   $93 = $92;
   HEAP32[$93>>2] = $89;
   $94 = (_pn_string_addf($81,4944,$vararg_buffer29)|0);
   $0 = $94;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 13:  {
   $95 = $2;
   $96 = $1;
   $97 = (($96) + 8|0);
   $98 = +HEAPF32[$97>>2];
   $99 = $98;
   HEAPF64[tempDoublePtr>>3]=$99;HEAP32[$vararg_buffer32>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer32+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $100 = (_pn_string_addf($95,4952,$vararg_buffer32)|0);
   $0 = $100;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 14:  {
   $101 = $2;
   $102 = $1;
   $103 = (($102) + 8|0);
   $104 = +HEAPF64[$103>>3];
   HEAPF64[tempDoublePtr>>3]=$104;HEAP32[$vararg_buffer35>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer35+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $105 = (_pn_string_addf($101,4952,$vararg_buffer35)|0);
   $0 = $105;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 15:  {
   $106 = $2;
   $107 = $1;
   $108 = (($107) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP32[$vararg_buffer38>>2] = $109;
   $110 = (_pn_string_addf($106,4960,$vararg_buffer38)|0);
   $0 = $110;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 17:  {
   $125 = $2;
   $126 = $1;
   $127 = (($126) + 8|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128 << 24 >> 24;
   $130 = $1;
   $131 = (($130) + 8|0);
   $132 = (($131) + 1|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = $1;
   $136 = (($135) + 8|0);
   $137 = (($136) + 2|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138 << 24 >> 24;
   $140 = $1;
   $141 = (($140) + 8|0);
   $142 = (($141) + 3|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = $1;
   $146 = (($145) + 8|0);
   $147 = (($146) + 4|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148 << 24 >> 24;
   $150 = $1;
   $151 = (($150) + 8|0);
   $152 = (($151) + 5|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153 << 24 >> 24;
   $155 = $1;
   $156 = (($155) + 8|0);
   $157 = (($156) + 6|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158 << 24 >> 24;
   $160 = $1;
   $161 = (($160) + 8|0);
   $162 = (($161) + 7|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = $1;
   $166 = (($165) + 8|0);
   $167 = (($166) + 8|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168 << 24 >> 24;
   $170 = $1;
   $171 = (($170) + 8|0);
   $172 = (($171) + 9|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173 << 24 >> 24;
   $175 = $1;
   $176 = (($175) + 8|0);
   $177 = (($176) + 10|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178 << 24 >> 24;
   $180 = $1;
   $181 = (($180) + 8|0);
   $182 = (($181) + 11|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183 << 24 >> 24;
   $185 = $1;
   $186 = (($185) + 8|0);
   $187 = (($186) + 12|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188 << 24 >> 24;
   $190 = $1;
   $191 = (($190) + 8|0);
   $192 = (($191) + 13|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 << 24 >> 24;
   $195 = $1;
   $196 = (($195) + 8|0);
   $197 = (($196) + 14|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198 << 24 >> 24;
   $200 = $1;
   $201 = (($200) + 8|0);
   $202 = (($201) + 15|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203 << 24 >> 24;
   HEAP32[$vararg_buffer44>>2] = $129;
   $vararg_ptr47 = (($vararg_buffer44) + 4|0);
   HEAP32[$vararg_ptr47>>2] = $134;
   $vararg_ptr48 = (($vararg_buffer44) + 8|0);
   HEAP32[$vararg_ptr48>>2] = $139;
   $vararg_ptr49 = (($vararg_buffer44) + 12|0);
   HEAP32[$vararg_ptr49>>2] = $144;
   $vararg_ptr50 = (($vararg_buffer44) + 16|0);
   HEAP32[$vararg_ptr50>>2] = $149;
   $vararg_ptr51 = (($vararg_buffer44) + 20|0);
   HEAP32[$vararg_ptr51>>2] = $154;
   $vararg_ptr52 = (($vararg_buffer44) + 24|0);
   HEAP32[$vararg_ptr52>>2] = $159;
   $vararg_ptr53 = (($vararg_buffer44) + 28|0);
   HEAP32[$vararg_ptr53>>2] = $164;
   $vararg_ptr54 = (($vararg_buffer44) + 32|0);
   HEAP32[$vararg_ptr54>>2] = $169;
   $vararg_ptr55 = (($vararg_buffer44) + 36|0);
   HEAP32[$vararg_ptr55>>2] = $174;
   $vararg_ptr56 = (($vararg_buffer44) + 40|0);
   HEAP32[$vararg_ptr56>>2] = $179;
   $vararg_ptr57 = (($vararg_buffer44) + 44|0);
   HEAP32[$vararg_ptr57>>2] = $184;
   $vararg_ptr58 = (($vararg_buffer44) + 48|0);
   HEAP32[$vararg_ptr58>>2] = $189;
   $vararg_ptr59 = (($vararg_buffer44) + 52|0);
   HEAP32[$vararg_ptr59>>2] = $194;
   $vararg_ptr60 = (($vararg_buffer44) + 56|0);
   HEAP32[$vararg_ptr60>>2] = $199;
   $vararg_ptr61 = (($vararg_buffer44) + 60|0);
   HEAP32[$vararg_ptr61>>2] = $204;
   $205 = (_pn_string_addf($125,4984,$vararg_buffer44)|0);
   $0 = $205;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 21: case 20: case 19:  {
   $287 = $1;
   $288 = (($287) + 8|0);
   ;HEAP32[$bin+0>>2]=HEAP32[$288+0>>2]|0;HEAP32[$bin+4>>2]=HEAP32[$288+4>>2]|0;
   $289 = $1;
   $290 = HEAP32[$289>>2]|0;
   if ((($290|0) == 19)) {
    $pfx = 5200;
    $quote = 1;
   } else if ((($290|0) == 20)) {
    $pfx = 5208;
    $quote = 1;
   } else if ((($290|0) == 21)) {
    $pfx = 5216;
    $quote = 0;
    $i = 0;
    while(1) {
     $291 = $i;
     $292 = HEAP32[$bin>>2]|0;
     $293 = ($291>>>0)<($292>>>0);
     if (!($293)) {
      break;
     }
     $294 = $i;
     $295 = (($bin) + 4|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = (($296) + ($294)|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = $298 << 24 >> 24;
     $300 = (_isalpha($299)|0);
     $301 = ($300|0)!=(0);
     if (!($301)) {
      label = 26;
      break;
     }
     $302 = $i;
     $303 = (($302) + 1)|0;
     $i = $303;
    }
    if ((label|0) == 26) {
     $quote = 1;
    }
   } else {
    ___assert_fail((4904|0),(5224|0),227,(5288|0));
    // unreachable;
   }
   $304 = $2;
   $305 = $pfx;
   HEAP32[$vararg_buffer80>>2] = $305;
   $306 = (_pn_string_addf($304,5312,$vararg_buffer80)|0);
   $err = $306;
   $307 = ($306|0)!=(0);
   if ($307) {
    $308 = $err;
    $0 = $308;
    $340 = $0;
    STACKTOP = sp;return ($340|0);
   }
   $309 = $quote;
   $310 = $309&1;
   do {
    if ($310) {
     $311 = $2;
     $312 = (_pn_string_addf($311,5320,$vararg_buffer83)|0);
     $err = $312;
     $313 = ($312|0)!=(0);
     if (!($313)) {
      break;
     }
     $314 = $err;
     $0 = $314;
     $340 = $0;
     STACKTOP = sp;return ($340|0);
    }
   } while(0);
   $315 = $2;
   $316 = (($bin) + 4|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = HEAP32[$bin>>2]|0;
   $319 = (_pn_quote($315,$317,$318)|0);
   $err = $319;
   $320 = ($319|0)!=(0);
   if ($320) {
    $321 = $err;
    $0 = $321;
    $340 = $0;
    STACKTOP = sp;return ($340|0);
   }
   $322 = $quote;
   $323 = $322&1;
   do {
    if ($323) {
     $324 = $2;
     $325 = (_pn_string_addf($324,5320,$vararg_buffer85)|0);
     $err = $325;
     $326 = ($325|0)!=(0);
     if (!($326)) {
      break;
     }
     $327 = $err;
     $0 = $327;
     $340 = $0;
     STACKTOP = sp;return ($340|0);
    }
   } while(0);
   $0 = 0;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 18:  {
   $206 = $2;
   $207 = $1;
   $208 = (($207) + 8|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209 << 24 >> 24;
   $211 = $1;
   $212 = (($211) + 8|0);
   $213 = (($212) + 1|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214 << 24 >> 24;
   $216 = $1;
   $217 = (($216) + 8|0);
   $218 = (($217) + 2|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219 << 24 >> 24;
   $221 = $1;
   $222 = (($221) + 8|0);
   $223 = (($222) + 3|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224 << 24 >> 24;
   $226 = $1;
   $227 = (($226) + 8|0);
   $228 = (($227) + 4|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $229 << 24 >> 24;
   $231 = $1;
   $232 = (($231) + 8|0);
   $233 = (($232) + 5|0);
   $234 = HEAP8[$233>>0]|0;
   $235 = $234 << 24 >> 24;
   $236 = $1;
   $237 = (($236) + 8|0);
   $238 = (($237) + 6|0);
   $239 = HEAP8[$238>>0]|0;
   $240 = $239 << 24 >> 24;
   $241 = $1;
   $242 = (($241) + 8|0);
   $243 = (($242) + 7|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = $244 << 24 >> 24;
   $246 = $1;
   $247 = (($246) + 8|0);
   $248 = (($247) + 8|0);
   $249 = HEAP8[$248>>0]|0;
   $250 = $249 << 24 >> 24;
   $251 = $1;
   $252 = (($251) + 8|0);
   $253 = (($252) + 9|0);
   $254 = HEAP8[$253>>0]|0;
   $255 = $254 << 24 >> 24;
   $256 = $1;
   $257 = (($256) + 8|0);
   $258 = (($257) + 10|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259 << 24 >> 24;
   $261 = $1;
   $262 = (($261) + 8|0);
   $263 = (($262) + 11|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = $264 << 24 >> 24;
   $266 = $1;
   $267 = (($266) + 8|0);
   $268 = (($267) + 12|0);
   $269 = HEAP8[$268>>0]|0;
   $270 = $269 << 24 >> 24;
   $271 = $1;
   $272 = (($271) + 8|0);
   $273 = (($272) + 13|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274 << 24 >> 24;
   $276 = $1;
   $277 = (($276) + 8|0);
   $278 = (($277) + 14|0);
   $279 = HEAP8[$278>>0]|0;
   $280 = $279 << 24 >> 24;
   $281 = $1;
   $282 = (($281) + 8|0);
   $283 = (($282) + 15|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284 << 24 >> 24;
   HEAP32[$vararg_buffer62>>2] = $210;
   $vararg_ptr65 = (($vararg_buffer62) + 4|0);
   HEAP32[$vararg_ptr65>>2] = $215;
   $vararg_ptr66 = (($vararg_buffer62) + 8|0);
   HEAP32[$vararg_ptr66>>2] = $220;
   $vararg_ptr67 = (($vararg_buffer62) + 12|0);
   HEAP32[$vararg_ptr67>>2] = $225;
   $vararg_ptr68 = (($vararg_buffer62) + 16|0);
   HEAP32[$vararg_ptr68>>2] = $230;
   $vararg_ptr69 = (($vararg_buffer62) + 20|0);
   HEAP32[$vararg_ptr69>>2] = $235;
   $vararg_ptr70 = (($vararg_buffer62) + 24|0);
   HEAP32[$vararg_ptr70>>2] = $240;
   $vararg_ptr71 = (($vararg_buffer62) + 28|0);
   HEAP32[$vararg_ptr71>>2] = $245;
   $vararg_ptr72 = (($vararg_buffer62) + 32|0);
   HEAP32[$vararg_ptr72>>2] = $250;
   $vararg_ptr73 = (($vararg_buffer62) + 36|0);
   HEAP32[$vararg_ptr73>>2] = $255;
   $vararg_ptr74 = (($vararg_buffer62) + 40|0);
   HEAP32[$vararg_ptr74>>2] = $260;
   $vararg_ptr75 = (($vararg_buffer62) + 44|0);
   HEAP32[$vararg_ptr75>>2] = $265;
   $vararg_ptr76 = (($vararg_buffer62) + 48|0);
   HEAP32[$vararg_ptr76>>2] = $270;
   $vararg_ptr77 = (($vararg_buffer62) + 52|0);
   HEAP32[$vararg_ptr77>>2] = $275;
   $vararg_ptr78 = (($vararg_buffer62) + 56|0);
   HEAP32[$vararg_ptr78>>2] = $280;
   $vararg_ptr79 = (($vararg_buffer62) + 60|0);
   HEAP32[$vararg_ptr79>>2] = $285;
   $286 = (_pn_string_addf($206,5088,$vararg_buffer62)|0);
   $0 = $286;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 24:  {
   $328 = $2;
   $329 = (_pn_string_addf($328,5328,$vararg_buffer87)|0);
   $0 = $329;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 25:  {
   $330 = $2;
   $331 = (_pn_string_addf($330,5336,$vararg_buffer89)|0);
   $0 = $331;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 22:  {
   $334 = $2;
   $335 = (_pn_string_addf($334,5352,$vararg_buffer93)|0);
   $0 = $335;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  case 23:  {
   $332 = $2;
   $333 = (_pn_string_addf($332,5344,$vararg_buffer91)|0);
   $0 = $333;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
   break;
  }
  default: {
   $336 = $2;
   $337 = $1;
   $338 = HEAP32[$337>>2]|0;
   HEAP32[$vararg_buffer95>>2] = $338;
   $339 = (_pn_string_addf($336,5368,$vararg_buffer95)|0);
   $0 = $339;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _pni_inspect_enter($ctx,$data,$node) {
 $ctx = $ctx|0;
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom = 0, $err = 0, $fields = 0, $grandfields = 0, $grandparent = 0, $index = 0, $name = 0, $parent = 0, $str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $ctx;
 $2 = $data;
 $3 = $node;
 $4 = $1;
 $str = $4;
 $5 = $3;
 $6 = (($5) + 16|0);
 $atom = $6;
 $7 = $2;
 $8 = $3;
 $9 = (($8) + 50|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = (_pn_data_node($7,$10)|0);
 $parent = $11;
 $12 = $2;
 $13 = $parent;
 $14 = (_pni_node_fields($12,$13)|0);
 $fields = $14;
 $15 = $parent;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = $parent;
  $19 = (($18) + 50|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = (_pn_data_node($17,$20)|0);
  $22 = $21;
 } else {
  $22 = 0;
 }
 $grandparent = $22;
 $23 = $2;
 $24 = $grandparent;
 $25 = (_pni_node_fields($23,$24)|0);
 $grandfields = $25;
 $26 = $2;
 $27 = $3;
 $28 = (_pni_node_index($26,$27)|0);
 $index = $28;
 $29 = $grandfields;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $atom;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(1);
  if ($33) {
   $0 = 0;
   $107 = $0;
   STACKTOP = sp;return ($107|0);
  }
  $34 = $index;
  $35 = $grandfields;
  $36 = (($35) + 2|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ($34|0)<($38|0);
  if ($39) {
   $40 = HEAP32[3880>>2]|0;
   $41 = $grandfields;
   $42 = (($41) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $index;
   $46 = (($44) + ($45))|0;
   $47 = (3976 + ($46<<1)|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48&65535;
   $50 = (($40) + ($49)|0);
   $51 = $50;
  } else {
   $51 = 0;
  }
  $name = $51;
  $52 = $name;
  $53 = ($52|0)!=(0|0);
  do {
   if ($53) {
    $54 = $str;
    $55 = $name;
    HEAP32[$vararg_buffer>>2] = $55;
    $56 = (_pn_string_addf($54,5384,$vararg_buffer)|0);
    $err = $56;
    $57 = $err;
    $58 = ($57|0)!=(0);
    if (!($58)) {
     break;
    }
    $59 = $err;
    $0 = $59;
    $107 = $0;
    STACKTOP = sp;return ($107|0);
   }
  } while(0);
 }
 $60 = $atom;
 $61 = HEAP32[$60>>2]|0;
 if ((($61|0) == 22)) {
  $62 = $str;
  $63 = (_pn_string_addf($62,5392,$vararg_buffer1)|0);
  $0 = $63;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 } else if ((($61|0) == 23)) {
  $64 = $str;
  $65 = $3;
  $66 = (($65) + 40|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_pn_type_name($67)|0);
  HEAP32[$vararg_buffer3>>2] = $68;
  $69 = (_pn_string_addf($64,5400,$vararg_buffer3)|0);
  $0 = $69;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 } else if ((($61|0) == 24)) {
  $70 = $str;
  $71 = (_pn_string_addf($70,5408,$vararg_buffer6)|0);
  $0 = $71;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 } else if ((($61|0) == 25)) {
  $72 = $str;
  $73 = (_pn_string_addf($72,5416,$vararg_buffer8)|0);
  $0 = $73;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 } else {
  $74 = $fields;
  $75 = ($74|0)!=(0|0);
  if ($75) {
   $76 = $index;
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = $str;
    $79 = HEAP32[3880>>2]|0;
    $80 = $fields;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = (3888 + ($82<<1)|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84&65535;
    $86 = (($79) + ($85)|0);
    HEAP32[$vararg_buffer10>>2] = $86;
    $87 = (_pn_string_addf($78,5312,$vararg_buffer10)|0);
    $err = $87;
    $88 = $err;
    $89 = ($88|0)!=(0);
    if ($89) {
     $90 = $err;
     $0 = $90;
     $107 = $0;
     STACKTOP = sp;return ($107|0);
    }
    $91 = $str;
    $92 = (_pn_string_addf($91,5424,$vararg_buffer13)|0);
    $err = $92;
    $93 = $err;
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $err;
     $0 = $95;
     $107 = $0;
     STACKTOP = sp;return ($107|0);
    }
    $96 = $atom;
    $97 = $str;
    $98 = (_pni_inspect_atom($96,$97)|0);
    $err = $98;
    $99 = $err;
    $100 = ($99|0)!=(0);
    if ($100) {
     $101 = $err;
     $0 = $101;
     $107 = $0;
     STACKTOP = sp;return ($107|0);
    } else {
     $102 = $str;
     $103 = (_pn_string_addf($102,5432,$vararg_buffer15)|0);
     $0 = $103;
     $107 = $0;
     STACKTOP = sp;return ($107|0);
    }
   }
  }
  $104 = $atom;
  $105 = $str;
  $106 = (_pni_inspect_atom($104,$105)|0);
  $0 = $106;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _pni_next_nonnull($data,$node) {
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $node;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $1;
  $6 = $2;
  $7 = (($6) + 44|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (_pn_data_node($5,$8)|0);
  $2 = $9;
  $10 = $2;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $2;
   $13 = (($12) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(1);
   if ($15) {
    label = 5;
    break;
   }
  }
 }
 if ((label|0) == 5) {
  $16 = $2;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _pni_inspect_exit($ctx,$data,$node) {
 $ctx = $ctx|0;
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $err = 0, $grandfields = 0, $grandparent = 0, $index = 0, $next = 0, $parent = 0, $str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $ctx;
 $2 = $data;
 $3 = $node;
 $4 = $1;
 $str = $4;
 $5 = $2;
 $6 = $3;
 $7 = (($6) + 50|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (_pn_data_node($5,$8)|0);
 $parent = $9;
 $10 = $parent;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = $parent;
  $14 = (($13) + 50|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = (_pn_data_node($12,$15)|0);
  $17 = $16;
 } else {
  $17 = 0;
 }
 $grandparent = $17;
 $18 = $2;
 $19 = $grandparent;
 $20 = (_pni_node_fields($18,$19)|0);
 $grandfields = $20;
 $21 = $2;
 $22 = $3;
 $23 = (($22) + 44|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (_pn_data_node($21,$24)|0);
 $next = $25;
 $26 = $3;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 do {
  if ((($28|0) == 24) | (($28|0) == 23)) {
   $29 = $str;
   $30 = (_pn_string_addf($29,5440,$vararg_buffer)|0);
   $err = $30;
   $31 = $err;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    break;
   }
   $33 = $err;
   $0 = $33;
   $85 = $0;
   STACKTOP = sp;return ($85|0);
  } else if ((($28|0) == 25)) {
   $34 = $str;
   $35 = (_pn_string_addf($34,5448,$vararg_buffer1)|0);
   $err = $35;
   $36 = $err;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $err;
   $0 = $38;
   $85 = $0;
   STACKTOP = sp;return ($85|0);
  } else {
  }
 } while(0);
 $39 = $grandfields;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $3;
  $42 = (($41) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(1);
  if ($44) {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $45 = $next;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   $47 = $2;
   $48 = $3;
   $49 = (_pni_node_index($47,$48)|0);
   $index = $49;
   $50 = $parent;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $parent;
    $53 = (($52) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(25);
    if ($55) {
     $56 = $index;
     $57 = (($56|0) % 2)&-1;
     $58 = ($57|0)==(0);
     if ($58) {
      $59 = $str;
      $60 = (_pn_string_addf($59,5456,$vararg_buffer3)|0);
      $err = $60;
     } else {
      label = 19;
     }
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   if ((label|0) == 19) {
    $61 = $parent;
    $62 = ($61|0)!=(0|0);
    do {
     if ($62) {
      $63 = $parent;
      $64 = (($63) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(22);
      if ($66) {
       $67 = $index;
       $68 = ($67|0)==(0);
       if ($68) {
        $69 = $str;
        $70 = (_pn_string_addf($69,5464,$vararg_buffer5)|0);
        $err = $70;
        $71 = $err;
        $72 = ($71|0)!=(0);
        if (!($72)) {
         break;
        }
        $73 = $err;
        $0 = $73;
        $85 = $0;
        STACKTOP = sp;return ($85|0);
       } else {
        label = 25;
       }
      } else {
       label = 25;
      }
     } else {
      label = 25;
     }
    } while(0);
    if ((label|0) == 25) {
     $74 = $grandfields;
     $75 = ($74|0)!=(0|0);
     if ($75) {
      $76 = $2;
      $77 = $3;
      $78 = (_pni_next_nonnull($76,$77)|0);
      $79 = ($78|0)!=(0|0);
      if ($79) {
       label = 27;
      }
     } else {
      label = 27;
     }
     do {
      if ((label|0) == 27) {
       $80 = $str;
       $81 = (_pn_string_addf($80,5472,$vararg_buffer7)|0);
       $err = $81;
       $82 = $err;
       $83 = ($82|0)!=(0);
       if (!($83)) {
        break;
       }
       $84 = $err;
       $0 = $84;
       $85 = $0;
       STACKTOP = sp;return ($85|0);
      }
     } while(0);
    }
   }
  }
 }
 $0 = 0;
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function _pn_data($capacity) {
 $capacity = $capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $capacity;
 $1 = (_pn_class_new(5480,36)|0);
 $data = $1;
 $2 = $0;
 $3 = $2&65535;
 $4 = $data;
 $5 = (($4) + 24|0);
 HEAP16[$5>>1] = $3;
 $6 = $data;
 $7 = (($6) + 26|0);
 HEAP16[$7>>1] = 0;
 $8 = $0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $0;
  $11 = $10<<6;
  $12 = (_malloc($11)|0);
  $14 = $12;
 } else {
  $14 = 0;
 }
 $13 = $data;
 HEAP32[$13>>2] = $14;
 $15 = (_pn_buffer(64)|0);
 $16 = $data;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $data;
 $19 = (($18) + 28|0);
 HEAP16[$19>>1] = 0;
 $20 = $data;
 $21 = (($20) + 30|0);
 HEAP16[$21>>1] = 0;
 $22 = $data;
 $23 = (($22) + 32|0);
 HEAP16[$23>>1] = 0;
 $24 = $data;
 $25 = (($24) + 34|0);
 HEAP16[$25>>1] = 0;
 $26 = (_pn_decoder()|0);
 $27 = $data;
 $28 = (($27) + 8|0);
 HEAP32[$28>>2] = $26;
 $29 = (_pn_encoder()|0);
 $30 = $data;
 $31 = (($30) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = (_pn_error()|0);
 $33 = $data;
 $34 = (($33) + 16|0);
 HEAP32[$34>>2] = $32;
 $35 = (_pn_string(0)|0);
 $36 = $data;
 $37 = (($36) + 20|0);
 HEAP32[$37>>2] = $35;
 $38 = $data;
 STACKTOP = sp;return ($38|0);
}
function _pn_data_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 _pn_free($1);
 STACKTOP = sp;return;
}
function _pn_data_error($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_data_size($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 26|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $6;
 } else {
  $7 = 0;
 }
 STACKTOP = sp;return ($7|0);
}
function _pn_data_clear($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 26|0);
 HEAP16[$4>>1] = 0;
 $5 = $0;
 $6 = (($5) + 28|0);
 HEAP16[$6>>1] = 0;
 $7 = $0;
 $8 = (($7) + 30|0);
 HEAP16[$8>>1] = 0;
 $9 = $0;
 $10 = (($9) + 32|0);
 HEAP16[$10>>1] = 0;
 $11 = $0;
 $12 = (($11) + 34|0);
 HEAP16[$12>>1] = 0;
 $13 = $0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 _pn_buffer_clear($15);
 STACKTOP = sp;return;
}
function _pn_data_grow($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 24|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $11 = $9;
 } else {
  $11 = 2;
 }
 $10 = $11<<1;
 $12 = $10&65535;
 $13 = $0;
 $14 = (($13) + 24|0);
 HEAP16[$14>>1] = $12;
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 24|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = $20<<6;
 $22 = (_realloc($16,$21)|0);
 $23 = $0;
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return 0;
}
function _pn_data_intern($data,$start,$size) {
 $data = $data|0;
 $start = $start|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $start;
 $3 = $size;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_pn_buffer_size($6)|0);
 $offset = $7;
 $8 = $1;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = $3;
 $13 = (_pn_buffer_append($10,$11,$12)|0);
 $err = $13;
 $14 = $err;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $err;
  $0 = $16;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $17 = $1;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_pn_buffer_append($19,5544,1)|0);
 $err = $20;
 $21 = $err;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $err;
  $0 = $23;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 } else {
  $24 = $offset;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _pn_data_bytes($data,$node) {
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $node;
 $3 = $2;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 21) | (($5|0) == 20) | (($5|0) == 19)) {
  $6 = $2;
  $7 = (($6) + 16|0);
  $8 = (($7) + 8|0);
  $0 = $8;
 } else {
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _pn_data_rebase($data,$base) {
 $data = $data|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $i = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $base;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $0;
  $4 = (($3) + 26|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = ($2>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8<<6)|0);
  $node = $11;
  $12 = $node;
  $13 = (($12) + 55|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&1;
  if ($15) {
   $16 = $0;
   $17 = $node;
   $18 = (_pn_data_bytes($16,$17)|0);
   $bytes = $18;
   $19 = $1;
   $20 = $node;
   $21 = (($20) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($19) + ($22)|0);
   $24 = $bytes;
   $25 = (($24) + 4|0);
   HEAP32[$25>>2] = $23;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function _pn_data_intern_node($data,$node) {
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $bytes = 0, $offset = 0, $oldcap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $1 = $data;
 $2 = $node;
 $3 = $1;
 $4 = $2;
 $5 = (_pn_data_bytes($3,$4)|0);
 $bytes = $5;
 $6 = $bytes;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $8 = $1;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_pn_buffer_capacity($10)|0);
 $oldcap = $11;
 $12 = $1;
 $13 = $bytes;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $bytes;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_pn_data_intern($12,$15,$17)|0);
 $offset = $18;
 $19 = $offset;
 $20 = ($19|0)<(0);
 if ($20) {
  $21 = $offset;
  $0 = $21;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $22 = $2;
 $23 = (($22) + 55|0);
 HEAP8[$23>>0] = 1;
 $24 = $offset;
 $25 = $2;
 $26 = (($25) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $bytes;
 $28 = HEAP32[$27>>2]|0;
 $29 = $2;
 $30 = (($29) + 8|0);
 HEAP32[$30>>2] = $28;
 $31 = $1;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 _pn_buffer_memory($buf,$33);
 $34 = (($buf) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $offset;
 $37 = (($35) + ($36)|0);
 $38 = $bytes;
 $39 = (($38) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $1;
 $41 = (($40) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_pn_buffer_capacity($42)|0);
 $44 = $oldcap;
 $45 = ($43|0)!=($44|0);
 if ($45) {
  $46 = $1;
  $47 = (($buf) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  _pn_data_rebase($46,$48);
 }
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _pn_data_vfill($data,$fmt,$ap) {
 $data = $data|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$byval_copy = 0, $$byval_copy70 = 0, $$byval_copy71 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current49 = 0, $arglist_current5 = 0, $arglist_current52 = 0, $arglist_current55 = 0, $arglist_current64 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next50 = 0, $arglist_next53 = 0, $arglist_next56 = 0, $arglist_next6 = 0, $arglist_next65 = 0, $arglist_next9 = 0, $begin = 0, $c = 0, $code = 0, $cond = 0, $count = 0, $current = 0, $described = 0;
 var $err = 0, $i = 0, $parent = 0, $parent3 = 0, $ptr = 0, $size = 0, $size2 = 0, $sptr = 0, $src = 0, $start = 0, $start1 = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer46 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer66 = 0, $vararg_ptr62 = 0, $vararg_ptr69 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy71 = sp + 160|0;
 $$byval_copy70 = sp + 152|0;
 $$byval_copy = sp + 144|0;
 $vararg_buffer66 = sp + 32|0;
 $vararg_buffer59 = sp + 24|0;
 $vararg_buffer57 = sp + 16|0;
 $vararg_buffer46 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 104|0;
 $5 = sp + 88|0;
 $6 = sp + 80|0;
 $1 = $data;
 $2 = $fmt;
 $3 = $ap;
 $err = 0;
 $7 = $2;
 $begin = $7;
 L1: while(1) {
  $8 = $2;
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if (!($10)) {
   label = 98;
   break;
  }
  $11 = $2;
  $12 = (($11) + 1|0);
  $2 = $12;
  $13 = HEAP8[$11>>0]|0;
  $code = $13;
  $14 = $code;
  $15 = ($14<<24>>24)!=(0);
  if (!($15)) {
   label = 4;
   break;
  }
  $16 = $code;
  $17 = $16 << 24 >> 24;
  do {
   switch ($17|0) {
   case 72:  {
    $35 = $1;
    $36 = $3;
    $arglist_current8 = HEAP32[$36>>2]|0;
    $37 = HEAP32[$arglist_current8>>2]|0;
    $arglist_next9 = (($arglist_current8) + 4|0);
    HEAP32[$36>>2] = $arglist_next9;
    $38 = $37&65535;
    $39 = (_pn_data_put_ushort($35,$38)|0);
    $err = $39;
    break;
   }
   case 110:  {
    $18 = $1;
    $19 = (_pn_data_put_null($18)|0);
    $err = $19;
    break;
   }
   case 66:  {
    $25 = $1;
    $26 = $3;
    $arglist_current2 = HEAP32[$26>>2]|0;
    $27 = HEAP32[$arglist_current2>>2]|0;
    $arglist_next3 = (($arglist_current2) + 4|0);
    HEAP32[$26>>2] = $arglist_next3;
    $28 = $27&255;
    $29 = (_pn_data_put_ubyte($25,$28)|0);
    $err = $29;
    break;
   }
   case 76:  {
    $53 = $1;
    $54 = $3;
    $arglist_current20 = HEAP32[$54>>2]|0;
    $55 = $arglist_current20;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($55) + 4)|0;
    $59 = $58;
    $60 = HEAP32[$59>>2]|0;
    $arglist_next21 = (($arglist_current20) + 8|0);
    HEAP32[$54>>2] = $arglist_next21;
    $61 = (_pn_data_put_ulong($53,$57,$60)|0);
    $err = $61;
    break;
   }
   case 98:  {
    $30 = $1;
    $31 = $3;
    $arglist_current5 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$arglist_current5>>2]|0;
    $arglist_next6 = (($arglist_current5) + 4|0);
    HEAP32[$31>>2] = $arglist_next6;
    $33 = $32&255;
    $34 = (_pn_data_put_byte($30,$33)|0);
    $err = $34;
    break;
   }
   case 73:  {
    $45 = $1;
    $46 = $3;
    $arglist_current14 = HEAP32[$46>>2]|0;
    $47 = HEAP32[$arglist_current14>>2]|0;
    $arglist_next15 = (($arglist_current14) + 4|0);
    HEAP32[$46>>2] = $arglist_next15;
    $48 = (_pn_data_put_uint($45,$47)|0);
    $err = $48;
    break;
   }
   case 104:  {
    $40 = $1;
    $41 = $3;
    $arglist_current11 = HEAP32[$41>>2]|0;
    $42 = HEAP32[$arglist_current11>>2]|0;
    $arglist_next12 = (($arglist_current11) + 4|0);
    HEAP32[$41>>2] = $arglist_next12;
    $43 = $42&65535;
    $44 = (_pn_data_put_short($40,$43)|0);
    $err = $44;
    break;
   }
   case 108:  {
    $62 = $1;
    $63 = $3;
    $arglist_current23 = HEAP32[$63>>2]|0;
    $64 = $arglist_current23;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($64) + 4)|0;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    $arglist_next24 = (($arglist_current23) + 8|0);
    HEAP32[$63>>2] = $arglist_next24;
    $70 = (_pn_data_put_long($62,$66,$69)|0);
    $err = $70;
    break;
   }
   case 105:  {
    $49 = $1;
    $50 = $3;
    $arglist_current17 = HEAP32[$50>>2]|0;
    $51 = HEAP32[$arglist_current17>>2]|0;
    $arglist_next18 = (($arglist_current17) + 4|0);
    HEAP32[$50>>2] = $arglist_next18;
    $52 = (_pn_data_put_int($49,$51)|0);
    $err = $52;
    break;
   }
   case 115: case 83:  {
    $101 = $3;
    $arglist_current41 = HEAP32[$101>>2]|0;
    $102 = HEAP32[$arglist_current41>>2]|0;
    $arglist_next42 = (($arglist_current41) + 4|0);
    HEAP32[$101>>2] = $arglist_next42;
    $start1 = $102;
    $103 = $start1;
    $104 = ($103|0)!=(0|0);
    if ($104) {
     $105 = $start1;
     $106 = (_strlen(($105|0))|0);
     $size2 = $106;
     $107 = $code;
     $108 = $107 << 24 >> 24;
     $109 = ($108|0)==(83);
     if ($109) {
      $110 = $1;
      $111 = $size2;
      $112 = $start1;
      _pn_bytes($5,$111,$112);
      ;HEAP32[$$byval_copy70+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy70+4>>2]=HEAP32[$5+4>>2]|0;
      $113 = (_pn_data_put_string($110,$$byval_copy70)|0);
      $err = $113;
     } else {
      $114 = $1;
      $115 = $size2;
      $116 = $start1;
      _pn_bytes($6,$115,$116);
      ;HEAP32[$$byval_copy71+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$$byval_copy71+4>>2]=HEAP32[$6+4>>2]|0;
      $117 = (_pn_data_put_symbol($114,$$byval_copy71)|0);
      $err = $117;
     }
    } else {
     $118 = $1;
     $119 = (_pn_data_put_null($118)|0);
     $err = $119;
    }
    break;
   }
   case 102:  {
    $80 = $1;
    $81 = $3;
    $arglist_current29 = HEAP32[$81>>2]|0;
    HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$82 = +HEAPF64[tempDoublePtr>>3];
    $arglist_next30 = (($arglist_current29) + 8|0);
    HEAP32[$81>>2] = $arglist_next30;
    $83 = $82;
    $84 = (_pn_data_put_float($80,$83)|0);
    $err = $84;
    break;
   }
   case 100:  {
    $85 = $1;
    $86 = $3;
    $arglist_current32 = HEAP32[$86>>2]|0;
    HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$87 = +HEAPF64[tempDoublePtr>>3];
    $arglist_next33 = (($arglist_current32) + 8|0);
    HEAP32[$86>>2] = $arglist_next33;
    $88 = (_pn_data_put_double($85,$87)|0);
    $err = $88;
    break;
   }
   case 122:  {
    $89 = $3;
    $arglist_current35 = HEAP32[$89>>2]|0;
    $90 = HEAP32[$arglist_current35>>2]|0;
    $arglist_next36 = (($arglist_current35) + 4|0);
    HEAP32[$89>>2] = $arglist_next36;
    $size = $90;
    $91 = $3;
    $arglist_current38 = HEAP32[$91>>2]|0;
    $92 = HEAP32[$arglist_current38>>2]|0;
    $arglist_next39 = (($arglist_current38) + 4|0);
    HEAP32[$91>>2] = $arglist_next39;
    $start = $92;
    $93 = $start;
    $94 = ($93|0)!=(0|0);
    if ($94) {
     $95 = $1;
     $96 = $size;
     $97 = $start;
     _pn_bytes($4,$96,$97);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
     $98 = (_pn_data_put_binary($95,$$byval_copy)|0);
     $err = $98;
    } else {
     $99 = $1;
     $100 = (_pn_data_put_null($99)|0);
     $err = $100;
    }
    break;
   }
   case 68:  {
    $120 = $1;
    $121 = (_pn_data_put_described($120)|0);
    $err = $121;
    $122 = $1;
    (_pn_data_enter($122)|0);
    break;
   }
   case 84:  {
    $123 = $1;
    $124 = $1;
    $125 = (($124) + 28|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = (_pn_data_node($123,$126)|0);
    $parent = $127;
    $128 = $parent;
    $129 = (($128) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)==(23);
    if (!($131)) {
     label = 33;
     break L1;
    }
    $132 = $3;
    $arglist_current44 = HEAP32[$132>>2]|0;
    $133 = HEAP32[$arglist_current44>>2]|0;
    $arglist_next45 = (($arglist_current44) + 4|0);
    HEAP32[$132>>2] = $arglist_next45;
    $134 = $parent;
    $135 = (($134) + 40|0);
    HEAP32[$135>>2] = $133;
    break;
   }
   case 91:  {
    $152 = $2;
    $153 = $begin;
    $154 = (($153) + 2|0);
    $155 = ($152>>>0)<($154>>>0);
    if ($155) {
     label = 41;
    } else {
     $156 = $2;
     $157 = (($156) + -2|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158 << 24 >> 24;
     $160 = ($159|0)!=(84);
     if ($160) {
      label = 41;
     }
    }
    if ((label|0) == 41) {
     label = 0;
     $161 = $1;
     $162 = (_pn_data_put_list($161)|0);
     $err = $162;
     $163 = $err;
     $164 = ($163|0)!=(0);
     if ($164) {
      label = 42;
      break L1;
     }
     $166 = $1;
     (_pn_data_enter($166)|0);
    }
    break;
   }
   case 64:  {
    $140 = $2;
    $141 = (($140) + 1|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142 << 24 >> 24;
    $144 = ($143|0)==(68);
    if ($144) {
     $145 = $2;
     $146 = (($145) + 1|0);
     $2 = $146;
     $described = 1;
    } else {
     $described = 0;
    }
    $147 = $1;
    $148 = $described;
    $149 = $148&1;
    $150 = (_pn_data_put_array($147,$149,0)|0);
    $err = $150;
    $151 = $1;
    (_pn_data_enter($151)|0);
    break;
   }
   case 123:  {
    $167 = $1;
    $168 = (_pn_data_put_map($167)|0);
    $err = $168;
    $169 = $err;
    $170 = ($169|0)!=(0);
    if ($170) {
     label = 46;
     break L1;
    }
    $172 = $1;
    (_pn_data_enter($172)|0);
    break;
   }
   case 93: case 125:  {
    $173 = $1;
    $174 = (_pn_data_exit($173)|0);
    if (!($174)) {
     label = 49;
     break L1;
    }
    break;
   }
   case 63:  {
    $179 = $3;
    $arglist_current49 = HEAP32[$179>>2]|0;
    $180 = HEAP32[$arglist_current49>>2]|0;
    $arglist_next50 = (($arglist_current49) + 4|0);
    HEAP32[$179>>2] = $arglist_next50;
    $181 = ($180|0)!=(0);
    if (!($181)) {
     $182 = $1;
     $183 = (_pn_data_put_null($182)|0);
     $err = $183;
     $184 = $err;
     $185 = ($184|0)!=(0);
     if ($185) {
      label = 53;
      break L1;
     }
     $187 = $1;
     (_pn_data_enter($187)|0);
    }
    break;
   }
   case 42:  {
    $188 = $3;
    $arglist_current52 = HEAP32[$188>>2]|0;
    $189 = HEAP32[$arglist_current52>>2]|0;
    $arglist_next53 = (($arglist_current52) + 4|0);
    HEAP32[$188>>2] = $arglist_next53;
    $count = $189;
    $190 = $3;
    $arglist_current55 = HEAP32[$190>>2]|0;
    $191 = HEAP32[$arglist_current55>>2]|0;
    $arglist_next56 = (($arglist_current55) + 4|0);
    HEAP32[$190>>2] = $arglist_next56;
    $ptr = $191;
    $192 = $2;
    $193 = (($192) + 1|0);
    $2 = $193;
    $194 = HEAP8[$192>>0]|0;
    $c = $194;
    $195 = $c;
    $196 = $195 << 24 >> 24;
    $cond = ($196|0)==(115);
    if (!($cond)) {
     label = 64;
     break L1;
    }
    $197 = $ptr;
    $sptr = $197;
    $i = 0;
    while(1) {
     $198 = $i;
     $199 = $count;
     $200 = ($198|0)<($199|0);
     if (!($200)) {
      break;
     }
     $201 = $sptr;
     $202 = (($201) + 4|0);
     $sptr = $202;
     $203 = HEAP32[$201>>2]|0;
     $sym = $203;
     $204 = $1;
     $205 = $sym;
     HEAP32[$vararg_buffer57>>2] = $205;
     $206 = (_pn_data_fill($204,5584,$vararg_buffer57)|0);
     $err = $206;
     $207 = $err;
     $208 = ($207|0)!=(0);
     if ($208) {
      label = 60;
      break L1;
     }
     $210 = $i;
     $211 = (($210) + 1)|0;
     $i = $211;
    }
    break;
   }
   case 67:  {
    $217 = $3;
    $arglist_current64 = HEAP32[$217>>2]|0;
    $218 = HEAP32[$arglist_current64>>2]|0;
    $arglist_next65 = (($arglist_current64) + 4|0);
    HEAP32[$217>>2] = $arglist_next65;
    $src = $218;
    $219 = $src;
    $220 = ($219|0)!=(0|0);
    if ($220) {
     $221 = $src;
     $222 = (_pn_data_size($221)|0);
     $223 = ($222>>>0)>(0);
     if ($223) {
      $224 = $1;
      $225 = $src;
      $226 = (_pn_data_appendn($224,$225,1)|0);
      $err = $226;
      $227 = $err;
      $228 = ($227|0)!=(0);
      if ($228) {
       label = 73;
       break L1;
      }
     } else {
      label = 75;
     }
    } else {
     label = 75;
    }
    if ((label|0) == 75) {
     label = 0;
     $230 = $1;
     $231 = (_pn_data_put_null($230)|0);
     $err = $231;
     $232 = $err;
     $233 = ($232|0)!=(0);
     if ($233) {
      label = 76;
      break L1;
     }
    }
    break;
   }
   case 116:  {
    $71 = $1;
    $72 = $3;
    $arglist_current26 = HEAP32[$72>>2]|0;
    $73 = $arglist_current26;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($73) + 4)|0;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $arglist_next27 = (($arglist_current26) + 8|0);
    HEAP32[$72>>2] = $arglist_next27;
    $79 = (_pn_data_put_timestamp($71,$75,$78)|0);
    $err = $79;
    break;
   }
   case 111:  {
    $20 = $1;
    $21 = $3;
    $arglist_current = HEAP32[$21>>2]|0;
    $22 = HEAP32[$arglist_current>>2]|0;
    $arglist_next = (($arglist_current) + 4|0);
    HEAP32[$21>>2] = $arglist_next;
    $23 = ($22|0)!=(0);
    $24 = (_pn_data_put_bool($20,$23)|0);
    $err = $24;
    break;
   }
   default: {
    label = 79;
    break L1;
   }
   }
  } while(0);
  $240 = $err;
  $241 = ($240|0)!=(0);
  if ($241) {
   label = 85;
   break;
  }
  $243 = $1;
  $244 = $1;
  $245 = (($244) + 28|0);
  $246 = HEAP16[$245>>1]|0;
  $247 = (_pn_data_node($243,$246)|0);
  $parent3 = $247;
  while(1) {
   $248 = $parent3;
   $249 = ($248|0)!=(0|0);
   if (!($249)) {
    break;
   }
   $250 = $parent3;
   $251 = (($250) + 16|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($252|0)==(22);
   if ($253) {
    $254 = $parent3;
    $255 = (($254) + 52|0);
    $256 = HEAP16[$255>>1]|0;
    $257 = $256&65535;
    $258 = ($257|0)==(2);
    if ($258) {
     $259 = $1;
     (_pn_data_exit($259)|0);
     $260 = $1;
     $261 = $1;
     $262 = (($261) + 28|0);
     $263 = HEAP16[$262>>1]|0;
     $264 = (_pn_data_node($260,$263)|0);
     $parent3 = $264;
    } else {
     label = 91;
    }
   } else {
    label = 91;
   }
   if ((label|0) == 91) {
    label = 0;
    $265 = $parent3;
    $266 = (($265) + 16|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = ($267|0)==(1);
    if (!($268)) {
     label = 94;
     break;
    }
    $269 = $parent3;
    $270 = (($269) + 52|0);
    $271 = HEAP16[$270>>1]|0;
    $272 = $271&65535;
    $273 = ($272|0)==(1);
    if (!($273)) {
     label = 94;
     break;
    }
    $274 = $1;
    (_pn_data_exit($274)|0);
    $275 = $1;
    $276 = $1;
    $277 = (($276) + 30|0);
    $278 = HEAP16[$277>>1]|0;
    $279 = (_pn_data_node($275,$278)|0);
    $current = $279;
    $280 = $current;
    $281 = (($280) + 48|0);
    HEAP16[$281>>1] = 0;
    $282 = $current;
    $283 = (($282) + 52|0);
    HEAP16[$283>>1] = 0;
    $284 = $1;
    $285 = $1;
    $286 = (($285) + 28|0);
    $287 = HEAP16[$286>>1]|0;
    $288 = (_pn_data_node($284,$287)|0);
    $parent3 = $288;
   }
  }
  if ((label|0) == 94) {
   label = 0;
  }
 }
 switch (label|0) {
  case 4: {
   $0 = 0;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 33: {
   $136 = $1;
   $137 = (($136) + 16|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_pn_error_format($138,-2,5552,$vararg_buffer)|0);
   $0 = $139;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 42: {
   $165 = $err;
   $0 = $165;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 46: {
   $171 = $err;
   $0 = $171;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 49: {
   $175 = $1;
   $176 = (($175) + 16|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (_pn_error_format($177,-2,5568,$vararg_buffer46)|0);
   $0 = $178;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 53: {
   $186 = $err;
   $0 = $186;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 60: {
   $209 = $err;
   $0 = $209;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 64: {
   $212 = (_pn_log_enabled()|0);
   if ($212) {
    $213 = $code;
    $214 = $213 << 24 >> 24;
    $215 = $code;
    $216 = $215 << 24 >> 24;
    HEAP32[$vararg_buffer59>>2] = $214;
    $vararg_ptr62 = (($vararg_buffer59) + 4|0);
    HEAP32[$vararg_ptr62>>2] = $216;
    _pn_logf_impl(5592,$vararg_buffer59);
   }
   $0 = -6;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 73: {
   $229 = $err;
   $0 = $229;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 76: {
   $234 = $err;
   $0 = $234;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 79: {
   $235 = (_pn_log_enabled()|0);
   if ($235) {
    $236 = $code;
    $237 = $236 << 24 >> 24;
    $238 = $code;
    $239 = $238 << 24 >> 24;
    HEAP32[$vararg_buffer66>>2] = $237;
    $vararg_ptr69 = (($vararg_buffer66) + 4|0);
    HEAP32[$vararg_ptr69>>2] = $239;
    _pn_logf_impl(5632,$vararg_buffer66);
   }
   $0 = -6;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 85: {
   $242 = $err;
   $0 = $242;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
  case 98: {
   $0 = 0;
   $289 = $0;
   STACKTOP = sp;return ($289|0);
   break;
  }
 }
 return (0)|0;
}
function _pn_data_put_null($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 _pni_atom_init($4,1);
 STACKTOP = sp;return 0;
}
function _pn_data_put_bool($data,$b) {
 $data = $data|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $2 = $b&1;
 $1 = $2;
 $3 = $0;
 $4 = (_pn_data_add($3)|0);
 $node = $4;
 $5 = $node;
 $6 = (($5) + 16|0);
 HEAP32[$6>>2] = 2;
 $7 = $1;
 $8 = $7&1;
 $9 = $node;
 $10 = (($9) + 16|0);
 $11 = (($10) + 8|0);
 $12 = $8&1;
 HEAP8[$11>>0] = $12;
 STACKTOP = sp;return 0;
}
function _pn_data_put_ubyte($data,$ub) {
 $data = $data|0;
 $ub = $ub|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $ub;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 3;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP8[$9>>0] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_byte($data,$b) {
 $data = $data|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $b;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 4;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP8[$9>>0] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_ushort($data,$us) {
 $data = $data|0;
 $us = $us|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $us;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 5;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP16[$9>>1] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_short($data,$s) {
 $data = $data|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $s;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 6;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP16[$9>>1] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_uint($data,$ui) {
 $data = $data|0;
 $ui = $ui|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $ui;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 7;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_int($data,$i) {
 $data = $data|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $i;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 8;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_ulong($data,$0,$1) {
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $data;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (_pn_data_add($8)|0);
 $node = $9;
 $10 = $node;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = 10;
 $12 = $3;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $node;
 $19 = (($18) + 16|0);
 $20 = (($19) + 8|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 STACKTOP = sp;return 0;
}
function _pn_data_put_long($data,$0,$1) {
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $data;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (_pn_data_add($8)|0);
 $node = $9;
 $10 = $node;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = 11;
 $12 = $3;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $node;
 $19 = (($18) + 16|0);
 $20 = (($19) + 8|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 STACKTOP = sp;return 0;
}
function _pn_data_put_timestamp($data,$0,$1) {
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $data;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (_pn_data_add($8)|0);
 $node = $9;
 $10 = $node;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = 12;
 $12 = $3;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $node;
 $19 = (($18) + 16|0);
 $20 = (($19) + 8|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 STACKTOP = sp;return 0;
}
function _pn_data_put_float($data,$f) {
 $data = $data|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $f;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 13;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAPF32[$9>>2] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_double($data,$d) {
 $data = $data|0;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $d;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 14;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAPF64[$9>>3] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_binary($data,$bytes) {
 $data = $data|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 19;
 $5 = $node;
 $6 = (($5) + 16|0);
 $7 = (($6) + 8|0);
 ;HEAP32[$7+0>>2]=HEAP32[$bytes+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$bytes+4>>2]|0;
 $8 = $0;
 $9 = $node;
 $10 = (_pn_data_intern_node($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _pn_data_put_string($data,$string) {
 $data = $data|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 20;
 $5 = $node;
 $6 = (($5) + 16|0);
 $7 = (($6) + 8|0);
 ;HEAP32[$7+0>>2]=HEAP32[$string+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$string+4>>2]|0;
 $8 = $0;
 $9 = $node;
 $10 = (_pn_data_intern_node($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _pn_data_put_symbol($data,$symbol) {
 $data = $data|0;
 $symbol = $symbol|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 21;
 $5 = $node;
 $6 = (($5) + 16|0);
 $7 = (($6) + 8|0);
 ;HEAP32[$7+0>>2]=HEAP32[$symbol+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$symbol+4>>2]|0;
 $8 = $0;
 $9 = $node;
 $10 = (_pn_data_intern_node($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _pn_data_put_described($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 22;
 STACKTOP = sp;return 0;
}
function _pn_data_enter($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (($2) + 30|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 30|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $1;
  $10 = (($9) + 28|0);
  HEAP16[$10>>1] = $8;
  $11 = $1;
  $12 = (($11) + 30|0);
  HEAP16[$12>>1] = 0;
  $$expand_i1_val = 1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $13 = $$pre_trunc&1;
  STACKTOP = sp;return ($13|0);
 } else {
  $$expand_i1_val2 = 0;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $13 = $$pre_trunc&1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _pn_data_put_array($data,$described,$type) {
 $data = $data|0;
 $described = $described|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $3 = $described&1;
 $1 = $3;
 $2 = $type;
 $4 = $0;
 $5 = (_pn_data_add($4)|0);
 $node = $5;
 $6 = $node;
 $7 = (($6) + 16|0);
 HEAP32[$7>>2] = 23;
 $8 = $1;
 $9 = $8&1;
 $10 = $node;
 $11 = (($10) + 54|0);
 $12 = $9&1;
 HEAP8[$11>>0] = $12;
 $13 = $2;
 $14 = $node;
 $15 = (($14) + 40|0);
 HEAP32[$15>>2] = $13;
 STACKTOP = sp;return 0;
}
function _pn_data_put_list($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 24;
 STACKTOP = sp;return 0;
}
function _pn_data_put_map($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 25;
 STACKTOP = sp;return 0;
}
function _pn_data_exit($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (($2) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if ($5) {
  $6 = $1;
  $7 = $1;
  $8 = (($7) + 28|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = (_pn_data_node($6,$9)|0);
  $parent = $10;
  $11 = $1;
  $12 = (($11) + 28|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $1;
  $15 = (($14) + 30|0);
  HEAP16[$15>>1] = $13;
  $16 = $parent;
  $17 = (($16) + 50|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $1;
  $20 = (($19) + 28|0);
  HEAP16[$20>>1] = $18;
  $$expand_i1_val = 1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $21 = $$pre_trunc&1;
  STACKTOP = sp;return ($21|0);
 } else {
  $$expand_i1_val2 = 0;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $21 = $$pre_trunc&1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pn_data_fill($data,$fmt,$varargs) {
 $data = $data|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 8|0;
 $0 = $data;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_data_vfill($2,$3,$ap)|0);
 $err = $4;
 $5 = $err;
 STACKTOP = sp;return ($5|0);
}
function _pn_data_appendn($data,$src,$limit) {
 $data = $data|0;
 $src = $src|0;
 $limit = $limit|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $err = 0, $level = 0, $point = 0, $stop = 0;
 var $type = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 72|0;
 $$byval_copy2 = sp + 64|0;
 $$byval_copy1 = sp + 144|0;
 $$byval_copy = sp + 128|0;
 $4 = sp + 104|0;
 $5 = sp + 88|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $1 = $data;
 $2 = $src;
 $3 = $limit;
 $err = 0;
 $level = 0;
 $count = 0;
 $stop = 0;
 $9 = $2;
 $10 = (_pn_data_point($9)|0);
 $point = $10;
 $11 = $2;
 _pn_data_rewind($11);
 L1: while(1) {
  while(1) {
   $12 = $2;
   $13 = (_pn_data_next($12)|0);
   $14 = $13 ^ 1;
   if (!($14)) {
    break;
   }
   $15 = $level;
   $16 = ($15|0)>(0);
   if (!($16)) {
    label = 6;
    break;
   }
   $17 = $1;
   (_pn_data_exit($17)|0);
   $18 = $2;
   (_pn_data_exit($18)|0);
   $19 = $level;
   $20 = (($19) + -1)|0;
   $level = $20;
  }
  if ((label|0) == 6) {
   label = 0;
   $21 = $2;
   $22 = (_pn_data_next($21)|0);
   if (!($22)) {
    $stop = 1;
   }
  }
  $23 = $stop;
  $24 = $23&1;
  if ($24) {
   label = 10;
   break;
  }
  $25 = $level;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $count;
   $28 = $3;
   $29 = ($27|0)==($28|0);
   if ($29) {
    label = 13;
    break;
   }
  }
  $30 = $2;
  $31 = (_pn_data_type($30)|0);
  $type = $31;
  $32 = $type;
  do {
   switch ($32|0) {
   case 4:  {
    $55 = $1;
    $56 = $2;
    $57 = (_pn_data_get_byte($56)|0);
    $58 = (_pn_data_put_byte($55,$57)|0);
    $err = $58;
    $59 = $level;
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = $count;
     $62 = (($61) + 1)|0;
     $count = $62;
    }
    break;
   }
   case 2:  {
    $39 = $1;
    $40 = $2;
    $41 = (_pn_data_get_bool($40)|0);
    $42 = (_pn_data_put_bool($39,$41)|0);
    $err = $42;
    $43 = $level;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = $count;
     $46 = (($45) + 1)|0;
     $count = $46;
    }
    break;
   }
   case 6:  {
    $71 = $1;
    $72 = $2;
    $73 = (_pn_data_get_short($72)|0);
    $74 = (_pn_data_put_short($71,$73)|0);
    $err = $74;
    $75 = $level;
    $76 = ($75|0)==(0);
    if ($76) {
     $77 = $count;
     $78 = (($77) + 1)|0;
     $count = $78;
    }
    break;
   }
   case 10:  {
    $103 = $1;
    $104 = $2;
    $105 = (_pn_data_get_ulong($104)|0);
    $106 = tempRet0;
    $107 = (_pn_data_put_ulong($103,$105,$106)|0);
    $err = $107;
    $108 = $level;
    $109 = ($108|0)==(0);
    if ($109) {
     $110 = $count;
     $111 = (($110) + 1)|0;
     $count = $111;
    }
    break;
   }
   case 8:  {
    $87 = $1;
    $88 = $2;
    $89 = (_pn_data_get_int($88)|0);
    $90 = (_pn_data_put_int($87,$89)|0);
    $err = $90;
    $91 = $level;
    $92 = ($91|0)==(0);
    if ($92) {
     $93 = $count;
     $94 = (($93) + 1)|0;
     $count = $94;
    }
    break;
   }
   case 3:  {
    $47 = $1;
    $48 = $2;
    $49 = (_pn_data_get_ubyte($48)|0);
    $50 = (_pn_data_put_ubyte($47,$49)|0);
    $err = $50;
    $51 = $level;
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = $count;
     $54 = (($53) + 1)|0;
     $count = $54;
    }
    break;
   }
   case 12:  {
    $121 = $1;
    $122 = $2;
    $123 = (_pn_data_get_timestamp($122)|0);
    $124 = tempRet0;
    $125 = (_pn_data_put_timestamp($121,$123,$124)|0);
    $err = $125;
    $126 = $level;
    $127 = ($126|0)==(0);
    if ($127) {
     $128 = $count;
     $129 = (($128) + 1)|0;
     $count = $129;
    }
    break;
   }
   case 13:  {
    $130 = $1;
    $131 = $2;
    $132 = (+_pn_data_get_float($131));
    $133 = (_pn_data_put_float($130,$132)|0);
    $err = $133;
    $134 = $level;
    $135 = ($134|0)==(0);
    if ($135) {
     $136 = $count;
     $137 = (($136) + 1)|0;
     $count = $137;
    }
    break;
   }
   case 14:  {
    $138 = $1;
    $139 = $2;
    $140 = (+_pn_data_get_double($139));
    $141 = (_pn_data_put_double($138,$140)|0);
    $err = $141;
    $142 = $level;
    $143 = ($142|0)==(0);
    if ($143) {
     $144 = $count;
     $145 = (($144) + 1)|0;
     $count = $145;
    }
    break;
   }
   case 19:  {
    $177 = $1;
    $178 = $2;
    _pn_data_get_binary($6,$178);
    ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$6+4>>2]|0;
    $179 = (_pn_data_put_binary($177,$$byval_copy2)|0);
    $err = $179;
    $180 = $level;
    $181 = ($180|0)==(0);
    if ($181) {
     $182 = $count;
     $183 = (($182) + 1)|0;
     $count = $183;
    }
    break;
   }
   case 20:  {
    $184 = $1;
    $185 = $2;
    _pn_data_get_string($7,$185);
    ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$7+4>>2]|0;
    $186 = (_pn_data_put_string($184,$$byval_copy3)|0);
    $err = $186;
    $187 = $level;
    $188 = ($187|0)==(0);
    if ($188) {
     $189 = $count;
     $190 = (($189) + 1)|0;
     $count = $190;
    }
    break;
   }
   case 15:  {
    $146 = $1;
    $147 = $2;
    $148 = (_pn_data_get_decimal32($147)|0);
    $149 = (_pn_data_put_decimal32($146,$148)|0);
    $err = $149;
    $150 = $level;
    $151 = ($150|0)==(0);
    if ($151) {
     $152 = $count;
     $153 = (($152) + 1)|0;
     $count = $153;
    }
    break;
   }
   case 18:  {
    $170 = $1;
    $171 = $2;
    _pn_data_get_uuid($5,$171);
    dest=$$byval_copy1+0|0; src=$5+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $172 = (_pn_data_put_uuid($170,$$byval_copy1)|0);
    $err = $172;
    $173 = $level;
    $174 = ($173|0)==(0);
    if ($174) {
     $175 = $count;
     $176 = (($175) + 1)|0;
     $count = $176;
    }
    break;
   }
   case 22:  {
    $198 = $1;
    $199 = (_pn_data_put_described($198)|0);
    $err = $199;
    $200 = $level;
    $201 = ($200|0)==(0);
    if ($201) {
     $202 = $count;
     $203 = (($202) + 1)|0;
     $count = $203;
    }
    $204 = $err;
    $205 = ($204|0)!=(0);
    if ($205) {
     label = 81;
     break L1;
    }
    $209 = $1;
    (_pn_data_enter($209)|0);
    $210 = $2;
    (_pn_data_enter($210)|0);
    $211 = $level;
    $212 = (($211) + 1)|0;
    $level = $212;
    break;
   }
   case 21:  {
    $191 = $1;
    $192 = $2;
    _pn_data_get_symbol($8,$192);
    ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$8+4>>2]|0;
    $193 = (_pn_data_put_symbol($191,$$byval_copy4)|0);
    $err = $193;
    $194 = $level;
    $195 = ($194|0)==(0);
    if ($195) {
     $196 = $count;
     $197 = (($196) + 1)|0;
     $count = $197;
    }
    break;
   }
   case 24:  {
    $232 = $1;
    $233 = (_pn_data_put_list($232)|0);
    $err = $233;
    $234 = $level;
    $235 = ($234|0)==(0);
    if ($235) {
     $236 = $count;
     $237 = (($236) + 1)|0;
     $count = $237;
    }
    $238 = $err;
    $239 = ($238|0)!=(0);
    if ($239) {
     label = 91;
     break L1;
    }
    $243 = $1;
    (_pn_data_enter($243)|0);
    $244 = $2;
    (_pn_data_enter($244)|0);
    $245 = $level;
    $246 = (($245) + 1)|0;
    $level = $246;
    break;
   }
   case 23:  {
    $213 = $1;
    $214 = $2;
    $215 = (_pn_data_is_array_described($214)|0);
    $216 = $2;
    $217 = (_pn_data_get_array_type($216)|0);
    $218 = (_pn_data_put_array($213,$215,$217)|0);
    $err = $218;
    $219 = $level;
    $220 = ($219|0)==(0);
    if ($220) {
     $221 = $count;
     $222 = (($221) + 1)|0;
     $count = $222;
    }
    $223 = $err;
    $224 = ($223|0)!=(0);
    if ($224) {
     label = 86;
     break L1;
    }
    $228 = $1;
    (_pn_data_enter($228)|0);
    $229 = $2;
    (_pn_data_enter($229)|0);
    $230 = $level;
    $231 = (($230) + 1)|0;
    $level = $231;
    break;
   }
   case 25:  {
    $247 = $1;
    $248 = (_pn_data_put_map($247)|0);
    $err = $248;
    $249 = $level;
    $250 = ($249|0)==(0);
    if ($250) {
     $251 = $count;
     $252 = (($251) + 1)|0;
     $count = $252;
    }
    $253 = $err;
    $254 = ($253|0)!=(0);
    if ($254) {
     label = 96;
     break L1;
    }
    $258 = $1;
    (_pn_data_enter($258)|0);
    $259 = $2;
    (_pn_data_enter($259)|0);
    $260 = $level;
    $261 = (($260) + 1)|0;
    $level = $261;
    break;
   }
   case 5:  {
    $63 = $1;
    $64 = $2;
    $65 = (_pn_data_get_ushort($64)|0);
    $66 = (_pn_data_put_ushort($63,$65)|0);
    $err = $66;
    $67 = $level;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = $count;
     $70 = (($69) + 1)|0;
     $count = $70;
    }
    break;
   }
   case 11:  {
    $112 = $1;
    $113 = $2;
    $114 = (_pn_data_get_long($113)|0);
    $115 = tempRet0;
    $116 = (_pn_data_put_long($112,$114,$115)|0);
    $err = $116;
    $117 = $level;
    $118 = ($117|0)==(0);
    if ($118) {
     $119 = $count;
     $120 = (($119) + 1)|0;
     $count = $120;
    }
    break;
   }
   case 1:  {
    $33 = $1;
    $34 = (_pn_data_put_null($33)|0);
    $err = $34;
    $35 = $level;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = $count;
     $38 = (($37) + 1)|0;
     $count = $38;
    }
    break;
   }
   case 9:  {
    $95 = $1;
    $96 = $2;
    $97 = (_pn_data_get_char($96)|0);
    $98 = (_pn_data_put_char($95,$97)|0);
    $err = $98;
    $99 = $level;
    $100 = ($99|0)==(0);
    if ($100) {
     $101 = $count;
     $102 = (($101) + 1)|0;
     $count = $102;
    }
    break;
   }
   case 16:  {
    $154 = $1;
    $155 = $2;
    $156 = (_pn_data_get_decimal64($155)|0);
    $157 = tempRet0;
    $158 = (_pn_data_put_decimal64($154,$156,$157)|0);
    $err = $158;
    $159 = $level;
    $160 = ($159|0)==(0);
    if ($160) {
     $161 = $count;
     $162 = (($161) + 1)|0;
     $count = $162;
    }
    break;
   }
   case 17:  {
    $163 = $1;
    $164 = $2;
    _pn_data_get_decimal128($4,$164);
    dest=$$byval_copy+0|0; src=$4+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $165 = (_pn_data_put_decimal128($163,$$byval_copy)|0);
    $err = $165;
    $166 = $level;
    $167 = ($166|0)==(0);
    if ($167) {
     $168 = $count;
     $169 = (($168) + 1)|0;
     $count = $169;
    }
    break;
   }
   case 7:  {
    $79 = $1;
    $80 = $2;
    $81 = (_pn_data_get_uint($80)|0);
    $82 = (_pn_data_put_uint($79,$81)|0);
    $err = $82;
    $83 = $level;
    $84 = ($83|0)==(0);
    if ($84) {
     $85 = $count;
     $86 = (($85) + 1)|0;
     $count = $86;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $262 = $err;
  $263 = ($262|0)!=(0);
  if ($263) {
   label = 99;
   break;
  }
 }
 if ((label|0) == 10) {
 }
 else if ((label|0) == 13) {
 }
 else if ((label|0) == 81) {
  $206 = $2;
  $207 = $point;
  (_pn_data_restore($206,$207)|0);
  $208 = $err;
  $0 = $208;
  $269 = $0;
  STACKTOP = sp;return ($269|0);
 }
 else if ((label|0) == 86) {
  $225 = $2;
  $226 = $point;
  (_pn_data_restore($225,$226)|0);
  $227 = $err;
  $0 = $227;
  $269 = $0;
  STACKTOP = sp;return ($269|0);
 }
 else if ((label|0) == 91) {
  $240 = $2;
  $241 = $point;
  (_pn_data_restore($240,$241)|0);
  $242 = $err;
  $0 = $242;
  $269 = $0;
  STACKTOP = sp;return ($269|0);
 }
 else if ((label|0) == 96) {
  $255 = $2;
  $256 = $point;
  (_pn_data_restore($255,$256)|0);
  $257 = $err;
  $0 = $257;
  $269 = $0;
  STACKTOP = sp;return ($269|0);
 }
 else if ((label|0) == 99) {
  $264 = $2;
  $265 = $point;
  (_pn_data_restore($264,$265)|0);
  $266 = $err;
  $0 = $266;
  $269 = $0;
  STACKTOP = sp;return ($269|0);
 }
 $267 = $2;
 $268 = $point;
 (_pn_data_restore($267,$268)|0);
 $0 = 0;
 $269 = $0;
 STACKTOP = sp;return ($269|0);
}
function _pn_data_vscan($data,$fmt,$ap) {
 $data = $data|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0;
 var $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current49 = 0, $arglist_current5 = 0, $arglist_current52 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0;
 var $arglist_next50 = 0, $arglist_next53 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $at = 0, $bytes = 0, $bytes13 = 0, $bytes14 = 0, $code = 0, $count_level = 0, $dst = 0, $err = 0, $found = 0, $level = 0, $next = 0, $old = 0, $resume_count = 0, $scanarg = 0, $scanned = 0, $suspend = 0;
 var $type = 0, $value = 0, $value1 = 0, $value10 = 0, $value11 = 0, $value12 = 0, $value2 = 0, $value3 = 0, $value4 = 0, $value5 = 0, $value6 = 0, $value7 = 0, $value8 = 0, $value9 = 0, $vararg_buffer = 0, $vararg_buffer46 = 0, $vararg_buffer54 = 0, $vararg_ptr56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer54 = sp + 16|0;
 $vararg_buffer46 = sp + 8|0;
 $vararg_buffer = sp;
 $type = sp + 136|0;
 $4 = sp + 72|0;
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $1 = $data;
 $2 = $fmt;
 $3 = $ap;
 $7 = $1;
 _pn_data_rewind($7);
 $scanarg = 0;
 $at = 0;
 $level = 0;
 $count_level = -1;
 $resume_count = 0;
 L1: while(1) {
  $8 = $2;
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if (!($10)) {
   label = 210;
   break;
  }
  $11 = $2;
  $12 = (($11) + 1|0);
  $2 = $12;
  $13 = HEAP8[$11>>0]|0;
  $code = $13;
  $found = 0;
  $scanned = 0;
  $14 = $resume_count;
  $15 = ($14|0)>(0);
  $16 = $15&1;
  $suspend = $16;
  $17 = $code;
  $18 = $17 << 24 >> 24;
  do {
   switch ($18|0) {
   case 66:  {
    $58 = $3;
    $arglist_current2 = HEAP32[$58>>2]|0;
    $59 = HEAP32[$arglist_current2>>2]|0;
    $arglist_next3 = (($arglist_current2) + 4|0);
    HEAP32[$58>>2] = $arglist_next3;
    $value1 = $59;
    $60 = $1;
    $61 = $suspend;
    $62 = $61&1;
    $63 = (_pn_scan_next($60,$type,$62)|0);
    $64 = $63&1;
    $found = $64;
    $65 = $found;
    $66 = $65&1;
    if ($66) {
     $67 = HEAP32[$type>>2]|0;
     $68 = ($67|0)==(3);
     if ($68) {
      $69 = $1;
      $70 = (_pn_data_get_ubyte($69)|0);
      $71 = $value1;
      HEAP8[$71>>0] = $70;
      $scanned = 1;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $72 = $value1;
     HEAP8[$72>>0] = 0;
     $scanned = 0;
    }
    $73 = $resume_count;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $level;
     $76 = $count_level;
     $77 = ($75|0)==($76|0);
     if ($77) {
      $78 = $resume_count;
      $79 = (($78) + -1)|0;
      $resume_count = $79;
     }
    }
    break;
   }
   case 110:  {
    $19 = $1;
    $20 = $suspend;
    $21 = $20&1;
    $22 = (_pn_scan_next($19,$type,$21)|0);
    $23 = $22&1;
    $found = $23;
    $24 = $found;
    $25 = $24&1;
    if ($25) {
     $26 = HEAP32[$type>>2]|0;
     $27 = ($26|0)==(1);
     if ($27) {
      $scanned = 1;
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
    if ((label|0) == 7) {
     label = 0;
     $scanned = 0;
    }
    $28 = $resume_count;
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = $level;
     $31 = $count_level;
     $32 = ($30|0)==($31|0);
     if ($32) {
      $33 = $resume_count;
      $34 = (($33) + -1)|0;
      $resume_count = $34;
     }
    }
    break;
   }
   case 116:  {
    $274 = $3;
    $arglist_current29 = HEAP32[$274>>2]|0;
    $275 = HEAP32[$arglist_current29>>2]|0;
    $arglist_next30 = (($arglist_current29) + 4|0);
    HEAP32[$274>>2] = $arglist_next30;
    $value10 = $275;
    $276 = $1;
    $277 = $suspend;
    $278 = $277&1;
    $279 = (_pn_scan_next($276,$type,$278)|0);
    $280 = $279&1;
    $found = $280;
    $281 = $found;
    $282 = $281&1;
    if ($282) {
     $283 = HEAP32[$type>>2]|0;
     $284 = ($283|0)==(12);
     if ($284) {
      $285 = $1;
      $286 = (_pn_data_get_timestamp($285)|0);
      $287 = tempRet0;
      $288 = $value10;
      $289 = $288;
      $290 = $289;
      HEAP32[$290>>2] = $286;
      $291 = (($289) + 4)|0;
      $292 = $291;
      HEAP32[$292>>2] = $287;
      $scanned = 1;
     } else {
      label = 95;
     }
    } else {
     label = 95;
    }
    if ((label|0) == 95) {
     label = 0;
     $293 = $value10;
     $294 = $293;
     $295 = $294;
     HEAP32[$295>>2] = 0;
     $296 = (($294) + 4)|0;
     $297 = $296;
     HEAP32[$297>>2] = 0;
     $scanned = 0;
    }
    $298 = $resume_count;
    $299 = ($298|0)!=(0);
    if ($299) {
     $300 = $level;
     $301 = $count_level;
     $302 = ($300|0)==($301|0);
     if ($302) {
      $303 = $resume_count;
      $304 = (($303) + -1)|0;
      $resume_count = $304;
     }
    }
    break;
   }
   case 102:  {
    $305 = $3;
    $arglist_current32 = HEAP32[$305>>2]|0;
    $306 = HEAP32[$arglist_current32>>2]|0;
    $arglist_next33 = (($arglist_current32) + 4|0);
    HEAP32[$305>>2] = $arglist_next33;
    $value11 = $306;
    $307 = $1;
    $308 = $suspend;
    $309 = $308&1;
    $310 = (_pn_scan_next($307,$type,$309)|0);
    $311 = $310&1;
    $found = $311;
    $312 = $found;
    $313 = $312&1;
    if ($313) {
     $314 = HEAP32[$type>>2]|0;
     $315 = ($314|0)==(13);
     if ($315) {
      $316 = $1;
      $317 = (+_pn_data_get_float($316));
      $318 = $value11;
      HEAPF32[$318>>2] = $317;
      $scanned = 1;
     } else {
      label = 103;
     }
    } else {
     label = 103;
    }
    if ((label|0) == 103) {
     label = 0;
     $319 = $value11;
     HEAPF32[$319>>2] = 0.0;
     $scanned = 0;
    }
    $320 = $resume_count;
    $321 = ($320|0)!=(0);
    if ($321) {
     $322 = $level;
     $323 = $count_level;
     $324 = ($322|0)==($323|0);
     if ($324) {
      $325 = $resume_count;
      $326 = (($325) + -1)|0;
      $resume_count = $326;
     }
    }
    break;
   }
   case 100:  {
    $327 = $3;
    $arglist_current35 = HEAP32[$327>>2]|0;
    $328 = HEAP32[$arglist_current35>>2]|0;
    $arglist_next36 = (($arglist_current35) + 4|0);
    HEAP32[$327>>2] = $arglist_next36;
    $value12 = $328;
    $329 = $1;
    $330 = $suspend;
    $331 = $330&1;
    $332 = (_pn_scan_next($329,$type,$331)|0);
    $333 = $332&1;
    $found = $333;
    $334 = $found;
    $335 = $334&1;
    if ($335) {
     $336 = HEAP32[$type>>2]|0;
     $337 = ($336|0)==(14);
     if ($337) {
      $338 = $1;
      $339 = (+_pn_data_get_double($338));
      $340 = $value12;
      HEAPF64[$340>>3] = $339;
      $scanned = 1;
     } else {
      label = 111;
     }
    } else {
     label = 111;
    }
    if ((label|0) == 111) {
     label = 0;
     $341 = $value12;
     HEAPF64[$341>>3] = 0.0;
     $scanned = 0;
    }
    $342 = $resume_count;
    $343 = ($342|0)!=(0);
    if ($343) {
     $344 = $level;
     $345 = $count_level;
     $346 = ($344|0)==($345|0);
     if ($346) {
      $347 = $resume_count;
      $348 = (($347) + -1)|0;
      $resume_count = $348;
     }
    }
    break;
   }
   case 122:  {
    $349 = $3;
    $arglist_current38 = HEAP32[$349>>2]|0;
    $350 = HEAP32[$arglist_current38>>2]|0;
    $arglist_next39 = (($arglist_current38) + 4|0);
    HEAP32[$349>>2] = $arglist_next39;
    $bytes = $350;
    $351 = $1;
    $352 = $suspend;
    $353 = $352&1;
    $354 = (_pn_scan_next($351,$type,$353)|0);
    $355 = $354&1;
    $found = $355;
    $356 = $found;
    $357 = $356&1;
    if ($357) {
     $358 = HEAP32[$type>>2]|0;
     $359 = ($358|0)==(19);
     if ($359) {
      $360 = $bytes;
      $361 = $1;
      _pn_data_get_binary($4,$361);
      ;HEAP32[$360+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$360+4>>2]=HEAP32[$4+4>>2]|0;
      $scanned = 1;
     } else {
      label = 119;
     }
    } else {
     label = 119;
    }
    if ((label|0) == 119) {
     label = 0;
     $362 = $bytes;
     $363 = (($362) + 4|0);
     HEAP32[$363>>2] = 0;
     $364 = $bytes;
     HEAP32[$364>>2] = 0;
     $scanned = 0;
    }
    $365 = $resume_count;
    $366 = ($365|0)!=(0);
    if ($366) {
     $367 = $level;
     $368 = $count_level;
     $369 = ($367|0)==($368|0);
     if ($369) {
      $370 = $resume_count;
      $371 = (($370) + -1)|0;
      $resume_count = $371;
     }
    }
    break;
   }
   case 68:  {
    $418 = $1;
    $419 = $suspend;
    $420 = $419&1;
    $421 = (_pn_scan_next($418,$type,$420)|0);
    $422 = $421&1;
    $found = $422;
    $423 = $found;
    $424 = $423&1;
    if ($424) {
     $425 = HEAP32[$type>>2]|0;
     $426 = ($425|0)==(22);
     if ($426) {
      $427 = $1;
      (_pn_data_enter($427)|0);
      $scanned = 1;
     } else {
      label = 143;
     }
    } else {
     label = 143;
    }
    if ((label|0) == 143) {
     label = 0;
     $428 = $suspend;
     $429 = $428&1;
     if (!($429)) {
      $resume_count = 3;
      $430 = $level;
      $count_level = $430;
     }
     $scanned = 0;
    }
    $431 = $resume_count;
    $432 = ($431|0)!=(0);
    if ($432) {
     $433 = $level;
     $434 = $count_level;
     $435 = ($433|0)==($434|0);
     if ($435) {
      $436 = $resume_count;
      $437 = (($436) + -1)|0;
      $resume_count = $437;
     }
    }
    break;
   }
   case 83:  {
    $372 = $3;
    $arglist_current41 = HEAP32[$372>>2]|0;
    $373 = HEAP32[$arglist_current41>>2]|0;
    $arglist_next42 = (($arglist_current41) + 4|0);
    HEAP32[$372>>2] = $arglist_next42;
    $bytes13 = $373;
    $374 = $1;
    $375 = $suspend;
    $376 = $375&1;
    $377 = (_pn_scan_next($374,$type,$376)|0);
    $378 = $377&1;
    $found = $378;
    $379 = $found;
    $380 = $379&1;
    if ($380) {
     $381 = HEAP32[$type>>2]|0;
     $382 = ($381|0)==(20);
     if ($382) {
      $383 = $bytes13;
      $384 = $1;
      _pn_data_get_string($5,$384);
      ;HEAP32[$383+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$383+4>>2]=HEAP32[$5+4>>2]|0;
      $scanned = 1;
     } else {
      label = 127;
     }
    } else {
     label = 127;
    }
    if ((label|0) == 127) {
     label = 0;
     $385 = $bytes13;
     $386 = (($385) + 4|0);
     HEAP32[$386>>2] = 0;
     $387 = $bytes13;
     HEAP32[$387>>2] = 0;
     $scanned = 0;
    }
    $388 = $resume_count;
    $389 = ($388|0)!=(0);
    if ($389) {
     $390 = $level;
     $391 = $count_level;
     $392 = ($390|0)==($391|0);
     if ($392) {
      $393 = $resume_count;
      $394 = (($393) + -1)|0;
      $resume_count = $394;
     }
    }
    break;
   }
   case 105:  {
    $168 = $3;
    $arglist_current17 = HEAP32[$168>>2]|0;
    $169 = HEAP32[$arglist_current17>>2]|0;
    $arglist_next18 = (($arglist_current17) + 4|0);
    HEAP32[$168>>2] = $arglist_next18;
    $value6 = $169;
    $170 = $1;
    $171 = $suspend;
    $172 = $171&1;
    $173 = (_pn_scan_next($170,$type,$172)|0);
    $174 = $173&1;
    $found = $174;
    $175 = $found;
    $176 = $175&1;
    if ($176) {
     $177 = HEAP32[$type>>2]|0;
     $178 = ($177|0)==(8);
     if ($178) {
      $179 = $1;
      $180 = (_pn_data_get_int($179)|0);
      $181 = $value6;
      HEAP32[$181>>2] = $180;
      $scanned = 1;
     } else {
      label = 63;
     }
    } else {
     label = 63;
    }
    if ((label|0) == 63) {
     label = 0;
     $182 = $value6;
     HEAP32[$182>>2] = 0;
     $scanned = 0;
    }
    $183 = $resume_count;
    $184 = ($183|0)!=(0);
    if ($184) {
     $185 = $level;
     $186 = $count_level;
     $187 = ($185|0)==($186|0);
     if ($187) {
      $188 = $resume_count;
      $189 = (($188) + -1)|0;
      $resume_count = $189;
     }
    }
    break;
   }
   case 104:  {
    $124 = $3;
    $arglist_current11 = HEAP32[$124>>2]|0;
    $125 = HEAP32[$arglist_current11>>2]|0;
    $arglist_next12 = (($arglist_current11) + 4|0);
    HEAP32[$124>>2] = $arglist_next12;
    $value4 = $125;
    $126 = $1;
    $127 = $suspend;
    $128 = $127&1;
    $129 = (_pn_scan_next($126,$type,$128)|0);
    $130 = $129&1;
    $found = $130;
    $131 = $found;
    $132 = $131&1;
    if ($132) {
     $133 = HEAP32[$type>>2]|0;
     $134 = ($133|0)==(6);
     if ($134) {
      $135 = $1;
      $136 = (_pn_data_get_short($135)|0);
      $137 = $value4;
      HEAP16[$137>>1] = $136;
      $scanned = 1;
     } else {
      label = 47;
     }
    } else {
     label = 47;
    }
    if ((label|0) == 47) {
     label = 0;
     $138 = $value4;
     HEAP16[$138>>1] = 0;
     $scanned = 0;
    }
    $139 = $resume_count;
    $140 = ($139|0)!=(0);
    if ($140) {
     $141 = $level;
     $142 = $count_level;
     $143 = ($141|0)==($142|0);
     if ($143) {
      $144 = $resume_count;
      $145 = (($144) + -1)|0;
      $resume_count = $145;
     }
    }
    break;
   }
   case 98:  {
    $80 = $3;
    $arglist_current5 = HEAP32[$80>>2]|0;
    $81 = HEAP32[$arglist_current5>>2]|0;
    $arglist_next6 = (($arglist_current5) + 4|0);
    HEAP32[$80>>2] = $arglist_next6;
    $value2 = $81;
    $82 = $1;
    $83 = $suspend;
    $84 = $83&1;
    $85 = (_pn_scan_next($82,$type,$84)|0);
    $86 = $85&1;
    $found = $86;
    $87 = $found;
    $88 = $87&1;
    if ($88) {
     $89 = HEAP32[$type>>2]|0;
     $90 = ($89|0)==(4);
     if ($90) {
      $91 = $1;
      $92 = (_pn_data_get_byte($91)|0);
      $93 = $value2;
      HEAP8[$93>>0] = $92;
      $scanned = 1;
     } else {
      label = 31;
     }
    } else {
     label = 31;
    }
    if ((label|0) == 31) {
     label = 0;
     $94 = $value2;
     HEAP8[$94>>0] = 0;
     $scanned = 0;
    }
    $95 = $resume_count;
    $96 = ($95|0)!=(0);
    if ($96) {
     $97 = $level;
     $98 = $count_level;
     $99 = ($97|0)==($98|0);
     if ($99) {
      $100 = $resume_count;
      $101 = (($100) + -1)|0;
      $resume_count = $101;
     }
    }
    break;
   }
   case 73:  {
    $146 = $3;
    $arglist_current14 = HEAP32[$146>>2]|0;
    $147 = HEAP32[$arglist_current14>>2]|0;
    $arglist_next15 = (($arglist_current14) + 4|0);
    HEAP32[$146>>2] = $arglist_next15;
    $value5 = $147;
    $148 = $1;
    $149 = $suspend;
    $150 = $149&1;
    $151 = (_pn_scan_next($148,$type,$150)|0);
    $152 = $151&1;
    $found = $152;
    $153 = $found;
    $154 = $153&1;
    if ($154) {
     $155 = HEAP32[$type>>2]|0;
     $156 = ($155|0)==(7);
     if ($156) {
      $157 = $1;
      $158 = (_pn_data_get_uint($157)|0);
      $159 = $value5;
      HEAP32[$159>>2] = $158;
      $scanned = 1;
     } else {
      label = 55;
     }
    } else {
     label = 55;
    }
    if ((label|0) == 55) {
     label = 0;
     $160 = $value5;
     HEAP32[$160>>2] = 0;
     $scanned = 0;
    }
    $161 = $resume_count;
    $162 = ($161|0)!=(0);
    if ($162) {
     $163 = $level;
     $164 = $count_level;
     $165 = ($163|0)==($164|0);
     if ($165) {
      $166 = $resume_count;
      $167 = (($166) + -1)|0;
      $resume_count = $167;
     }
    }
    break;
   }
   case 111:  {
    $35 = $3;
    $arglist_current = HEAP32[$35>>2]|0;
    $36 = HEAP32[$arglist_current>>2]|0;
    $arglist_next = (($arglist_current) + 4|0);
    HEAP32[$35>>2] = $arglist_next;
    $value = $36;
    $37 = $1;
    $38 = $suspend;
    $39 = $38&1;
    $40 = (_pn_scan_next($37,$type,$39)|0);
    $41 = $40&1;
    $found = $41;
    $42 = $found;
    $43 = $42&1;
    if ($43) {
     $44 = HEAP32[$type>>2]|0;
     $45 = ($44|0)==(2);
     if ($45) {
      $46 = $1;
      $47 = (_pn_data_get_bool($46)|0);
      $48 = $value;
      $49 = $47&1;
      HEAP8[$48>>0] = $49;
      $scanned = 1;
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
    if ((label|0) == 15) {
     label = 0;
     $50 = $value;
     HEAP8[$50>>0] = 0;
     $scanned = 0;
    }
    $51 = $resume_count;
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = $level;
     $54 = $count_level;
     $55 = ($53|0)==($54|0);
     if ($55) {
      $56 = $resume_count;
      $57 = (($56) + -1)|0;
      $resume_count = $57;
     }
    }
    break;
   }
   case 72:  {
    $102 = $3;
    $arglist_current8 = HEAP32[$102>>2]|0;
    $103 = HEAP32[$arglist_current8>>2]|0;
    $arglist_next9 = (($arglist_current8) + 4|0);
    HEAP32[$102>>2] = $arglist_next9;
    $value3 = $103;
    $104 = $1;
    $105 = $suspend;
    $106 = $105&1;
    $107 = (_pn_scan_next($104,$type,$106)|0);
    $108 = $107&1;
    $found = $108;
    $109 = $found;
    $110 = $109&1;
    if ($110) {
     $111 = HEAP32[$type>>2]|0;
     $112 = ($111|0)==(5);
     if ($112) {
      $113 = $1;
      $114 = (_pn_data_get_ushort($113)|0);
      $115 = $value3;
      HEAP16[$115>>1] = $114;
      $scanned = 1;
     } else {
      label = 39;
     }
    } else {
     label = 39;
    }
    if ((label|0) == 39) {
     label = 0;
     $116 = $value3;
     HEAP16[$116>>1] = 0;
     $scanned = 0;
    }
    $117 = $resume_count;
    $118 = ($117|0)!=(0);
    if ($118) {
     $119 = $level;
     $120 = $count_level;
     $121 = ($119|0)==($120|0);
     if ($121) {
      $122 = $resume_count;
      $123 = (($122) + -1)|0;
      $resume_count = $123;
     }
    }
    break;
   }
   case 99:  {
    $190 = $3;
    $arglist_current20 = HEAP32[$190>>2]|0;
    $191 = HEAP32[$arglist_current20>>2]|0;
    $arglist_next21 = (($arglist_current20) + 4|0);
    HEAP32[$190>>2] = $arglist_next21;
    $value7 = $191;
    $192 = $1;
    $193 = $suspend;
    $194 = $193&1;
    $195 = (_pn_scan_next($192,$type,$194)|0);
    $196 = $195&1;
    $found = $196;
    $197 = $found;
    $198 = $197&1;
    if ($198) {
     $199 = HEAP32[$type>>2]|0;
     $200 = ($199|0)==(9);
     if ($200) {
      $201 = $1;
      $202 = (_pn_data_get_char($201)|0);
      $203 = $value7;
      HEAP32[$203>>2] = $202;
      $scanned = 1;
     } else {
      label = 71;
     }
    } else {
     label = 71;
    }
    if ((label|0) == 71) {
     label = 0;
     $204 = $value7;
     HEAP32[$204>>2] = 0;
     $scanned = 0;
    }
    $205 = $resume_count;
    $206 = ($205|0)!=(0);
    if ($206) {
     $207 = $level;
     $208 = $count_level;
     $209 = ($207|0)==($208|0);
     if ($209) {
      $210 = $resume_count;
      $211 = (($210) + -1)|0;
      $resume_count = $211;
     }
    }
    break;
   }
   case 76:  {
    $212 = $3;
    $arglist_current23 = HEAP32[$212>>2]|0;
    $213 = HEAP32[$arglist_current23>>2]|0;
    $arglist_next24 = (($arglist_current23) + 4|0);
    HEAP32[$212>>2] = $arglist_next24;
    $value8 = $213;
    $214 = $1;
    $215 = $suspend;
    $216 = $215&1;
    $217 = (_pn_scan_next($214,$type,$216)|0);
    $218 = $217&1;
    $found = $218;
    $219 = $found;
    $220 = $219&1;
    if ($220) {
     $221 = HEAP32[$type>>2]|0;
     $222 = ($221|0)==(10);
     if ($222) {
      $223 = $1;
      $224 = (_pn_data_get_ulong($223)|0);
      $225 = tempRet0;
      $226 = $value8;
      $227 = $226;
      $228 = $227;
      HEAP32[$228>>2] = $224;
      $229 = (($227) + 4)|0;
      $230 = $229;
      HEAP32[$230>>2] = $225;
      $scanned = 1;
     } else {
      label = 79;
     }
    } else {
     label = 79;
    }
    if ((label|0) == 79) {
     label = 0;
     $231 = $value8;
     $232 = $231;
     $233 = $232;
     HEAP32[$233>>2] = 0;
     $234 = (($232) + 4)|0;
     $235 = $234;
     HEAP32[$235>>2] = 0;
     $scanned = 0;
    }
    $236 = $resume_count;
    $237 = ($236|0)!=(0);
    if ($237) {
     $238 = $level;
     $239 = $count_level;
     $240 = ($238|0)==($239|0);
     if ($240) {
      $241 = $resume_count;
      $242 = (($241) + -1)|0;
      $resume_count = $242;
     }
    }
    break;
   }
   case 108:  {
    $243 = $3;
    $arglist_current26 = HEAP32[$243>>2]|0;
    $244 = HEAP32[$arglist_current26>>2]|0;
    $arglist_next27 = (($arglist_current26) + 4|0);
    HEAP32[$243>>2] = $arglist_next27;
    $value9 = $244;
    $245 = $1;
    $246 = $suspend;
    $247 = $246&1;
    $248 = (_pn_scan_next($245,$type,$247)|0);
    $249 = $248&1;
    $found = $249;
    $250 = $found;
    $251 = $250&1;
    if ($251) {
     $252 = HEAP32[$type>>2]|0;
     $253 = ($252|0)==(11);
     if ($253) {
      $254 = $1;
      $255 = (_pn_data_get_long($254)|0);
      $256 = tempRet0;
      $257 = $value9;
      $258 = $257;
      $259 = $258;
      HEAP32[$259>>2] = $255;
      $260 = (($258) + 4)|0;
      $261 = $260;
      HEAP32[$261>>2] = $256;
      $scanned = 1;
     } else {
      label = 87;
     }
    } else {
     label = 87;
    }
    if ((label|0) == 87) {
     label = 0;
     $262 = $value9;
     $263 = $262;
     $264 = $263;
     HEAP32[$264>>2] = 0;
     $265 = (($263) + 4)|0;
     $266 = $265;
     HEAP32[$266>>2] = 0;
     $scanned = 0;
    }
    $267 = $resume_count;
    $268 = ($267|0)!=(0);
    if ($268) {
     $269 = $level;
     $270 = $count_level;
     $271 = ($269|0)==($270|0);
     if ($271) {
      $272 = $resume_count;
      $273 = (($272) + -1)|0;
      $resume_count = $273;
     }
    }
    break;
   }
   case 115:  {
    $395 = $3;
    $arglist_current44 = HEAP32[$395>>2]|0;
    $396 = HEAP32[$arglist_current44>>2]|0;
    $arglist_next45 = (($arglist_current44) + 4|0);
    HEAP32[$395>>2] = $arglist_next45;
    $bytes14 = $396;
    $397 = $1;
    $398 = $suspend;
    $399 = $398&1;
    $400 = (_pn_scan_next($397,$type,$399)|0);
    $401 = $400&1;
    $found = $401;
    $402 = $found;
    $403 = $402&1;
    if ($403) {
     $404 = HEAP32[$type>>2]|0;
     $405 = ($404|0)==(21);
     if ($405) {
      $406 = $bytes14;
      $407 = $1;
      _pn_data_get_symbol($6,$407);
      ;HEAP32[$406+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$406+4>>2]=HEAP32[$6+4>>2]|0;
      $scanned = 1;
     } else {
      label = 135;
     }
    } else {
     label = 135;
    }
    if ((label|0) == 135) {
     label = 0;
     $408 = $bytes14;
     $409 = (($408) + 4|0);
     HEAP32[$409>>2] = 0;
     $410 = $bytes14;
     HEAP32[$410>>2] = 0;
     $scanned = 0;
    }
    $411 = $resume_count;
    $412 = ($411|0)!=(0);
    if ($412) {
     $413 = $level;
     $414 = $count_level;
     $415 = ($413|0)==($414|0);
     if ($415) {
      $416 = $resume_count;
      $417 = (($416) + -1)|0;
      $resume_count = $417;
     }
    }
    break;
   }
   case 64:  {
    $438 = $1;
    $439 = $suspend;
    $440 = $439&1;
    $441 = (_pn_scan_next($438,$type,$440)|0);
    $442 = $441&1;
    $found = $442;
    $443 = $found;
    $444 = $443&1;
    if ($444) {
     $445 = HEAP32[$type>>2]|0;
     $446 = ($445|0)==(23);
     if ($446) {
      $447 = $1;
      (_pn_data_enter($447)|0);
      $scanned = 1;
      $at = 1;
     } else {
      label = 153;
     }
    } else {
     label = 153;
    }
    if ((label|0) == 153) {
     label = 0;
     $448 = $suspend;
     $449 = $448&1;
     if (!($449)) {
      $resume_count = 3;
      $450 = $level;
      $count_level = $450;
     }
     $scanned = 0;
    }
    $451 = $resume_count;
    $452 = ($451|0)!=(0);
    if ($452) {
     $453 = $level;
     $454 = $count_level;
     $455 = ($453|0)==($454|0);
     if ($455) {
      $456 = $resume_count;
      $457 = (($456) + -1)|0;
      $resume_count = $457;
     }
    }
    break;
   }
   case 91:  {
    $458 = $at;
    $459 = $458&1;
    if ($459) {
     $scanned = 1;
     $at = 0;
    } else {
     $460 = $1;
     $461 = $suspend;
     $462 = $461&1;
     $463 = (_pn_scan_next($460,$type,$462)|0);
     $464 = $463&1;
     $found = $464;
     $465 = $found;
     $466 = $465&1;
     if ($466) {
      $467 = HEAP32[$type>>2]|0;
      $468 = ($467|0)==(24);
      if ($468) {
       $469 = $1;
       (_pn_data_enter($469)|0);
       $scanned = 1;
      } else {
       label = 165;
      }
     } else {
      label = 165;
     }
     if ((label|0) == 165) {
      label = 0;
      $470 = $suspend;
      $471 = $470&1;
      if (!($471)) {
       $resume_count = 1;
       $472 = $level;
       $count_level = $472;
      }
      $scanned = 0;
     }
    }
    $473 = $level;
    $474 = (($473) + 1)|0;
    $level = $474;
    break;
   }
   case 123:  {
    $475 = $1;
    $476 = $suspend;
    $477 = $476&1;
    $478 = (_pn_scan_next($475,$type,$477)|0);
    $479 = $478&1;
    $found = $479;
    $480 = $found;
    $481 = $480&1;
    if ($481) {
     $482 = HEAP32[$type>>2]|0;
     $483 = ($482|0)==(25);
     if ($483) {
      $484 = $1;
      (_pn_data_enter($484)|0);
      $scanned = 1;
     } else {
      label = 173;
     }
    } else {
     label = 173;
    }
    if ((label|0) == 173) {
     label = 0;
     $485 = $resume_count;
     $486 = ($485|0)!=(0);
     if ($486) {
      $resume_count = 1;
      $487 = $level;
      $count_level = $487;
     }
     $scanned = 0;
    }
    $488 = $level;
    $489 = (($488) + 1)|0;
    $level = $489;
    break;
   }
   case 125: case 93:  {
    $490 = $level;
    $491 = (($490) + -1)|0;
    $level = $491;
    $492 = $suspend;
    $493 = $492&1;
    if (!($493)) {
     $494 = $1;
     $495 = (_pn_data_exit($494)|0);
     if (!($495)) {
      label = 179;
      break L1;
     }
    }
    $500 = $resume_count;
    $501 = ($500|0)!=(0);
    if ($501) {
     $502 = $level;
     $503 = $count_level;
     $504 = ($502|0)==($503|0);
     if ($504) {
      $505 = $resume_count;
      $506 = (($505) + -1)|0;
      $resume_count = $506;
     }
    }
    break;
   }
   case 63:  {
    $522 = $2;
    $523 = HEAP8[$522>>0]|0;
    $524 = ($523<<24>>24)!=(0);
    if (!($524)) {
     label = 190;
     break L1;
    }
    $525 = $2;
    $526 = HEAP8[$525>>0]|0;
    $527 = $526 << 24 >> 24;
    $528 = ($527|0)==(63);
    if ($528) {
     label = 190;
     break L1;
    }
    $533 = $3;
    $arglist_current49 = HEAP32[$533>>2]|0;
    $534 = HEAP32[$arglist_current49>>2]|0;
    $arglist_next50 = (($arglist_current49) + 4|0);
    HEAP32[$533>>2] = $arglist_next50;
    $scanarg = $534;
    break;
   }
   case 46:  {
    $507 = $1;
    $508 = $suspend;
    $509 = $508&1;
    $510 = (_pn_scan_next($507,$type,$509)|0);
    $511 = $510&1;
    $found = $511;
    $512 = $found;
    $513 = $512&1;
    $514 = $513&1;
    $scanned = $514;
    $515 = $resume_count;
    $516 = ($515|0)!=(0);
    if ($516) {
     $517 = $level;
     $518 = $count_level;
     $519 = ($517|0)==($518|0);
     if ($519) {
      $520 = $resume_count;
      $521 = (($520) + -1)|0;
      $resume_count = $521;
     }
    }
    break;
   }
   case 67:  {
    $535 = $3;
    $arglist_current52 = HEAP32[$535>>2]|0;
    $536 = HEAP32[$arglist_current52>>2]|0;
    $arglist_next53 = (($arglist_current52) + 4|0);
    HEAP32[$535>>2] = $arglist_next53;
    $dst = $536;
    $537 = $suspend;
    $538 = $537&1;
    if ($538) {
     $scanned = 0;
    } else {
     $539 = $dst;
     $540 = (_pn_data_size($539)|0);
     $old = $540;
     $541 = $1;
     $542 = (_pn_data_peek($541)|0);
     $next = $542;
     $543 = $next;
     $544 = ($543|0)!=(0|0);
     if ($544) {
      $545 = $next;
      $546 = (($545) + 16|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = ($547|0)!=(1);
      if ($548) {
       $549 = $1;
       _pn_data_narrow($549);
       $550 = $dst;
       $551 = $1;
       $552 = (_pn_data_appendn($550,$551,1)|0);
       $err = $552;
       $553 = $1;
       _pn_data_widen($553);
       $554 = $err;
       $555 = ($554|0)!=(0);
       if ($555) {
        label = 196;
        break L1;
       }
       $557 = $dst;
       $558 = (_pn_data_size($557)|0);
       $559 = $old;
       $560 = ($558>>>0)>($559>>>0);
       $561 = $560&1;
       $scanned = $561;
      } else {
       label = 198;
      }
     } else {
      label = 198;
     }
     if ((label|0) == 198) {
      label = 0;
      $scanned = 0;
     }
     $562 = $1;
     (_pn_data_next($562)|0);
    }
    $563 = $resume_count;
    $564 = ($563|0)!=(0);
    if ($564) {
     $565 = $level;
     $566 = $count_level;
     $567 = ($565|0)==($566|0);
     if ($567) {
      $568 = $resume_count;
      $569 = (($568) + -1)|0;
      $resume_count = $569;
     }
    }
    break;
   }
   default: {
    label = 205;
    break L1;
   }
   }
  } while(0);
  $578 = $scanarg;
  $579 = ($578|0)!=(0|0);
  if ($579) {
   $580 = $code;
   $581 = $580 << 24 >> 24;
   $582 = ($581|0)!=(63);
   if ($582) {
    $583 = $scanned;
    $584 = $583&1;
    $585 = $scanarg;
    $586 = $584&1;
    HEAP8[$585>>0] = $586;
    $scanarg = 0;
   }
  }
 }
 if ((label|0) == 179) {
  $496 = $1;
  $497 = (($496) + 16|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = (_pn_error_format($498,-2,5568,$vararg_buffer)|0);
  $0 = $499;
  $587 = $0;
  STACKTOP = sp;return ($587|0);
 }
 else if ((label|0) == 190) {
  $529 = $1;
  $530 = (($529) + 16|0);
  $531 = HEAP32[$530>>2]|0;
  $532 = (_pn_error_format($531,-6,5672,$vararg_buffer46)|0);
  $0 = $532;
  $587 = $0;
  STACKTOP = sp;return ($587|0);
 }
 else if ((label|0) == 196) {
  $556 = $err;
  $0 = $556;
  $587 = $0;
  STACKTOP = sp;return ($587|0);
 }
 else if ((label|0) == 205) {
  $570 = $1;
  $571 = (($570) + 16|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = $code;
  $574 = $573 << 24 >> 24;
  $575 = $code;
  $576 = $575 << 24 >> 24;
  HEAP32[$vararg_buffer54>>2] = $574;
  $vararg_ptr56 = (($vararg_buffer54) + 4|0);
  HEAP32[$vararg_ptr56>>2] = $576;
  $577 = (_pn_error_format($572,-6,5696,$vararg_buffer54)|0);
  $0 = $577;
  $587 = $0;
  STACKTOP = sp;return ($587|0);
 }
 else if ((label|0) == 210) {
  $0 = 0;
  $587 = $0;
  STACKTOP = sp;return ($587|0);
 }
 return (0)|0;
}
function _pn_data_rewind($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $0;
 $5 = (($4) + 28|0);
 HEAP16[$5>>1] = $3;
 $6 = $0;
 $7 = (($6) + 34|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $0;
 $10 = (($9) + 30|0);
 HEAP16[$10>>1] = $8;
 STACKTOP = sp;return;
}
function _pn_data_get_bool($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&1;
   $$expand_i1_val = $14&1;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $15 = $$pre_trunc&1;
   STACKTOP = sp;return ($15|0);
  }
 }
 $$expand_i1_val2 = 0;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $15 = $$pre_trunc&1;
 STACKTOP = sp;return ($15|0);
}
function _pn_data_get_ubyte($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(3);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP8[$12>>0]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_byte($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(4);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP8[$12>>0]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_ushort($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(5);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP16[$12>>1]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_short($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(6);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP16[$12>>1]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_uint($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(7);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_int($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(8);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_char($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(9);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_ulong($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(10);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = $12;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   $20 = $19;
   HEAP32[$20>>2] = $15;
   $21 = (($19) + 4)|0;
   $22 = $21;
   HEAP32[$22>>2] = $18;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $23 = $0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
 }
 $27 = $0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 tempRet0 = $32;
 STACKTOP = sp;return ($29|0);
}
function _pn_data_get_long($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(11);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = $12;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   $20 = $19;
   HEAP32[$20>>2] = $15;
   $21 = (($19) + 4)|0;
   $22 = $21;
   HEAP32[$22>>2] = $18;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $23 = $0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
 }
 $27 = $0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 tempRet0 = $32;
 STACKTOP = sp;return ($29|0);
}
function _pn_data_get_timestamp($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(12);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = $12;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   $20 = $19;
   HEAP32[$20>>2] = $15;
   $21 = (($19) + 4)|0;
   $22 = $21;
   HEAP32[$22>>2] = $18;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $23 = $0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
 }
 $27 = $0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 tempRet0 = $32;
 STACKTOP = sp;return ($29|0);
}
function _pn_data_get_float($data) {
 $data = $data|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(13);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = +HEAPF32[$12>>2];
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return (+$14);
  }
 }
 $0 = 0.0;
 $14 = $0;
 STACKTOP = sp;return (+$14);
}
function _pn_data_get_double($data) {
 $data = $data|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(14);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = +HEAPF64[$12>>3];
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return (+$14);
  }
 }
 $0 = 0.0;
 $14 = $0;
 STACKTOP = sp;return (+$14);
}
function _pn_data_get_binary($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_current($1)|0);
 $node = $2;
 $3 = $node;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $node;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(19);
  if ($8) {
   $9 = $node;
   $10 = (($9) + 16|0);
   $11 = (($10) + 8|0);
   ;HEAP32[$agg$result+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$11+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$t+0>>2]=0|0;HEAP32[$t+4>>2]=0|0;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$t+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$t+4>>2]|0;
 STACKTOP = sp;return;
}
function _pn_data_get_string($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_current($1)|0);
 $node = $2;
 $3 = $node;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $node;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(20);
  if ($8) {
   $9 = $node;
   $10 = (($9) + 16|0);
   $11 = (($10) + 8|0);
   ;HEAP32[$agg$result+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$11+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$t+0>>2]=0|0;HEAP32[$t+4>>2]=0|0;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$t+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$t+4>>2]|0;
 STACKTOP = sp;return;
}
function _pn_data_get_symbol($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_current($1)|0);
 $node = $2;
 $3 = $node;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $node;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(21);
  if ($8) {
   $9 = $node;
   $10 = (($9) + 16|0);
   $11 = (($10) + 8|0);
   ;HEAP32[$agg$result+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$11+4>>2]|0;
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$t+0>>2]=0|0;HEAP32[$t+4>>2]=0|0;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$t+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$t+4>>2]|0;
 STACKTOP = sp;return;
}
function _pn_data_peek($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $current = $3;
 $4 = $current;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = $current;
  $8 = (($7) + 44|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = (_pn_data_node($6,$9)|0);
  $0 = $10;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $11 = $1;
 $12 = $1;
 $13 = (($12) + 28|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = (_pn_data_node($11,$14)|0);
 $parent = $15;
 $16 = $parent;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = $parent;
  $20 = (($19) + 48|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = (_pn_data_node($18,$21)|0);
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _pn_data_narrow($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $0;
 $5 = (($4) + 32|0);
 HEAP16[$5>>1] = $3;
 $6 = $0;
 $7 = (($6) + 30|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $0;
 $10 = (($9) + 34|0);
 HEAP16[$10>>1] = $8;
 STACKTOP = sp;return;
}
function _pn_data_widen($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 32|0);
 HEAP16[$2>>1] = 0;
 $3 = $0;
 $4 = (($3) + 34|0);
 HEAP16[$4>>1] = 0;
 STACKTOP = sp;return;
}
function _pn_data_next($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, $next = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $current = $3;
 $4 = $1;
 $5 = $1;
 $6 = (($5) + 28|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = (_pn_data_node($4,$7)|0);
 $parent = $8;
 $9 = $current;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $current;
  $12 = (($11) + 44|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $next = $14;
 } else {
  $15 = $parent;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $parent;
   $18 = (($17) + 48|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = $parent;
    $23 = (($22) + 48|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = $24&65535;
    $next = $25;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  do {
   if ((label|0) == 6) {
    $26 = $parent;
    $27 = ($26|0)!=(0|0);
    if (!($27)) {
     $28 = $1;
     $29 = (($28) + 26|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = $30&65535;
     $32 = ($31|0)!=(0);
     if ($32) {
      $next = 1;
      break;
     }
    }
    $$expand_i1_val = 0;
    $0 = $$expand_i1_val;
    $$pre_trunc = $0;
    $39 = $$pre_trunc&1;
    STACKTOP = sp;return ($39|0);
   }
  } while(0);
 }
 $33 = $next;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $next;
  $36 = $35&65535;
  $37 = $1;
  $38 = (($37) + 30|0);
  HEAP16[$38>>1] = $36;
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $39 = $$pre_trunc&1;
  STACKTOP = sp;return ($39|0);
 } else {
  $$expand_i1_val4 = 0;
  $0 = $$expand_i1_val4;
  $$pre_trunc = $0;
  $39 = $$pre_trunc&1;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _pn_data_scan($data,$fmt,$varargs) {
 $data = $data|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp + 8|0;
 $0 = $data;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_data_vscan($2,$3,$ap)|0);
 $err = $4;
 $5 = $err;
 STACKTOP = sp;return ($5|0);
}
function _pn_data_id($data,$node) {
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $node;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 64)&-1;
 $9 = (($8) + 1)|0;
 STACKTOP = sp;return ($9|0);
}
function _pn_data_new($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $0;
 $6 = (($5) + 26|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($4|0)<=($8|0);
 if ($9) {
  $10 = $0;
  (_pn_data_grow($10)|0);
 }
 $11 = $0;
 $12 = $0;
 $13 = (($12) + 26|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = (($14) + 1)<<16>>16;
 HEAP16[$13>>1] = $15;
 $16 = (_pn_data_node($11,$15)|0);
 $node = $16;
 $17 = $node;
 $18 = (($17) + 44|0);
 HEAP16[$18>>1] = 0;
 $19 = $node;
 $20 = (($19) + 48|0);
 HEAP16[$20>>1] = 0;
 $21 = $node;
 $22 = (($21) + 52|0);
 HEAP16[$22>>1] = 0;
 $23 = $node;
 STACKTOP = sp;return ($23|0);
}
function _pn_data_current($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 30|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (_pn_data_node($1,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pn_data_point($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (($2) + 30|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 30|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $0 = $9;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $10 = $1;
  $11 = (($10) + 28|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = (0 - ($13))|0;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _pn_data_restore($data,$point) {
 $data = $data|0;
 $point = $point|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, $spoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $point;
 $3 = $2;
 $spoint = $3;
 $4 = $spoint;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = $spoint;
  $7 = (0 - ($6))|0;
  $8 = $1;
  $9 = (($8) + 26|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($7>>>0)<=($11>>>0);
  if ($12) {
   $13 = $2;
   $14 = (0 - ($13))|0;
   $15 = $14&65535;
   $16 = $1;
   $17 = (($16) + 28|0);
   HEAP16[$17>>1] = $15;
   $18 = $1;
   $19 = (($18) + 30|0);
   HEAP16[$19>>1] = 0;
   $$expand_i1_val = 1;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $39 = $$pre_trunc&1;
   STACKTOP = sp;return ($39|0);
  }
 }
 $20 = $2;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $2;
  $23 = $1;
  $24 = (($23) + 26|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($22>>>0)<=($26>>>0);
  if ($27) {
   $28 = $2;
   $29 = $28&65535;
   $30 = $1;
   $31 = (($30) + 30|0);
   HEAP16[$31>>1] = $29;
   $32 = $1;
   $33 = (_pn_data_current($32)|0);
   $current = $33;
   $34 = $current;
   $35 = (($34) + 50|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $1;
   $38 = (($37) + 28|0);
   HEAP16[$38>>1] = $36;
   $$expand_i1_val2 = 1;
   $0 = $$expand_i1_val2;
   $$pre_trunc = $0;
   $39 = $$pre_trunc&1;
   STACKTOP = sp;return ($39|0);
  }
 }
 $$expand_i1_val4 = 0;
 $0 = $$expand_i1_val4;
 $$pre_trunc = $0;
 $39 = $$pre_trunc&1;
 STACKTOP = sp;return ($39|0);
}
function _pni_data_traverse($data,$enter,$exit,$ctx) {
 $data = $data|0;
 $enter = $enter|0;
 $exit = $exit|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $err = 0, $next = 0, $node = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $enter;
 $3 = $exit;
 $4 = $ctx;
 $5 = $1;
 $6 = (($5) + 26|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = (_pn_data_node($10,1)|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 $node = $12;
 L5: while(1) {
  $13 = $node;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 27;
   break;
  }
  $15 = $1;
  $16 = $node;
  $17 = (($16) + 50|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = (_pn_data_node($15,$18)|0);
  $parent = $19;
  $20 = $2;
  $21 = $4;
  $22 = $1;
  $23 = $node;
  $24 = (FUNCTION_TABLE_iiii[$20 & 127]($21,$22,$23)|0);
  $err = $24;
  $25 = $err;
  $26 = ($25|0)!=(0);
  if ($26) {
   label = 7;
   break;
  }
  $next = 0;
  $28 = $node;
  $29 = (($28) + 48|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = ($30<<16>>16)!=(0);
  if ($31) {
   $32 = $node;
   $33 = (($32) + 48|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $next = $35;
  } else {
   $36 = $node;
   $37 = (($36) + 44|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = ($38<<16>>16)!=(0);
   if ($39) {
    $40 = $3;
    $41 = $4;
    $42 = $1;
    $43 = $node;
    $44 = (FUNCTION_TABLE_iiii[$40 & 127]($41,$42,$43)|0);
    $err = $44;
    $45 = $err;
    $46 = ($45|0)!=(0);
    if ($46) {
     label = 12;
     break;
    }
    $48 = $node;
    $49 = (($48) + 44|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50&65535;
    $next = $51;
   } else {
    $52 = $3;
    $53 = $4;
    $54 = $1;
    $55 = $node;
    $56 = (FUNCTION_TABLE_iiii[$52 & 127]($53,$54,$55)|0);
    $err = $56;
    $57 = $err;
    $58 = ($57|0)!=(0);
    if ($58) {
     label = 15;
     break;
    }
    while(1) {
     $60 = $parent;
     $61 = ($60|0)!=(0|0);
     if (!($61)) {
      break;
     }
     $62 = $3;
     $63 = $4;
     $64 = $1;
     $65 = $parent;
     $66 = (FUNCTION_TABLE_iiii[$62 & 127]($63,$64,$65)|0);
     $err = $66;
     $67 = $err;
     $68 = ($67|0)!=(0);
     if ($68) {
      label = 19;
      break L5;
     }
     $70 = $parent;
     $71 = (($70) + 44|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = ($72<<16>>16)!=(0);
     if ($73) {
      label = 21;
      break;
     }
     $78 = $1;
     $79 = $parent;
     $80 = (($79) + 50|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = (_pn_data_node($78,$81)|0);
     $parent = $82;
    }
    if ((label|0) == 21) {
     label = 0;
     $74 = $parent;
     $75 = (($74) + 44|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = $76&65535;
     $next = $77;
    }
   }
  }
  $83 = $1;
  $84 = $next;
  $85 = $84&65535;
  $86 = (_pn_data_node($83,$85)|0);
  $node = $86;
 }
 if ((label|0) == 7) {
  $27 = $err;
  $0 = $27;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 12) {
  $47 = $err;
  $0 = $47;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 15) {
  $59 = $err;
  $0 = $59;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 19) {
  $69 = $err;
  $0 = $69;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 27) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 return (0)|0;
}
function _pn_data_type($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _pni_data_parent_type($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = $1;
 $4 = (($3) + 28|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (_pn_data_node($2,$5)|0);
 $node = $6;
 $7 = $node;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $node;
  $10 = (($9) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_data_siblings($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = $1;
 $4 = (($3) + 28|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (_pn_data_node($2,$5)|0);
 $node = $6;
 $7 = $node;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $node;
  $10 = (($9) + 52|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _pn_data_add($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $current = 0, $node = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_current($1)|0);
 $current = $2;
 $3 = $0;
 $4 = $0;
 $5 = (($4) + 28|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = (_pn_data_node($3,$6)|0);
 $parent = $7;
 $8 = $current;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $current;
  $11 = (($10) + 44|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)!=(0);
  if ($13) {
   $14 = $0;
   $15 = $current;
   $16 = (($15) + 44|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = (_pn_data_node($14,$17)|0);
   $node = $18;
  } else {
   $19 = $0;
   $20 = (_pn_data_new($19)|0);
   $node = $20;
   $21 = $0;
   $22 = (_pn_data_current($21)|0);
   $current = $22;
   $23 = $0;
   $24 = $0;
   $25 = (($24) + 28|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = (_pn_data_node($23,$26)|0);
   $parent = $27;
   $28 = $0;
   $29 = (($28) + 30|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $node;
   $32 = (($31) + 46|0);
   HEAP16[$32>>1] = $30;
   $33 = $0;
   $34 = $node;
   $35 = (_pn_data_id($33,$34)|0);
   $36 = $35&65535;
   $37 = $current;
   $38 = (($37) + 44|0);
   HEAP16[$38>>1] = $36;
   $39 = $0;
   $40 = (($39) + 28|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $node;
   $43 = (($42) + 50|0);
   HEAP16[$43>>1] = $41;
   $44 = $parent;
   $45 = ($44|0)!=(0|0);
   if ($45) {
    $46 = $parent;
    $47 = (($46) + 48|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = ($48<<16>>16)!=(0);
    if (!($49)) {
     $50 = $0;
     $51 = $node;
     $52 = (_pn_data_id($50,$51)|0);
     $53 = $52&65535;
     $54 = $parent;
     $55 = (($54) + 48|0);
     HEAP16[$55>>1] = $53;
    }
    $56 = $parent;
    $57 = (($56) + 52|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = (($58) + 1)<<16>>16;
    HEAP16[$57>>1] = $59;
   }
  }
  $107 = $node;
  $108 = (($107) + 48|0);
  HEAP16[$108>>1] = 0;
  $109 = $node;
  $110 = (($109) + 52|0);
  HEAP16[$110>>1] = 0;
  $111 = $node;
  $112 = (($111) + 55|0);
  HEAP8[$112>>0] = 0;
  $113 = $node;
  $114 = (($113) + 4|0);
  HEAP32[$114>>2] = 0;
  $115 = $node;
  $116 = (($115) + 8|0);
  HEAP32[$116>>2] = 0;
  $117 = $0;
  $118 = $node;
  $119 = (_pn_data_id($117,$118)|0);
  $120 = $119&65535;
  $121 = $0;
  $122 = (($121) + 30|0);
  HEAP16[$122>>1] = $120;
  $123 = $node;
  STACKTOP = sp;return ($123|0);
 }
 $60 = $parent;
 $61 = ($60|0)!=(0|0);
 if ($61) {
  $62 = $parent;
  $63 = (($62) + 48|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = ($64<<16>>16)!=(0);
  if ($65) {
   $66 = $0;
   $67 = $parent;
   $68 = (($67) + 48|0);
   $69 = HEAP16[$68>>1]|0;
   $70 = (_pn_data_node($66,$69)|0);
   $node = $70;
  } else {
   $71 = $0;
   $72 = (_pn_data_new($71)|0);
   $node = $72;
   $73 = $0;
   $74 = $0;
   $75 = (($74) + 28|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = (_pn_data_node($73,$76)|0);
   $parent = $77;
   $78 = $node;
   $79 = (($78) + 46|0);
   HEAP16[$79>>1] = 0;
   $80 = $0;
   $81 = (($80) + 28|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $node;
   $84 = (($83) + 50|0);
   HEAP16[$84>>1] = $82;
   $85 = $0;
   $86 = $node;
   $87 = (_pn_data_id($85,$86)|0);
   $88 = $87&65535;
   $89 = $parent;
   $90 = (($89) + 48|0);
   HEAP16[$90>>1] = $88;
   $91 = $parent;
   $92 = (($91) + 52|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = (($93) + 1)<<16>>16;
   HEAP16[$92>>1] = $94;
  }
 } else {
  $95 = $0;
  $96 = (($95) + 26|0);
  $97 = HEAP16[$96>>1]|0;
  $98 = ($97<<16>>16)!=(0);
  if ($98) {
   $99 = $0;
   $100 = (_pn_data_node($99,1)|0);
   $node = $100;
  } else {
   $101 = $0;
   $102 = (_pn_data_new($101)|0);
   $node = $102;
   $103 = $node;
   $104 = (($103) + 46|0);
   HEAP16[$104>>1] = 0;
   $105 = $node;
   $106 = (($105) + 50|0);
   HEAP16[$106>>1] = 0;
  }
 }
 $107 = $node;
 $108 = (($107) + 48|0);
 HEAP16[$108>>1] = 0;
 $109 = $node;
 $110 = (($109) + 52|0);
 HEAP16[$110>>1] = 0;
 $111 = $node;
 $112 = (($111) + 55|0);
 HEAP8[$112>>0] = 0;
 $113 = $node;
 $114 = (($113) + 4|0);
 HEAP32[$114>>2] = 0;
 $115 = $node;
 $116 = (($115) + 8|0);
 HEAP32[$116>>2] = 0;
 $117 = $0;
 $118 = $node;
 $119 = (_pn_data_id($117,$118)|0);
 $120 = $119&65535;
 $121 = $0;
 $122 = (($121) + 30|0);
 HEAP16[$122>>1] = $120;
 $123 = $node;
 STACKTOP = sp;return ($123|0);
}
function _pn_data_encode($data,$bytes,$size) {
 $data = $data|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $bytes;
 $2 = $size;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = (_pn_encoder_encode($5,$6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _pn_data_decode($data,$bytes,$size) {
 $data = $data|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $bytes;
 $2 = $size;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $2;
 $8 = $0;
 $9 = (_pn_decoder_decode($5,$6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _pni_data_set_array_type($data,$type) {
 $data = $data|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $array = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $type;
 $2 = $0;
 $3 = (_pn_data_current($2)|0);
 $array = $3;
 $4 = $array;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = $array;
 $8 = (($7) + 40|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _pn_data_put_char($data,$c) {
 $data = $data|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $c;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 9;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_decimal32($data,$d) {
 $data = $data|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $d;
 $2 = $0;
 $3 = (_pn_data_add($2)|0);
 $node = $3;
 $4 = $node;
 $5 = (($4) + 16|0);
 HEAP32[$5>>2] = 15;
 $6 = $1;
 $7 = $node;
 $8 = (($7) + 16|0);
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return 0;
}
function _pn_data_put_decimal64($data,$0,$1) {
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $data;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (_pn_data_add($8)|0);
 $node = $9;
 $10 = $node;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = 16;
 $12 = $3;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $node;
 $19 = (($18) + 16|0);
 $20 = (($19) + 8|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $14;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 STACKTOP = sp;return 0;
}
function _pn_data_put_decimal128($data,$d) {
 $data = $data|0;
 $d = $d|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 17;
 $5 = $node;
 $6 = (($5) + 16|0);
 $7 = (($6) + 8|0);
 _memmove(($7|0),($d|0),16)|0;
 STACKTOP = sp;return 0;
}
function _pn_data_put_uuid($data,$u) {
 $data = $data|0;
 $u = $u|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_add($1)|0);
 $node = $2;
 $3 = $node;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 18;
 $5 = $node;
 $6 = (($5) + 16|0);
 $7 = (($6) + 8|0);
 _memmove(($7|0),($u|0),16)|0;
 STACKTOP = sp;return 0;
}
function _pn_data_get_list($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(24);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 52|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_is_array_described($data) {
 $data = $data|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(23);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 54|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&1;
   $$expand_i1_val = $13&1;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $14 = $$pre_trunc&1;
   STACKTOP = sp;return ($14|0);
  }
 }
 $$expand_i1_val2 = 0;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $14 = $$pre_trunc&1;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_array_type($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(23);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 40|0);
   $12 = HEAP32[$11>>2]|0;
   $0 = $12;
   $13 = $0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $0 = -1;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _pn_data_get_decimal32($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(15);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_data_get_decimal64($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = $data;
 $2 = $1;
 $3 = (_pn_data_current($2)|0);
 $node = $3;
 $4 = $node;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $node;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(16);
  if ($9) {
   $10 = $node;
   $11 = (($10) + 16|0);
   $12 = (($11) + 8|0);
   $13 = $12;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   $20 = $19;
   HEAP32[$20>>2] = $15;
   $21 = (($19) + 4)|0;
   $22 = $21;
   HEAP32[$22>>2] = $18;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $23 = $0;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
 }
 $27 = $0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 tempRet0 = $32;
 STACKTOP = sp;return ($29|0);
}
function _pn_data_get_decimal128($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $t = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_current($1)|0);
 $node = $2;
 $3 = $node;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $node;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(17);
  if ($8) {
   $9 = $node;
   $10 = (($9) + 16|0);
   $11 = (($10) + 8|0);
   dest=$agg$result+0|0; src=$11+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
 }
 dest=$t+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$agg$result+0|0; src=$t+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _pn_data_get_uuid($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $t = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 $0 = $data;
 $1 = $0;
 $2 = (_pn_data_current($1)|0);
 $node = $2;
 $3 = $node;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $node;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(18);
  if ($8) {
   $9 = $node;
   $10 = (($9) + 16|0);
   $11 = (($10) + 8|0);
   dest=$agg$result+0|0; src=$11+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
 }
 dest=$t+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$agg$result+0|0; src=$t+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _pn_data_copy($data,$src) {
 $data = $data|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $src;
 $2 = $0;
 _pn_data_clear($2);
 $3 = $0;
 $4 = $1;
 $5 = (_pn_data_append($3,$4)|0);
 $err = $5;
 $6 = $0;
 _pn_data_rewind($6);
 $7 = $err;
 STACKTOP = sp;return ($7|0);
}
function _pn_data_append($data,$src) {
 $data = $data|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $src;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_data_appendn($2,$3,-1)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_decoder() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pn_class_new(5736,16)|0);
 STACKTOP = sp;return ($0|0);
}
function _pn_decoder_decode_value($decoder,$data,$code) {
 $decoder = $decoder|0;
 $data = $data|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acode = 0, $bytes = 0, $bytes$byval_copy = 0, $bytes$byval_copy1 = 0, $bytes$byval_copy2 = 0, $conv = 0, $count = 0, $dec128 = 0, $dec128$byval_copy = 0, $described = 0;
 var $e = 0, $e2 = 0, $err = 0, $i = 0, $i1 = 0, $next = 0, $size = 0, $start = 0, $type = 0, $uuid = 0, $uuid$byval_copy = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes$byval_copy2 = sp + 88|0;
 $bytes$byval_copy1 = sp + 80|0;
 $bytes$byval_copy = sp + 72|0;
 $uuid$byval_copy = sp + 160|0;
 $dec128$byval_copy = sp + 144|0;
 $vararg_buffer = sp + 8|0;
 $conv = sp;
 $dec128 = sp + 120|0;
 $uuid = sp + 104|0;
 $bytes = sp + 32|0;
 $acode = sp + 96|0;
 $1 = $decoder;
 $2 = $data;
 $3 = $code;
 $4 = $3;
 $5 = $4&255;
 L1: do {
  switch ($5|0) {
  case 64:  {
   $6 = $2;
   $7 = (_pn_data_put_null($6)|0);
   $err = $7;
   break;
  }
  case 86:  {
   $12 = $1;
   $13 = (_pn_decoder_remaining($12)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $2;
    $16 = $1;
    $17 = (_pn_decoder_readf8($16)|0);
    $18 = $17&255;
    $19 = ($18|0)!=(0);
    $20 = (_pn_data_put_bool($15,$19)|0);
    $err = $20;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 116:  {
   $96 = $1;
   $97 = (_pn_decoder_remaining($96)|0);
   $98 = ($97>>>0)<(4);
   if (!($98)) {
    $99 = $2;
    $100 = $1;
    $101 = (_pn_decoder_readf32($100)|0);
    $102 = (_pn_data_put_decimal32($99,$101)|0);
    $err = $102;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 66:  {
   $10 = $2;
   $11 = (_pn_data_put_bool($10,0)|0);
   $err = $11;
   break;
  }
  case 112:  {
   $49 = $1;
   $50 = (_pn_decoder_remaining($49)|0);
   $51 = ($50>>>0)<(4);
   if (!($51)) {
    $52 = $2;
    $53 = $1;
    $54 = (_pn_decoder_readf32($53)|0);
    $55 = (_pn_data_put_uint($52,$54)|0);
    $err = $55;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 84:  {
   $66 = $1;
   $67 = (_pn_decoder_remaining($66)|0);
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $2;
    $70 = $1;
    $71 = (_pn_decoder_readf8($70)|0);
    $72 = $71 << 24 >> 24;
    $73 = (_pn_data_put_int($69,$72)|0);
    $err = $73;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 113:  {
   $74 = $1;
   $75 = (_pn_decoder_remaining($74)|0);
   $76 = ($75>>>0)<(4);
   if (!($76)) {
    $77 = $2;
    $78 = $1;
    $79 = (_pn_decoder_readf32($78)|0);
    $80 = (_pn_data_put_int($77,$79)|0);
    $err = $80;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 129:  {
   $111 = $1;
   $112 = (_pn_decoder_remaining($111)|0);
   $113 = ($112>>>0)<(8);
   if (!($113)) {
    $114 = $2;
    $115 = $1;
    $116 = (_pn_decoder_readf64($115)|0);
    $117 = tempRet0;
    $118 = (_pn_data_put_long($114,$116,$117)|0);
    $err = $118;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 82:  {
   $58 = $1;
   $59 = (_pn_decoder_remaining($58)|0);
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $2;
    $62 = $1;
    $63 = (_pn_decoder_readf8($62)|0);
    $64 = $63&255;
    $65 = (_pn_data_put_uint($61,$64)|0);
    $err = $65;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 148:  {
   $168 = $1;
   $169 = (_pn_decoder_remaining($168)|0);
   $170 = ($169>>>0)<(16);
   if (!($170)) {
    $171 = $1;
    _pn_decoder_readf128($171,$dec128);
    $172 = $2;
    dest=$dec128$byval_copy+0|0; src=$dec128+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $173 = (_pn_data_put_decimal128($172,$dec128$byval_copy)|0);
    $err = $173;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 152:  {
   $174 = $1;
   $175 = (_pn_decoder_remaining($174)|0);
   $176 = ($175>>>0)<(16);
   if (!($176)) {
    $177 = $1;
    _pn_decoder_readf128($177,$uuid);
    $178 = $2;
    dest=$uuid$byval_copy+0|0; src=$uuid+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $179 = (_pn_data_put_uuid($178,$uuid$byval_copy)|0);
    $err = $179;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 179: case 177: case 176: case 163: case 161: case 160:  {
   $180 = $3;
   $181 = $180&255;
   $182 = $181 & 240;
   do {
    if ((($182|0) == 160)) {
     $183 = $1;
     $184 = (_pn_decoder_remaining($183)|0);
     $185 = ($184|0)!=(0);
     if ($185) {
      $186 = $1;
      $187 = (_pn_decoder_readf8($186)|0);
      $188 = $187&255;
      $size = $188;
      break;
     }
     $0 = -4;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
    } else if ((($182|0) == 176)) {
     $189 = $1;
     $190 = (_pn_decoder_remaining($189)|0);
     $191 = ($190>>>0)<(4);
     if (!($191)) {
      $192 = $1;
      $193 = (_pn_decoder_readf32($192)|0);
      $size = $193;
      break;
     }
     $0 = -4;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
    } else {
     $0 = -6;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
    }
   } while(0);
   $194 = $1;
   $195 = (_pn_decoder_remaining($194)|0);
   $196 = $size;
   $197 = ($195>>>0)<($196>>>0);
   if ($197) {
    $0 = -4;
    $309 = $0;
    STACKTOP = sp;return ($309|0);
   }
   $198 = $1;
   $199 = (($198) + 8|0);
   $200 = HEAP32[$199>>2]|0;
   $start = $200;
   $201 = $size;
   HEAP32[$bytes>>2] = $201;
   $202 = (($bytes) + 4|0);
   $203 = $start;
   HEAP32[$202>>2] = $203;
   $204 = $3;
   $205 = $204&255;
   $206 = $205 & 15;
   if ((($206|0) == 0)) {
    $207 = $2;
    ;HEAP32[$bytes$byval_copy+0>>2]=HEAP32[$bytes+0>>2]|0;HEAP32[$bytes$byval_copy+4>>2]=HEAP32[$bytes+4>>2]|0;
    $208 = (_pn_data_put_binary($207,$bytes$byval_copy)|0);
    $err = $208;
   } else if ((($206|0) == 1)) {
    $209 = $2;
    ;HEAP32[$bytes$byval_copy1+0>>2]=HEAP32[$bytes+0>>2]|0;HEAP32[$bytes$byval_copy1+4>>2]=HEAP32[$bytes+4>>2]|0;
    $210 = (_pn_data_put_string($209,$bytes$byval_copy1)|0);
    $err = $210;
   } else if ((($206|0) == 3)) {
    $211 = $2;
    ;HEAP32[$bytes$byval_copy2+0>>2]=HEAP32[$bytes+0>>2]|0;HEAP32[$bytes$byval_copy2+4>>2]=HEAP32[$bytes+4>>2]|0;
    $212 = (_pn_data_put_symbol($211,$bytes$byval_copy2)|0);
    $err = $212;
   } else {
    $0 = -6;
    $309 = $0;
    STACKTOP = sp;return ($309|0);
   }
   $213 = $size;
   $214 = $1;
   $215 = (($214) + 8|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + ($213)|0);
   HEAP32[$215>>2] = $217;
   break;
  }
  case 209: case 193: case 208: case 192: case 240: case 224:  {
   $220 = $3;
   $221 = $220&255;
   L76: do {
    switch ($221|0) {
    case 193: case 192: case 224:  {
     $222 = $1;
     $223 = (_pn_decoder_remaining($222)|0);
     $224 = ($223>>>0)<(2);
     if (!($224)) {
      $225 = $1;
      $226 = (_pn_decoder_readf8($225)|0);
      $227 = $226&255;
      $size = $227;
      $228 = $1;
      $229 = (_pn_decoder_readf8($228)|0);
      $230 = $229&255;
      $count = $230;
      break L76;
     }
     $0 = -4;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
     break;
    }
    case 209: case 208: case 240:  {
     $231 = $1;
     $232 = (_pn_decoder_readf32($231)|0);
     $size = $232;
     $233 = $1;
     $234 = (_pn_decoder_readf32($233)|0);
     $count = $234;
     break;
    }
    default: {
     $0 = -6;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
    }
    }
   } while(0);
   $235 = $3;
   $236 = $235&255;
   L86: do {
    switch ($236|0) {
    case 240: case 224:  {
     $237 = $1;
     $238 = (($237) + 8|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = HEAP8[$239>>0]|0;
     $next = $240;
     $241 = $next;
     $242 = $241&255;
     $243 = ($242|0)==(0);
     $244 = $243&1;
     $described = $244;
     $245 = $2;
     $246 = $described;
     $247 = $246&1;
     $248 = (_pn_data_put_array($245,$247,0)|0);
     $err = $248;
     $249 = $err;
     $250 = ($249|0)!=(0);
     if ($250) {
      $251 = $err;
      $0 = $251;
      $309 = $0;
      STACKTOP = sp;return ($309|0);
     }
     $252 = $2;
     (_pn_data_enter($252)|0);
     $253 = $1;
     $254 = $2;
     $255 = (_pn_decoder_decode_type($253,$254,$acode)|0);
     $e = $255;
     $256 = $e;
     $257 = ($256|0)!=(0);
     if ($257) {
      $258 = $e;
      $0 = $258;
      $309 = $0;
      STACKTOP = sp;return ($309|0);
     }
     $259 = HEAP8[$acode>>0]|0;
     $260 = (_pn_code2type($259)|0);
     $type = $260;
     $261 = $type;
     $262 = ($261|0)<(0);
     if ($262) {
      $263 = $type;
      $0 = $263;
      $309 = $0;
      STACKTOP = sp;return ($309|0);
     }
     $i = 0;
     while(1) {
      $264 = $i;
      $265 = $count;
      $266 = ($264>>>0)<($265>>>0);
      if (!($266)) {
       label = 106;
       break;
      }
      $267 = $1;
      $268 = $2;
      $269 = HEAP8[$acode>>0]|0;
      $270 = (_pn_decoder_decode_value($267,$268,$269)|0);
      $e = $270;
      $271 = $e;
      $272 = ($271|0)!=(0);
      if ($272) {
       label = 103;
       break;
      }
      $274 = $i;
      $275 = (($274) + 1)|0;
      $i = $275;
     }
     if ((label|0) == 103) {
      $273 = $e;
      $0 = $273;
      $309 = $0;
      STACKTOP = sp;return ($309|0);
     }
     else if ((label|0) == 106) {
      $276 = $2;
      (_pn_data_exit($276)|0);
      $277 = $2;
      $278 = $type;
      _pni_data_set_array_type($277,$278);
      $0 = 0;
      $309 = $0;
      STACKTOP = sp;return ($309|0);
     }
     break;
    }
    case 209: case 193:  {
     $284 = $2;
     $285 = (_pn_data_put_map($284)|0);
     $err = $285;
     $286 = $err;
     $287 = ($286|0)!=(0);
     if (!($287)) {
      break L86;
     }
     $288 = $err;
     $0 = $288;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
     break;
    }
    case 208: case 192:  {
     $279 = $2;
     $280 = (_pn_data_put_list($279)|0);
     $err = $280;
     $281 = $err;
     $282 = ($281|0)!=(0);
     if (!($282)) {
      break L86;
     }
     $283 = $err;
     $0 = $283;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
     break;
    }
    default: {
     $0 = -6;
     $309 = $0;
     STACKTOP = sp;return ($309|0);
    }
    }
   } while(0);
   $289 = $2;
   (_pn_data_enter($289)|0);
   $i1 = 0;
   while(1) {
    $290 = $i1;
    $291 = $count;
    $292 = ($290>>>0)<($291>>>0);
    if (!($292)) {
     label = 120;
     break;
    }
    $293 = $1;
    $294 = $2;
    $295 = (_pn_decoder_single($293,$294)|0);
    $e2 = $295;
    $296 = $e2;
    $297 = ($296|0)!=(0);
    if ($297) {
     label = 117;
     break;
    }
    $299 = $i1;
    $300 = (($299) + 1)|0;
    $i1 = $300;
   }
   if ((label|0) == 117) {
    $298 = $e2;
    $0 = $298;
    $309 = $0;
    STACKTOP = sp;return ($309|0);
   }
   else if ((label|0) == 120) {
    $301 = $2;
    (_pn_data_exit($301)|0);
    $0 = 0;
    $309 = $0;
    STACKTOP = sp;return ($309|0);
   }
   break;
  }
  case 69:  {
   $218 = $2;
   $219 = (_pn_data_put_list($218)|0);
   $err = $219;
   break;
  }
  case 97:  {
   $42 = $1;
   $43 = (_pn_decoder_remaining($42)|0);
   $44 = ($43>>>0)<(2);
   if (!($44)) {
    $45 = $2;
    $46 = $1;
    $47 = (_pn_decoder_readf16($46)|0);
    $48 = (_pn_data_put_short($45,$47)|0);
    $err = $48;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 80:  {
   $21 = $1;
   $22 = (_pn_decoder_remaining($21)|0);
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $2;
    $25 = $1;
    $26 = (_pn_decoder_readf8($25)|0);
    $27 = (_pn_data_put_ubyte($24,$26)|0);
    $err = $27;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 132:  {
   $140 = $1;
   $141 = (_pn_decoder_remaining($140)|0);
   $142 = ($141>>>0)<(8);
   if (!($142)) {
    $143 = $2;
    $144 = $1;
    $145 = (_pn_decoder_readf64($144)|0);
    $146 = tempRet0;
    $147 = (_pn_data_put_decimal64($143,$145,$146)|0);
    $err = $147;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 68:  {
   $148 = $2;
   $149 = (_pn_data_put_ulong($148,0,0)|0);
   $err = $149;
   break;
  }
  case 83:  {
   $150 = $1;
   $151 = (_pn_decoder_remaining($150)|0);
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $2;
    $154 = $1;
    $155 = (_pn_decoder_readf8($154)|0);
    $156 = $155&255;
    $157 = (_pn_data_put_ulong($153,$156,0)|0);
    $err = $157;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 85:  {
   $158 = $1;
   $159 = (_pn_decoder_remaining($158)|0);
   $160 = ($159|0)!=(0);
   if ($160) {
    $161 = $2;
    $162 = $1;
    $163 = (_pn_decoder_readf8($162)|0);
    $164 = $163 << 24 >> 24;
    $165 = ($164|0)<(0);
    $166 = $165 << 31 >> 31;
    $167 = (_pn_data_put_long($161,$164,$166)|0);
    $err = $167;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 65:  {
   $8 = $2;
   $9 = (_pn_data_put_bool($8,1)|0);
   $err = $9;
   break;
  }
  case 131:  {
   $119 = $1;
   $120 = (_pn_decoder_remaining($119)|0);
   $121 = ($120>>>0)<(8);
   if (!($121)) {
    $122 = $2;
    $123 = $1;
    $124 = (_pn_decoder_readf64($123)|0);
    $125 = tempRet0;
    $126 = (_pn_data_put_timestamp($122,$124,$125)|0);
    $err = $126;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 130:  {
   $127 = $1;
   $128 = (_pn_decoder_remaining($127)|0);
   $129 = ($128>>>0)<(8);
   if (!($129)) {
    $130 = $1;
    $131 = (_pn_decoder_readf64($130)|0);
    $132 = tempRet0;
    $133 = $conv;
    $134 = $133;
    HEAP32[$134>>2] = $131;
    $135 = (($133) + 4)|0;
    $136 = $135;
    HEAP32[$136>>2] = $132;
    $137 = $2;
    $138 = +HEAPF64[$conv>>3];
    $139 = (_pn_data_put_double($137,$138)|0);
    $err = $139;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 81:  {
   $28 = $1;
   $29 = (_pn_decoder_remaining($28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $2;
    $32 = $1;
    $33 = (_pn_decoder_readf8($32)|0);
    $34 = (_pn_data_put_byte($31,$33)|0);
    $err = $34;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 128:  {
   $103 = $1;
   $104 = (_pn_decoder_remaining($103)|0);
   $105 = ($104>>>0)<(8);
   if (!($105)) {
    $106 = $2;
    $107 = $1;
    $108 = (_pn_decoder_readf64($107)|0);
    $109 = tempRet0;
    $110 = (_pn_data_put_ulong($106,$108,$109)|0);
    $err = $110;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 115:  {
   $81 = $1;
   $82 = (_pn_decoder_remaining($81)|0);
   $83 = ($82>>>0)<(4);
   if (!($83)) {
    $84 = $2;
    $85 = $1;
    $86 = (_pn_decoder_readf32($85)|0);
    $87 = (_pn_data_put_char($84,$86)|0);
    $err = $87;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 67:  {
   $56 = $2;
   $57 = (_pn_data_put_uint($56,0)|0);
   $err = $57;
   break;
  }
  case 114:  {
   $88 = $1;
   $89 = (_pn_decoder_remaining($88)|0);
   $90 = ($89>>>0)<(4);
   if (!($90)) {
    $91 = $1;
    $92 = (_pn_decoder_readf32($91)|0);
    HEAP32[$conv>>2] = $92;
    $93 = $2;
    $94 = +HEAPF32[$conv>>2];
    $95 = (_pn_data_put_float($93,$94)|0);
    $err = $95;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  case 96:  {
   $35 = $1;
   $36 = (_pn_decoder_remaining($35)|0);
   $37 = ($36>>>0)<(2);
   if (!($37)) {
    $38 = $2;
    $39 = $1;
    $40 = (_pn_decoder_readf16($39)|0);
    $41 = (_pn_data_put_ushort($38,$40)|0);
    $err = $41;
    break L1;
   }
   $0 = -4;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
   break;
  }
  default: {
   $302 = $1;
   $303 = (($302) + 12|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $3;
   $306 = $305&255;
   HEAP32[$vararg_buffer>>2] = $306;
   $307 = (_pn_error_format($304,-6,5808,$vararg_buffer)|0);
   $0 = $307;
   $309 = $0;
   STACKTOP = sp;return ($309|0);
  }
  }
 } while(0);
 $308 = $err;
 $0 = $308;
 $309 = $0;
 STACKTOP = sp;return ($309|0);
}
function _pn_decoder_decode_type($decoder,$data,$code) {
 $decoder = $decoder|0;
 $data = $data|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $decoder;
 $2 = $data;
 $3 = $code;
 $4 = $1;
 $5 = (_pn_decoder_remaining($4)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $0 = -4;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1|0);
 HEAP32[$8>>2] = $10;
 $11 = HEAP8[$9>>0]|0;
 $next = $11;
 $12 = $next;
 $13 = $12&255;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $15 = $2;
   $16 = (_pni_data_parent_type($15)|0);
   $17 = ($16|0)!=(23);
   do {
    if ($17) {
     $18 = $2;
     $19 = (_pn_data_put_described($18)|0);
     $err = $19;
     $20 = $err;
     $21 = ($20|0)!=(0);
     if (!($21)) {
      $23 = $2;
      (_pn_data_enter($23)|0);
      break;
     }
     $22 = $err;
     $0 = $22;
     $39 = $0;
     STACKTOP = sp;return ($39|0);
    }
   } while(0);
   $24 = $1;
   $25 = $2;
   $26 = (_pn_decoder_single($24,$25)|0);
   $err = $26;
   $27 = $err;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $err;
    $0 = $29;
    $39 = $0;
    STACKTOP = sp;return ($39|0);
   }
   $30 = $1;
   $31 = $2;
   $32 = $3;
   $33 = (_pn_decoder_decode_type($30,$31,$32)|0);
   $err = $33;
   $34 = $err;
   $35 = ($34|0)!=(0);
   if (!($35)) {
    break;
   }
   $36 = $err;
   $0 = $36;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  } else {
   $37 = $next;
   $38 = $3;
   HEAP8[$38>>0] = $37;
  }
 } while(0);
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _pn_decoder_single($decoder,$data) {
 $decoder = $decoder|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $code = sp + 16|0;
 $1 = $decoder;
 $2 = $data;
 $3 = $1;
 $4 = $2;
 $5 = (_pn_decoder_decode_type($3,$4,$code)|0);
 $err = $5;
 $6 = $err;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $err;
  $0 = $8;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $9 = $1;
 $10 = $2;
 $11 = HEAP8[$code>>0]|0;
 $12 = (_pn_decoder_decode_value($9,$10,$11)|0);
 $err = $12;
 $13 = $err;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $err;
  $0 = $15;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $16 = $2;
 $17 = (_pni_data_parent_type($16)|0);
 $18 = ($17|0)==(22);
 if ($18) {
  $19 = $2;
  $20 = (_pn_data_siblings($19)|0);
  $21 = ($20>>>0)>(1);
  if ($21) {
   $22 = $2;
   (_pn_data_exit($22)|0);
  }
 }
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _pn_decoder_decode($decoder,$src,$size,$dst) {
 $decoder = $decoder|0;
 $src = $src|0;
 $size = $size|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $decoder;
 $2 = $src;
 $3 = $size;
 $4 = $dst;
 $5 = $2;
 $6 = $1;
 HEAP32[$6>>2] = $5;
 $7 = $3;
 $8 = $1;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $2;
 $11 = $1;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = $4;
 $15 = (_pn_decoder_single($13,$14)|0);
 $err = $15;
 $16 = $err;
 $17 = ($16|0)==(-4);
 if ($17) {
  $18 = $4;
  $19 = (_pn_data_error($18)|0);
  $20 = (_pn_error_format($19,-4,5840,$vararg_buffer)|0);
  $0 = $20;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $21 = $err;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $err;
  $0 = $23;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $24 = $1;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = HEAP32[$27>>2]|0;
  $29 = $26;
  $30 = $28;
  $31 = (($29) - ($30))|0;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _pn_encoder() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pn_class_new(5872,16)|0);
 STACKTOP = sp;return ($0|0);
}
function _pn_encoder_encode($encoder,$src,$dst,$size) {
 $encoder = $encoder|0;
 $src = $src|0;
 $dst = $dst|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encoded = 0, $err = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $encoder;
 $2 = $src;
 $3 = $dst;
 $4 = $size;
 $5 = $3;
 $6 = $1;
 HEAP32[$6>>2] = $5;
 $7 = $3;
 $8 = $1;
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = $4;
 $11 = $1;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = $1;
 $15 = (_pni_data_traverse($13,94,95,$14)|0);
 $err = $15;
 $16 = $err;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $err;
  $0 = $18;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $19 = $1;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = $21;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $encoded = $26;
 $27 = $encoded;
 $28 = $4;
 $29 = ($27>>>0)>($28>>>0);
 if ($29) {
  $30 = $2;
  $31 = (_pn_data_error($30)|0);
  (_pn_error_format($31,-3,5944,$vararg_buffer)|0);
  $0 = -3;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $32 = $encoded;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _pni_bad_frame($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $frame_type;
 $2 = $channel;
 $3 = $args;
 $4 = $payload;
 $5 = $0;
 $6 = $1;
 $7 = $6&255;
 HEAP32[$vararg_buffer>>2] = $7;
 _pn_transport_logf($5,6032,$vararg_buffer);
 STACKTOP = sp;return -2;
}
function _pni_bad_frame_type($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $frame_type;
 $2 = $channel;
 $3 = $args;
 $4 = $payload;
 $5 = $0;
 $6 = $1;
 $7 = $6&255;
 HEAP32[$vararg_buffer>>2] = $7;
 _pn_transport_logf($5,6088,$vararg_buffer);
 STACKTOP = sp;return -2;
}
function _pn_dispatcher_input($transport,$bytes,$available,$batch,$halt) {
 $transport = $transport|0;
 $bytes = $bytes|0;
 $available = $available|0;
 $batch = $batch|0;
 $halt = $halt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $frame = 0, $frame$byval_copy = 0, $n = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $frame$byval_copy = sp + 52|0;
 $frame = sp + 8|0;
 $1 = $transport;
 $2 = $bytes;
 $3 = $available;
 $6 = $batch&1;
 $4 = $6;
 $5 = $halt;
 $read = 0;
 while(1) {
  $7 = $3;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $5;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   $12 = $11 ^ 1;
   $52 = $12;
  } else {
   $52 = 0;
  }
  if (!($52)) {
   break;
  }
  $13 = $2;
  $14 = $read;
  $15 = (($13) + ($14)|0);
  $16 = $3;
  $17 = (_pn_read_frame($frame,$15,$16)|0);
  $n = $17;
  $18 = $n;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   label = 9;
   break;
  }
  $20 = $n;
  $21 = $read;
  $22 = (($21) + ($20))|0;
  $read = $22;
  $23 = $n;
  $24 = $3;
  $25 = (($24) - ($23))|0;
  $3 = $25;
  $26 = $1;
  $27 = (($26) + 192|0);
  $28 = $27;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + 4)|0;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_i64Add(($30|0),($33|0),1,0)|0);
  $35 = tempRet0;
  $36 = $27;
  $37 = $36;
  HEAP32[$37>>2] = $34;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = $35;
  $40 = $1;
  $41 = $1;
  $42 = (($41) + 140|0);
  $43 = HEAP32[$42>>2]|0;
  ;HEAP32[$frame$byval_copy+0>>2]=HEAP32[$frame+0>>2]|0;HEAP32[$frame$byval_copy+4>>2]=HEAP32[$frame+4>>2]|0;HEAP32[$frame$byval_copy+8>>2]=HEAP32[$frame+8>>2]|0;HEAP32[$frame$byval_copy+12>>2]=HEAP32[$frame+12>>2]|0;HEAP32[$frame$byval_copy+16>>2]=HEAP32[$frame+16>>2]|0;
  $44 = (_pni_dispatch_frame($40,$43,$frame$byval_copy)|0);
  $e = $44;
  $45 = $e;
  $46 = ($45|0)!=(0);
  if ($46) {
   label = 7;
   break;
  }
  $48 = $4;
  $49 = $48&1;
  if (!($49)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 7) {
  $47 = $e;
  $0 = $47;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 9) {
 }
 else if ((label|0) == 11) {
 }
 $50 = $read;
 $0 = $50;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _pn_dispatcher_output($transport,$bytes,$size) {
 $transport = $transport|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $bytes;
 $2 = $size;
 $3 = $0;
 $4 = (($3) + 156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 156|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 } else {
  $11 = $2;
  $12 = $11;
 }
 $n = $12;
 $13 = $1;
 $14 = $0;
 $15 = (($14) + 160|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $n;
 _memmove(($13|0),($16|0),($17|0))|0;
 $18 = $0;
 $19 = (($18) + 160|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = (($21) + 160|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $n;
 $25 = (($23) + ($24)|0);
 $26 = $0;
 $27 = (($26) + 156|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $n;
 $30 = (($28) - ($29))|0;
 _memmove(($20|0),($25|0),($30|0))|0;
 $31 = $n;
 $32 = $0;
 $33 = (($32) + 156|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) - ($31))|0;
 HEAP32[$33>>2] = $35;
 $36 = $n;
 STACKTOP = sp;return ($36|0);
}
function _pn_ep_get_connection($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 3) | (($3|0) == 2)) {
  $8 = $1;
  $9 = (($8) + 256|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $0 = $12;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $0 = $4;
 } else if ((($3|0) == 1)) {
  $5 = $1;
  $6 = (($5) + 60|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
 } else {
  $0 = 0;
 }
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _pn_connection_open($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_endpoint_open($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6240|0),(6256|0),98,(6320|0));
  // unreachable;
 }
}
function _pn_connection_close($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_endpoint_close($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6240|0),(6256|0),104,(6344|0));
  // unreachable;
 }
}
function _pn_connection_release($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = (($1) + 57|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  ___assert_fail((6368|0),(6256|0),112,(6400|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = (($12) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 36|0);
  HEAP32[$15>>2] = $11;
 }
 $16 = $0;
 $17 = (($16) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $0;
  $21 = (($20) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (($23) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 40|0);
  HEAP32[$26>>2] = $22;
 }
 $27 = $0;
 $28 = $0;
 $29 = (($28) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)==($30|0);
 if ($31) {
  $32 = $0;
  $33 = (($32) + 36|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = (($35) + 60|0);
  HEAP32[$36>>2] = $34;
 }
 $37 = $0;
 $38 = $0;
 $39 = (($38) + 64|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($37|0)==($40|0);
 if ($41) {
  $42 = $0;
  $43 = (($42) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $0;
  $46 = (($45) + 64|0);
  HEAP32[$46>>2] = $44;
 }
 while(1) {
  $47 = $0;
  $48 = (($47) + 60|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  if (!($50)) {
   break;
  }
  $51 = $0;
  $52 = (($51) + 60|0);
  $53 = HEAP32[$52>>2]|0;
  $ep = $53;
  $54 = $ep;
  $55 = HEAP32[$54>>2]|0;
  if ((($55|0) == 3) | (($55|0) == 2)) {
   $57 = $ep;
   _pn_link_free($57);
  } else if ((($55|0) == 1)) {
   $56 = $ep;
   _pn_session_free($56);
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  ___assert_fail((6424|0),(6256|0),127,(6400|0));
  // unreachable;
 }
 $58 = $0;
 $59 = (($58) + 57|0);
 HEAP8[$59>>0] = 1;
 $60 = $0;
 $61 = (($60) + 84|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $66 = $0;
  _pn_ep_decref($66);
  STACKTOP = sp;return;
 }
 $64 = $0;
 _pn_ep_incref($64);
 $65 = $0;
 _pn_connection_unbound($65);
 $66 = $0;
 _pn_ep_decref($66);
 STACKTOP = sp;return;
}
function _pn_session_free($session) {
 $session = $session|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $0;
 $2 = (($1) + 57|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  ___assert_fail((6488|0),(6256|0),249,(6520|0));
  // unreachable;
 }
 while(1) {
  $5 = $0;
  $6 = (($5) + 64|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_pn_list_size($7)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = (($10) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_pn_list_get($12,0)|0);
  $link = $13;
  $14 = $link;
  _pn_link_free($14);
 }
 $15 = $0;
 $16 = (($15) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 _pn_remove_session($17,$18);
 $19 = $0;
 $20 = (($19) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 80|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 (_pn_list_add($23,$24)|0);
 $25 = $0;
 $26 = (($25) + 57|0);
 HEAP8[$26>>0] = 1;
 $27 = $0;
 _pn_ep_decref($27);
 $28 = $0;
 (_pn_incref($28)|0);
 $29 = $0;
 (_pn_decref($29)|0);
 STACKTOP = sp;return;
}
function _pn_link_free($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delivery = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 57|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  ___assert_fail((6592|0),(6256|0),330,(6616|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (($5) + 256|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 _pn_remove_link($7,$8);
 $9 = $0;
 $10 = (($9) + 256|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 (_pn_list_add($13,$14)|0);
 $15 = $0;
 $16 = (($15) + 260|0);
 $17 = HEAP32[$16>>2]|0;
 $delivery = $17;
 while(1) {
  $18 = $delivery;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   break;
  }
  $20 = $delivery;
  $21 = (($20) + 104|0);
  $22 = HEAP32[$21>>2]|0;
  $next = $22;
  $23 = $delivery;
  _pn_delivery_settle($23);
  $24 = $next;
  $delivery = $24;
 }
 $25 = $0;
 $26 = (($25) + 57|0);
 HEAP8[$26>>0] = 1;
 $27 = $0;
 _pn_ep_decref($27);
 $28 = $0;
 (_pn_incref($28)|0);
 $29 = $0;
 (_pn_decref($29)|0);
 STACKTOP = sp;return;
}
function _pn_ep_incref($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $endpoint;
 $1 = $0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function _pn_connection_unbound($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = (($1) + 84|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = (($3) + 57|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  $22 = $0;
  _pn_ep_decref($22);
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $0;
  $8 = (($7) + 68|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = $0;
  $13 = (($12) + 68|0);
  $14 = HEAP32[$13>>2]|0;
  _pn_clear_modified($11,$14);
 }
 while(1) {
  $15 = $0;
  $16 = (($15) + 96|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $0;
  $20 = (($19) + 96|0);
  $21 = HEAP32[$20>>2]|0;
  _pn_clear_tpwork($21);
 }
 $22 = $0;
 _pn_ep_decref($22);
 STACKTOP = sp;return;
}
function _pn_ep_decref($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $conn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $endpoint;
 $1 = $0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  ___assert_fail((6632|0),(6256|0),423,(6656|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (($5) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = (_pn_ep_get_connection($13)|0);
 $conn = $14;
 $15 = $conn;
 $16 = (($15) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[80>>2]|0;
 $19 = $0;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_pn_final_type($21)|0);
 (_pn_collector_put($17,$18,$19,$22)|0);
 STACKTOP = sp;return;
}
function _pn_connection_free($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 _pn_connection_release($1);
 $2 = $0;
 (_pn_decref($2)|0);
 STACKTOP = sp;return;
}
function _pn_connection_bound($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $nsessions = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = (($1) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[80>>2]|0;
 $5 = $0;
 (_pn_collector_put($3,$4,$5,6)|0);
 $6 = $0;
 _pn_ep_incref($6);
 $7 = $0;
 $8 = (($7) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_pn_list_size($9)|0);
 $nsessions = $10;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $nsessions;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = (($14) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $i;
  $18 = (_pn_list_get($16,$17)|0);
  _pn_session_bound($18);
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 STACKTOP = sp;return;
}
function _pn_session_bound($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $nlinks = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((7168|0),(6256|0),988,(7176|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_pn_list_size($5)|0);
 $nlinks = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $nlinks;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = (($10) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $i;
  $14 = (_pn_list_get($12,$13)|0);
  _pn_link_bound($14);
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _pn_clear_modified($connection,$endpoint) {
 $connection = $connection|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $endpoint;
 $2 = $1;
 $3 = (($2) + 56|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (($6) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 44|0);
  HEAP32[$16>>2] = $12;
 }
 $17 = $1;
 $18 = (($17) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $1;
  $22 = (($21) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = (($24) + 44|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 48|0);
  HEAP32[$27>>2] = $23;
 }
 $28 = $1;
 $29 = $0;
 $30 = (($29) + 68|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)==($31|0);
 if ($32) {
  $33 = $1;
  $34 = (($33) + 44|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  $37 = (($36) + 68|0);
  HEAP32[$37>>2] = $35;
 }
 $38 = $1;
 $39 = $0;
 $40 = (($39) + 72|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38|0)==($41|0);
 if ($42) {
  $43 = $1;
  $44 = (($43) + 48|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $0;
  $47 = (($46) + 72|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = $1;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = 0;
 $50 = $1;
 $51 = (($50) + 48|0);
 HEAP32[$51>>2] = 0;
 $52 = $1;
 $53 = (($52) + 56|0);
 HEAP8[$53>>0] = 0;
 STACKTOP = sp;return;
}
function _pn_clear_tpwork($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $connection = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 256|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $connection = $7;
 $8 = $0;
 $9 = (($8) + 147|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 124|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $0;
  $17 = (($16) + 120|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = (($19) + 124|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 120|0);
  HEAP32[$22>>2] = $18;
 }
 $23 = $0;
 $24 = (($23) + 120|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $0;
  $28 = (($27) + 124|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $0;
  $31 = (($30) + 120|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 124|0);
  HEAP32[$33>>2] = $29;
 }
 $34 = $0;
 $35 = $connection;
 $36 = (($35) + 96|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34|0)==($37|0);
 if ($38) {
  $39 = $0;
  $40 = (($39) + 120|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $connection;
  $43 = (($42) + 96|0);
  HEAP32[$43>>2] = $41;
 }
 $44 = $0;
 $45 = $connection;
 $46 = (($45) + 100|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($44|0)==($47|0);
 if ($48) {
  $49 = $0;
  $50 = (($49) + 124|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $connection;
  $53 = (($52) + 100|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $0;
 $55 = (($54) + 147|0);
 HEAP8[$55>>0] = 0;
 $56 = $0;
 $57 = (_pn_refcount($56)|0);
 $58 = ($57|0)>(0);
 if ($58) {
  $59 = $0;
  (_pn_incref($59)|0);
  $60 = $0;
  (_pn_decref($60)|0);
 }
 STACKTOP = sp;return;
}
function _pn_condition_init($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = (_pn_string(0)|0);
 $2 = $0;
 HEAP32[$2>>2] = $1;
 $3 = (_pn_string(0)|0);
 $4 = $0;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = (_pn_data(0)|0);
 $7 = $0;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _pn_condition_tini($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _pn_data_free($3);
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _pn_free($6);
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 _pn_free($8);
 STACKTOP = sp;return;
}
function _pn_add_session($conn,$ssn) {
 $conn = $conn|0;
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conn;
 $1 = $ssn;
 $2 = $0;
 $3 = (($2) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_pn_list_add($4,$5)|0);
 $6 = $0;
 $7 = $1;
 $8 = (($7) + 60|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 (_pn_incref($9)|0);
 $10 = $0;
 _pn_ep_incref($10);
 STACKTOP = sp;return;
}
function _pn_remove_session($conn,$ssn) {
 $conn = $conn|0;
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conn;
 $1 = $ssn;
 $2 = $0;
 $3 = (($2) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_pn_list_remove($4,$5)|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 _pn_ep_decref($7);
 $8 = $1;
 $9 = (($8) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 36|0);
  HEAP32[$18>>2] = $14;
 }
 $19 = $1;
 $20 = (($19) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = (($26) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 40|0);
  HEAP32[$29>>2] = $25;
 }
 $30 = $1;
 $31 = $0;
 $32 = (($31) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)==($33|0);
 if ($34) {
  $35 = $1;
  $36 = (($35) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $0;
  $39 = (($38) + 60|0);
  HEAP32[$39>>2] = $37;
 }
 $40 = $1;
 $41 = $0;
 $42 = (($41) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($40|0)==($43|0);
 if ($44) {
  $45 = $1;
  $46 = (($45) + 40|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $0;
  $49 = (($48) + 64|0);
  HEAP32[$49>>2] = $47;
 }
 STACKTOP = sp;return;
}
function _pn_session_open($session) {
 $session = $session|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_endpoint_open($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6440|0),(6256|0),237,(6448|0));
  // unreachable;
 }
}
function _pn_session_close($session) {
 $session = $session|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_endpoint_close($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6440|0),(6256|0),243,(6464|0));
  // unreachable;
 }
}
function _pn_add_link($ssn,$link) {
 $ssn = $ssn|0;
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $link;
 $2 = $0;
 $3 = (($2) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_pn_list_add($4,$5)|0);
 $6 = $0;
 $7 = $1;
 $8 = (($7) + 256|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 _pn_ep_incref($9);
 STACKTOP = sp;return;
}
function _pn_remove_link($ssn,$link) {
 $ssn = $ssn|0;
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $link;
 $2 = $0;
 $3 = (($2) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_pn_list_remove($4,$5)|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 _pn_ep_decref($7);
 $8 = $1;
 $9 = (($8) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = (($12) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 36|0);
  HEAP32[$18>>2] = $14;
 }
 $19 = $1;
 $20 = (($19) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = (($26) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 40|0);
  HEAP32[$29>>2] = $25;
 }
 $30 = $1;
 $31 = $0;
 $32 = (($31) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 60|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($30|0)==($35|0);
 if ($36) {
  $37 = $1;
  $38 = (($37) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $0;
  $41 = (($40) + 60|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 60|0);
  HEAP32[$43>>2] = $39;
 }
 $44 = $1;
 $45 = $0;
 $46 = (($45) + 60|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 64|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($44|0)==($49|0);
 if ($50) {
  $51 = $1;
  $52 = (($51) + 40|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $0;
  $55 = (($54) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 64|0);
  HEAP32[$57>>2] = $53;
 }
 STACKTOP = sp;return;
}
function _pn_link_open($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_endpoint_open($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6536|0),(6256|0),300,(6544|0));
  // unreachable;
 }
}
function _pn_link_close($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_endpoint_close($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6536|0),(6256|0),306,(6560|0));
  // unreachable;
 }
}
function _pn_link_detach($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 302|0);
  HEAP8[$4>>0] = 1;
  $5 = $0;
  $6 = (($5) + 256|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 132|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[80>>2]|0;
  $13 = $0;
  (_pn_collector_put($11,$12,$13,24)|0);
  $14 = $0;
  $15 = (($14) + 256|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  _pn_modified($18,$19,1);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6536|0),(6256|0),312,(6576|0));
  // unreachable;
 }
}
function _pn_modified($connection,$endpoint,$emit) {
 $connection = $connection|0;
 $endpoint = $endpoint|0;
 $emit = $emit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $endpoint;
 $3 = $emit&1;
 $2 = $3;
 $4 = $1;
 $5 = (($4) + 56|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if (!($7)) {
  $8 = $1;
  $9 = (($8) + 44|0);
  HEAP32[$9>>2] = 0;
  $10 = $0;
  $11 = (($10) + 72|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 48|0);
  HEAP32[$14>>2] = $12;
  $15 = $0;
  $16 = (($15) + 72|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $1;
   $20 = $0;
   $21 = (($20) + 72|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 44|0);
   HEAP32[$23>>2] = $19;
  }
  $24 = $1;
  $25 = $0;
  $26 = (($25) + 72|0);
  HEAP32[$26>>2] = $24;
  $27 = $0;
  $28 = (($27) + 68|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   $31 = $1;
   $32 = $0;
   $33 = (($32) + 68|0);
   HEAP32[$33>>2] = $31;
  }
  $34 = $1;
  $35 = (($34) + 56|0);
  HEAP8[$35>>0] = 1;
 }
 $36 = $2;
 $37 = $36&1;
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $0;
 $39 = (($38) + 84|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = $0;
 $43 = (($42) + 132|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[80>>2]|0;
 $46 = $0;
 $47 = (($46) + 84|0);
 $48 = HEAP32[$47>>2]|0;
 (_pn_collector_put($44,$45,$48,29)|0);
 STACKTOP = sp;return;
}
function _pn_terminus_free($terminus) {
 $terminus = $terminus|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _pn_free($2);
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _pn_free($5);
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _pn_free($8);
 $9 = $0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _pn_free($11);
 $12 = $0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 _pn_free($14);
 STACKTOP = sp;return;
}
function _pn_delivery_settle($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((7032|0),(6256|0),1789,(7520|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (($3) + 46|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = (($7) + 96|0);
 $9 = HEAP32[$8>>2]|0;
 $link = $9;
 $10 = $0;
 $11 = (_pn_delivery_current($10)|0);
 if ($11) {
  $12 = $link;
  (_pn_link_advance($12)|0);
 }
 $13 = $link;
 $14 = (($13) + 276|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$14>>2] = $16;
 $17 = $0;
 $18 = (($17) + 46|0);
 HEAP8[$18>>0] = 1;
 $19 = $0;
 _pn_add_tpwork($19);
 $20 = $0;
 $21 = (($20) + 96|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 256|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 _pn_work_update($26,$27);
 $28 = $0;
 (_pn_incref($28)|0);
 $29 = $0;
 (_pn_decref($29)|0);
 STACKTOP = sp;return;
}
function _pn_endpoint_init($endpoint,$type,$conn) {
 $endpoint = $endpoint|0;
 $type = $type|0;
 $conn = $conn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $endpoint;
 $1 = $type;
 $2 = $conn;
 $3 = $1;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $0;
 $6 = (($5) + 58|0);
 HEAP8[$6>>0] = 1;
 $7 = $0;
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = 9;
 $9 = (_pn_error()|0);
 $10 = $0;
 $11 = (($10) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 12|0);
 _pn_condition_init($13);
 $14 = $0;
 $15 = (($14) + 24|0);
 _pn_condition_init($15);
 $16 = $0;
 $17 = (($16) + 36|0);
 HEAP32[$17>>2] = 0;
 $18 = $0;
 $19 = (($18) + 40|0);
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = (($20) + 44|0);
 HEAP32[$21>>2] = 0;
 $22 = $0;
 $23 = (($22) + 48|0);
 HEAP32[$23>>2] = 0;
 $24 = $0;
 $25 = (($24) + 56|0);
 HEAP8[$25>>0] = 0;
 $26 = $0;
 $27 = (($26) + 57|0);
 HEAP8[$27>>0] = 0;
 $28 = $0;
 $29 = (($28) + 52|0);
 HEAP32[$29>>2] = 1;
 $30 = $0;
 $31 = (($30) + 36|0);
 HEAP32[$31>>2] = 0;
 $32 = $2;
 $33 = (($32) + 64|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = (($35) + 40|0);
 HEAP32[$36>>2] = $34;
 $37 = $2;
 $38 = (($37) + 64|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $0;
  $42 = $2;
  $43 = (($42) + 64|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 36|0);
  HEAP32[$45>>2] = $41;
 }
 $46 = $0;
 $47 = $2;
 $48 = (($47) + 64|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = (($49) + 60|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = $0;
 $54 = $2;
 $55 = (($54) + 60|0);
 HEAP32[$55>>2] = $53;
 STACKTOP = sp;return;
}
function _pn_endpoint_tini($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $endpoint;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _pn_error_free($3);
 $4 = $0;
 $5 = (($4) + 24|0);
 _pn_condition_tini($5);
 $6 = $0;
 $7 = (($6) + 12|0);
 _pn_condition_tini($7);
 STACKTOP = sp;return;
}
function _pn_connection() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_pn_class_new(6672,144)|0);
 $conn = $1;
 $2 = $conn;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $conn;
  $5 = (($4) + 60|0);
  HEAP32[$5>>2] = 0;
  $6 = $conn;
  $7 = (($6) + 64|0);
  HEAP32[$7>>2] = 0;
  $8 = $conn;
  $9 = $conn;
  _pn_endpoint_init($8,0,$9);
  $10 = $conn;
  $11 = (($10) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = $conn;
  $13 = (($12) + 72|0);
  HEAP32[$13>>2] = 0;
  $14 = HEAP32[608>>2]|0;
  $15 = (_pn_list($14,0)|0);
  $16 = $conn;
  $17 = (($16) + 76|0);
  HEAP32[$17>>2] = $15;
  $18 = HEAP32[608>>2]|0;
  $19 = (_pn_list($18,0)|0);
  $20 = $conn;
  $21 = (($20) + 80|0);
  HEAP32[$21>>2] = $19;
  $22 = $conn;
  $23 = (($22) + 84|0);
  HEAP32[$23>>2] = 0;
  $24 = $conn;
  $25 = (($24) + 88|0);
  HEAP32[$25>>2] = 0;
  $26 = $conn;
  $27 = (($26) + 92|0);
  HEAP32[$27>>2] = 0;
  $28 = $conn;
  $29 = (($28) + 96|0);
  HEAP32[$29>>2] = 0;
  $30 = $conn;
  $31 = (($30) + 100|0);
  HEAP32[$31>>2] = 0;
  $32 = (_pn_string(0)|0);
  $33 = $conn;
  $34 = (($33) + 104|0);
  HEAP32[$34>>2] = $32;
  $35 = (_pn_string(0)|0);
  $36 = $conn;
  $37 = (($36) + 108|0);
  HEAP32[$37>>2] = $35;
  $38 = (_pn_string(0)|0);
  $39 = $conn;
  $40 = (($39) + 112|0);
  HEAP32[$40>>2] = $38;
  $41 = (_pn_string(0)|0);
  $42 = $conn;
  $43 = (($42) + 116|0);
  HEAP32[$43>>2] = $41;
  $44 = (_pn_data(0)|0);
  $45 = $conn;
  $46 = (($45) + 120|0);
  HEAP32[$46>>2] = $44;
  $47 = (_pn_data(0)|0);
  $48 = $conn;
  $49 = (($48) + 124|0);
  HEAP32[$49>>2] = $47;
  $50 = (_pn_data(0)|0);
  $51 = $conn;
  $52 = (($51) + 128|0);
  HEAP32[$52>>2] = $50;
  $53 = $conn;
  $54 = (($53) + 132|0);
  HEAP32[$54>>2] = 0;
  $55 = (_pn_record()|0);
  $56 = $conn;
  $57 = (($56) + 136|0);
  HEAP32[$57>>2] = $55;
  $58 = HEAP32[80>>2]|0;
  $59 = (_pn_list($58,0)|0);
  $60 = $conn;
  $61 = (($60) + 140|0);
  HEAP32[$61>>2] = $59;
  $62 = $conn;
  $0 = $62;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 } else {
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _pn_connection_collect($connection,$collector) {
 $connection = $connection|0;
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endpoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $collector;
 $2 = $0;
 $3 = (($2) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 (_pn_decref($4)|0);
 $5 = $1;
 $6 = $0;
 $7 = (($6) + 132|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 (_pn_incref($10)|0);
 $11 = $0;
 $12 = (($11) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $endpoint = $13;
 while(1) {
  $14 = $endpoint;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $0;
  $17 = (($16) + 132|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[80>>2]|0;
  $20 = $endpoint;
  $21 = $endpoint;
  $22 = HEAP32[$21>>2]|0;
  $23 = (6744 + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  (_pn_collector_put($18,$19,$20,$24)|0);
  $25 = $endpoint;
  $26 = (($25) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $endpoint = $27;
 }
 STACKTOP = sp;return;
}
function _pn_connection_state($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pn_connection_get_container($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 104|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((6240|0),(6256|0),553,(6760|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_connection_set_container($connection,$container) {
 $connection = $connection|0;
 $container = $container|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $container;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 104|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6240|0),(6256|0),559,(6792|0));
  // unreachable;
 }
}
function _pn_connection_get_hostname($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((6240|0),(6256|0),565,(6824|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_connection_set_hostname($connection,$hostname) {
 $connection = $connection|0;
 $hostname = $hostname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $hostname;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 108|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6240|0),(6256|0),571,(6856|0));
  // unreachable;
 }
}
function _pn_connection_get_user($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 112|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((6240|0),(6256|0),577,(6888|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_connection_set_user($connection,$user) {
 $connection = $connection|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $user;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 112|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6240|0),(6256|0),583,(6912|0));
  // unreachable;
 }
}
function _pn_connection_set_password($connection,$password) {
 $connection = $connection|0;
 $password = $password|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $password;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 116|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6240|0),(6256|0),589,(6936|0));
  // unreachable;
 }
}
function _pn_connection_remote_container($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((6240|0),(6256|0),631,(6968|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (($3) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 84|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  STACKTOP = sp;return ($12|0);
 } else {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_connection_remote_hostname($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((6240|0),(6256|0),637,(7000|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (($3) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 84|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  STACKTOP = sp;return ($12|0);
 } else {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_add_work($connection,$delivery) {
 $connection = $connection|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $delivery;
 $2 = $1;
 $3 = (($2) + 146|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (($6) + 46|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if ($9) {
  ___assert_fail((7048|0),(6256|0),661,(7080|0));
  // unreachable;
 }
 $10 = $1;
 $11 = (($10) + 112|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = (($12) + 92|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($15) + 116|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 $18 = (($17) + 92|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $1;
  $22 = $0;
  $23 = (($22) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 112|0);
  HEAP32[$25>>2] = $21;
 }
 $26 = $1;
 $27 = $0;
 $28 = (($27) + 92|0);
 HEAP32[$28>>2] = $26;
 $29 = $0;
 $30 = (($29) + 88|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  $33 = $1;
  $34 = $0;
  $35 = (($34) + 88|0);
  HEAP32[$35>>2] = $33;
 }
 $36 = $1;
 $37 = (($36) + 146|0);
 HEAP8[$37>>0] = 1;
 STACKTOP = sp;return;
}
function _pn_clear_work($connection,$delivery) {
 $connection = $connection|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $delivery;
 $2 = $1;
 $3 = (($2) + 146|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = (($6) + 116|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 112|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 112|0);
  HEAP32[$16>>2] = $12;
 }
 $17 = $1;
 $18 = (($17) + 112|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $1;
  $22 = (($21) + 116|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = (($24) + 112|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 116|0);
  HEAP32[$27>>2] = $23;
 }
 $28 = $1;
 $29 = $0;
 $30 = (($29) + 88|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)==($31|0);
 if ($32) {
  $33 = $1;
  $34 = (($33) + 112|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  $37 = (($36) + 88|0);
  HEAP32[$37>>2] = $35;
 }
 $38 = $1;
 $39 = $0;
 $40 = (($39) + 92|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38|0)==($41|0);
 if ($42) {
  $43 = $1;
  $44 = (($43) + 116|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $0;
  $47 = (($46) + 92|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = $1;
 $49 = (($48) + 146|0);
 HEAP8[$49>>0] = 0;
 STACKTOP = sp;return;
}
function _pn_work_update($connection,$delivery) {
 $connection = $connection|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $delivery;
 $2 = $1;
 $3 = (_pn_delivery_link($2)|0);
 $link = $3;
 $4 = $link;
 $5 = (_pn_link_current($4)|0);
 $current = $5;
 $6 = $1;
 $7 = (($6) + 144|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if ($9) {
  $10 = $1;
  $11 = (($10) + 46|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&1;
  if (!($13)) {
   $14 = $0;
   $15 = $1;
   _pn_add_work($14,$15);
   STACKTOP = sp;return;
  }
 }
 $16 = $1;
 $17 = $current;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = $link;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(2);
  if ($21) {
   $22 = $link;
   $23 = (_pn_link_credit($22)|0);
   $24 = ($23|0)>(0);
   if ($24) {
    $25 = $0;
    $26 = $1;
    _pn_add_work($25,$26);
   } else {
    $27 = $0;
    $28 = $1;
    _pn_clear_work($27,$28);
   }
  } else {
   $29 = $0;
   $30 = $1;
   _pn_add_work($29,$30);
  }
 } else {
  $31 = $0;
  $32 = $1;
  _pn_clear_work($31,$32);
 }
 STACKTOP = sp;return;
}
function _pn_delivery_link($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 96|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((7032|0),(6256|0),1902,(7632|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_link_current($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $link;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (($4) + 268|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 } else {
  $0 = 0;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _pn_link_credit($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 284|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pn_add_tpwork($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $connection = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 256|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $connection = $7;
 $8 = $0;
 $9 = (($8) + 147|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  $40 = $connection;
  $41 = $connection;
  _pn_modified($40,$41,1);
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 120|0);
 HEAP32[$13>>2] = 0;
 $14 = $connection;
 $15 = (($14) + 100|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = (($17) + 124|0);
 HEAP32[$18>>2] = $16;
 $19 = $connection;
 $20 = (($19) + 100|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $0;
  $24 = $connection;
  $25 = (($24) + 100|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 120|0);
  HEAP32[$27>>2] = $23;
 }
 $28 = $0;
 $29 = $connection;
 $30 = (($29) + 100|0);
 HEAP32[$30>>2] = $28;
 $31 = $connection;
 $32 = (($31) + 96|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = $0;
  $36 = $connection;
  $37 = (($36) + 96|0);
  HEAP32[$37>>2] = $35;
 }
 $38 = $0;
 $39 = (($38) + 147|0);
 HEAP8[$39>>0] = 1;
 $40 = $connection;
 $41 = $connection;
 _pn_modified($40,$41,1);
 STACKTOP = sp;return;
}
function _pn_matches($endpoint,$type,$state) {
 $endpoint = $endpoint|0;
 $type = $type|0;
 $state = $state|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $type;
 $3 = $state;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ($5|0)!=($6|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
  } else {
   $8 = $3;
   $9 = ($8|0)!=(0);
   if (!($9)) {
    $$expand_i1_val2 = 1;
    $0 = $$expand_i1_val2;
    break;
   }
   $10 = $1;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $st = $12;
   $13 = $3;
   $14 = $13 & 56;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = $3;
    $17 = $16 & 7;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $23 = $st;
     $24 = $3;
     $25 = ($23|0)==($24|0);
     $$expand_i1_val6 = $25&1;
     $0 = $$expand_i1_val6;
     break;
    }
   }
   $19 = $st;
   $20 = $3;
   $21 = $19 & $20;
   $22 = ($21|0)!=(0);
   $$expand_i1_val4 = $22&1;
   $0 = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = $0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function _pn_find($endpoint,$type,$state) {
 $endpoint = $endpoint|0;
 $type = $type|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $type;
 $3 = $state;
 while(1) {
  $4 = $1;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $1;
  $7 = $2;
  $8 = $3;
  $9 = (_pn_matches($6,$7,$8)|0);
  if ($9) {
   label = 4;
   break;
  }
  $11 = $1;
  $12 = (($11) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $1 = $13;
 }
 if ((label|0) == 4) {
  $10 = $1;
  $0 = $10;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pn_session_head($conn,$state) {
 $conn = $conn|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $conn;
 $2 = $state;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = (($5) + 60|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (_pn_find($7,1,$8)|0);
  $0 = $9;
 } else {
  $0 = 0;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _pn_session_next($ssn,$state) {
 $ssn = $ssn|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ssn;
 $2 = $state;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = (($5) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (_pn_find($7,1,$8)|0);
  $0 = $9;
 } else {
  $0 = 0;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _pn_link_head($conn,$state) {
 $conn = $conn|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $endpoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $conn;
 $2 = $state;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $1;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $endpoint = $7;
 while(1) {
  $8 = $endpoint;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 9;
   break;
  }
  $10 = $endpoint;
  $11 = $2;
  $12 = (_pn_matches($10,2,$11)|0);
  if ($12) {
   label = 7;
   break;
  }
  $13 = $endpoint;
  $14 = $2;
  $15 = (_pn_matches($13,3,$14)|0);
  if ($15) {
   label = 7;
   break;
  }
  $17 = $endpoint;
  $18 = (($17) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $endpoint = $19;
 }
 if ((label|0) == 7) {
  $16 = $endpoint;
  $0 = $16;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pn_link_next($link,$state) {
 $link = $link|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $endpoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $link;
 $2 = $state;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $1;
 $6 = (($5) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $endpoint = $7;
 while(1) {
  $8 = $endpoint;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 9;
   break;
  }
  $10 = $endpoint;
  $11 = $2;
  $12 = (_pn_matches($10,2,$11)|0);
  if ($12) {
   label = 7;
   break;
  }
  $13 = $endpoint;
  $14 = $2;
  $15 = (_pn_matches($13,3,$14)|0);
  if ($15) {
   label = 7;
   break;
  }
  $17 = $endpoint;
  $18 = (($17) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $endpoint = $19;
 }
 if ((label|0) == 7) {
  $16 = $endpoint;
  $0 = $16;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pn_session($conn) {
 $conn = $conn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $ssn = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $conn;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((6432|0),(6256|0),950,(7096|0));
  // unreachable;
 }
 $4 = (_pn_class_new(7112,176)|0);
 $ssn = $4;
 $5 = $ssn;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $7 = $ssn;
 $8 = $1;
 _pn_endpoint_init($7,1,$8);
 $9 = $1;
 $10 = $ssn;
 _pn_add_session($9,$10);
 $11 = HEAP32[608>>2]|0;
 $12 = (_pn_list($11,0)|0);
 $13 = $ssn;
 $14 = (($13) + 64|0);
 HEAP32[$14>>2] = $12;
 $15 = HEAP32[608>>2]|0;
 $16 = (_pn_list($15,0)|0);
 $17 = $ssn;
 $18 = (($17) + 68|0);
 HEAP32[$18>>2] = $16;
 $19 = (_pn_record()|0);
 $20 = $ssn;
 $21 = (($20) + 72|0);
 HEAP32[$21>>2] = $19;
 $22 = $ssn;
 $23 = (($22) + 76|0);
 HEAP32[$23>>2] = 1048576;
 $24 = $ssn;
 $25 = (($24) + 80|0);
 HEAP32[$25>>2] = 0;
 $26 = $ssn;
 $27 = (($26) + 84|0);
 HEAP32[$27>>2] = 0;
 $28 = $ssn;
 $29 = (($28) + 88|0);
 HEAP32[$29>>2] = 0;
 $30 = $ssn;
 $31 = (($30) + 92|0);
 HEAP32[$31>>2] = 0;
 $32 = $ssn;
 $33 = (($32) + 96|0);
 dest=$33+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $34 = $ssn;
 $35 = (($34) + 96|0);
 HEAP16[$35>>1] = -1;
 $36 = $ssn;
 $37 = (($36) + 96|0);
 $38 = (($37) + 2|0);
 HEAP16[$38>>1] = -1;
 $39 = $ssn;
 $40 = (($39) + 96|0);
 $41 = (($40) + 8|0);
 _pn_delivery_map_init($41,0);
 $42 = $ssn;
 $43 = (($42) + 96|0);
 $44 = (($43) + 16|0);
 _pn_delivery_map_init($44,0);
 $45 = HEAP32[608>>2]|0;
 $46 = (_pn_hash($45,0,0.75)|0);
 $47 = $ssn;
 $48 = (($47) + 96|0);
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = $46;
 $50 = HEAP32[608>>2]|0;
 $51 = (_pn_hash($50,0,0.75)|0);
 $52 = $ssn;
 $53 = (($52) + 96|0);
 $54 = (($53) + 48|0);
 HEAP32[$54>>2] = $51;
 $55 = $1;
 $56 = (($55) + 132|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[80>>2]|0;
 $59 = $ssn;
 (_pn_collector_put($57,$58,$59,13)|0);
 $60 = $1;
 $61 = (($60) + 84|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $ssn;
  _pn_session_bound($64);
 }
 $65 = $ssn;
 (_pn_decref($65)|0);
 $66 = $ssn;
 $0 = $66;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _pn_link_bound($link) {
 $link = $link|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 STACKTOP = sp;return;
}
function _pn_session_unbound($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 96|0);
  HEAP16[$4>>1] = -1;
  $5 = $0;
  $6 = (($5) + 96|0);
  $7 = (($6) + 2|0);
  HEAP16[$7>>1] = -1;
  $8 = $0;
  $9 = (($8) + 80|0);
  HEAP32[$9>>2] = 0;
  $10 = $0;
  $11 = (($10) + 84|0);
  HEAP32[$11>>2] = 0;
  $12 = $0;
  $13 = (($12) + 88|0);
  HEAP32[$13>>2] = 0;
  $14 = $0;
  $15 = (($14) + 92|0);
  HEAP32[$15>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7168|0),(6256|0),997,(7200|0));
  // unreachable;
 }
}
function _pn_session_state($session) {
 $session = $session|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_terminus_init($terminus,$type) {
 $terminus = $terminus|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $type;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 32|0);
 HEAP32[$4>>2] = $2;
 $5 = (_pn_string(0)|0);
 $6 = $0;
 HEAP32[$6>>2] = $5;
 $7 = $0;
 $8 = (($7) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = (($9) + 24|0);
 HEAP32[$10>>2] = 1;
 $11 = $0;
 $12 = (($11) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = (($13) + 40|0);
 HEAP8[$14>>0] = 0;
 $15 = $0;
 $16 = (($15) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = (_pn_data(0)|0);
 $18 = $0;
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = (_pn_data(0)|0);
 $21 = $0;
 $22 = (($21) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = (_pn_data(0)|0);
 $24 = $0;
 $25 = (($24) + 12|0);
 HEAP32[$25>>2] = $23;
 $26 = (_pn_data(0)|0);
 $27 = $0;
 $28 = (($27) + 16|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _pn_link_new($type,$session,$name) {
 $type = $type|0;
 $session = $session|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $session;
 $2 = $name;
 $3 = (_pn_class_new(7224,304)|0);
 $link = $3;
 $4 = $link;
 $5 = $0;
 $6 = $1;
 $7 = (($6) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 _pn_endpoint_init($4,$5,$8);
 $9 = $1;
 $10 = $link;
 _pn_add_link($9,$10);
 $11 = $1;
 (_pn_incref($11)|0);
 $12 = $2;
 $13 = (_pn_string($12)|0);
 $14 = $link;
 $15 = (($14) + 252|0);
 HEAP32[$15>>2] = $13;
 $16 = $link;
 $17 = (($16) + 60|0);
 _pn_terminus_init($17,1);
 $18 = $link;
 $19 = (($18) + 104|0);
 _pn_terminus_init($19,2);
 $20 = $link;
 $21 = (($20) + 148|0);
 _pn_terminus_init($21,0);
 $22 = $link;
 $23 = (($22) + 192|0);
 _pn_terminus_init($23,0);
 $24 = $link;
 $25 = (($24) + 268|0);
 HEAP32[$25>>2] = 0;
 $26 = $link;
 $27 = (($26) + 264|0);
 HEAP32[$27>>2] = 0;
 $28 = $link;
 $29 = (($28) + 260|0);
 HEAP32[$29>>2] = 0;
 $30 = $link;
 $31 = (($30) + 276|0);
 HEAP32[$31>>2] = 0;
 $32 = $link;
 $33 = (($32) + 280|0);
 HEAP32[$33>>2] = 0;
 $34 = $link;
 $35 = (($34) + 284|0);
 HEAP32[$35>>2] = 0;
 $36 = $link;
 $37 = (($36) + 288|0);
 HEAP32[$37>>2] = 0;
 $38 = $link;
 $39 = (($38) + 301|0);
 HEAP8[$39>>0] = 0;
 $40 = $link;
 $41 = (($40) + 300|0);
 HEAP8[$41>>0] = 1;
 $42 = $link;
 $43 = (($42) + 292|0);
 HEAP32[$43>>2] = 0;
 $44 = (_pn_record()|0);
 $45 = $link;
 $46 = (($45) + 272|0);
 HEAP32[$46>>2] = $44;
 $47 = $link;
 $48 = (($47) + 296|0);
 HEAP8[$48>>0] = 2;
 $49 = $link;
 $50 = (($49) + 297|0);
 HEAP8[$50>>0] = 0;
 $51 = $link;
 $52 = (($51) + 298|0);
 HEAP8[$52>>0] = 2;
 $53 = $link;
 $54 = (($53) + 299|0);
 HEAP8[$54>>0] = 0;
 $55 = $link;
 $56 = (($55) + 302|0);
 HEAP8[$56>>0] = 0;
 $57 = $link;
 $58 = (($57) + 236|0);
 HEAP32[$58>>2] = -1;
 $59 = $link;
 $60 = (($59) + 236|0);
 $61 = (($60) + 4|0);
 HEAP32[$61>>2] = -1;
 $62 = $link;
 $63 = (($62) + 236|0);
 $64 = (($63) + 8|0);
 HEAP32[$64>>2] = 0;
 $65 = $link;
 $66 = (($65) + 236|0);
 $67 = (($66) + 12|0);
 HEAP32[$67>>2] = 0;
 $68 = $1;
 $69 = (($68) + 60|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 132|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[80>>2]|0;
 $74 = $link;
 (_pn_collector_put($72,$73,$74,19)|0);
 $75 = $1;
 $76 = (($75) + 60|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + 84|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0|0);
 if (!($80)) {
  $82 = $link;
  (_pn_decref($82)|0);
  $83 = $link;
  STACKTOP = sp;return ($83|0);
 }
 $81 = $link;
 _pn_link_bound($81);
 $82 = $link;
 (_pn_decref($82)|0);
 $83 = $link;
 STACKTOP = sp;return ($83|0);
}
function _pn_link_unbound($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 236|0);
  HEAP32[$4>>2] = -1;
  $5 = $0;
  $6 = (($5) + 236|0);
  $7 = (($6) + 4|0);
  HEAP32[$7>>2] = -1;
  $8 = $0;
  $9 = (($8) + 236|0);
  $10 = (($9) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = $0;
  $12 = (($11) + 236|0);
  $13 = (($12) + 12|0);
  HEAP32[$13>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((6536|0),(6256|0),1159,(7288|0));
  // unreachable;
 }
}
function _pn_link_source($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 60|0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function _pn_link_target($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 104|0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function _pn_link_remote_source($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 148|0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function _pn_link_remote_target($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 192|0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function _pn_terminus_set_type($terminus,$type) {
 $terminus = $terminus|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $terminus;
 $2 = $type;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 32|0);
  HEAP32[$7>>2] = $5;
  $0 = 0;
 } else {
  $0 = -6;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _pn_terminus_get_type($terminus) {
 $terminus = $terminus|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pn_terminus_get_address($terminus) {
 $terminus = $terminus|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = (_pn_string_get($4)|0);
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((7304|0),(6256|0),1200,(7320|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_terminus_set_address($terminus,$address) {
 $terminus = $terminus|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $address;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $1;
  $7 = (_pn_string_set($5,$6)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((7304|0),(6256|0),1206,(7344|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_terminus_get_durability($terminus) {
 $terminus = $terminus|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pn_terminus_set_durability($terminus,$durability) {
 $terminus = $terminus|0;
 $durability = $durability|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $terminus;
 $2 = $durability;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = $5;
  $0 = 0;
 } else {
  $0 = -6;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _pn_terminus_get_expiry_policy($terminus) {
 $terminus = $terminus|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pn_terminus_set_expiry_policy($terminus,$expiry_policy) {
 $terminus = $terminus|0;
 $expiry_policy = $expiry_policy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $terminus;
 $2 = $expiry_policy;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 24|0);
  HEAP32[$7>>2] = $5;
  $0 = 0;
 } else {
  $0 = -6;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _pn_terminus_set_timeout($terminus,$timeout) {
 $terminus = $terminus|0;
 $timeout = $timeout|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $terminus;
 $2 = $timeout;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 28|0);
  HEAP32[$7>>2] = $5;
  $0 = 0;
 } else {
  $0 = -6;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _pn_terminus_is_dynamic($terminus) {
 $terminus = $terminus|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 40|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&1;
  $7 = $6&1;
  $8 = $7;
 } else {
  $8 = 0;
 }
 $9 = ($8|0)!=(0);
 STACKTOP = sp;return ($9|0);
}
function _pn_terminus_set_dynamic($terminus,$dynamic) {
 $terminus = $terminus|0;
 $dynamic = $dynamic|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $terminus;
 $3 = $dynamic&1;
 $2 = $3;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = $6&1;
  $8 = $1;
  $9 = (($8) + 40|0);
  $10 = $7&1;
  HEAP8[$9>>0] = $10;
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = -6;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _pn_terminus_set_distribution_mode($terminus,$m) {
 $terminus = $terminus|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $terminus;
 $2 = $m;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 36|0);
  HEAP32[$7>>2] = $5;
  $0 = 0;
 } else {
  $0 = -6;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _pn_sender($session,$name) {
 $session = $session|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_link_new(2,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_receiver($session,$name) {
 $session = $session|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_link_new(3,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_link_state($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_link_name($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 252|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((6536|0),(6256|0),1337,(7368|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_link_is_sender($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 STACKTOP = sp;return ($3|0);
}
function _pn_link_is_receiver($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3);
 STACKTOP = sp;return ($3|0);
}
function _pn_link_session($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 256|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((6536|0),(6256|0),1353,(7384|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_delivery($link,$tag) {
 $link = $link|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delivery = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $link;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((6536|0),(6256|0),1464,(7400|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (($4) + 256|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $pool = $10;
 $11 = $pool;
 $12 = (_pn_list_pop($11)|0);
 $delivery = $12;
 $13 = $delivery;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $30 = $delivery;
   $31 = (($30) + 128|0);
   $32 = (($31) + 5|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&1;
   if ($34) {
    ___assert_fail((7472|0),(6256|0),1477,(7400|0));
    // unreachable;
   } else {
    break;
   }
  } else {
   $15 = (_pn_class_new(7416,152)|0);
   $delivery = $15;
   $16 = $delivery;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    $18 = (_pn_buffer(16)|0);
    $19 = $delivery;
    $20 = (($19) + 100|0);
    HEAP32[$20>>2] = $18;
    $21 = (_pn_buffer(64)|0);
    $22 = $delivery;
    $23 = (($22) + 136|0);
    HEAP32[$23>>2] = $21;
    $24 = $delivery;
    _pn_disposition_init($24);
    $25 = $delivery;
    $26 = (($25) + 48|0);
    _pn_disposition_init($26);
    $27 = (_pn_record()|0);
    $28 = $delivery;
    $29 = (($28) + 140|0);
    HEAP32[$29>>2] = $27;
    break;
   }
   $0 = 0;
   $130 = $0;
   STACKTOP = sp;return ($130|0);
  }
 } while(0);
 $35 = $1;
 $36 = $delivery;
 $37 = (($36) + 96|0);
 HEAP32[$37>>2] = $35;
 $38 = $delivery;
 $39 = (($38) + 96|0);
 $40 = HEAP32[$39>>2]|0;
 (_pn_incref($40)|0);
 $41 = $delivery;
 $42 = (($41) + 100|0);
 $43 = HEAP32[$42>>2]|0;
 _pn_buffer_clear($43);
 $44 = $delivery;
 $45 = (($44) + 100|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($tag) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$tag>>2]|0;
 (_pn_buffer_append($46,$48,$49)|0);
 $50 = $delivery;
 _pn_disposition_clear($50);
 $51 = $delivery;
 $52 = (($51) + 48|0);
 _pn_disposition_clear($52);
 $53 = $delivery;
 $54 = (($53) + 144|0);
 HEAP8[$54>>0] = 0;
 $55 = $delivery;
 $56 = (($55) + 145|0);
 HEAP8[$56>>0] = 0;
 $57 = $delivery;
 $58 = (($57) + 104|0);
 HEAP32[$58>>2] = 0;
 $59 = $1;
 $60 = (($59) + 264|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $delivery;
 $63 = (($62) + 108|0);
 HEAP32[$63>>2] = $61;
 $64 = $1;
 $65 = (($64) + 264|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $delivery;
  $69 = $1;
  $70 = (($69) + 264|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 104|0);
  HEAP32[$72>>2] = $68;
 }
 $73 = $delivery;
 $74 = $1;
 $75 = (($74) + 264|0);
 HEAP32[$75>>2] = $73;
 $76 = $1;
 $77 = (($76) + 260|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if (!($79)) {
  $80 = $delivery;
  $81 = $1;
  $82 = (($81) + 260|0);
  HEAP32[$82>>2] = $80;
 }
 $83 = $delivery;
 $84 = (($83) + 149|0);
 HEAP8[$84>>0] = 1;
 $85 = $delivery;
 $86 = (($85) + 112|0);
 HEAP32[$86>>2] = 0;
 $87 = $delivery;
 $88 = (($87) + 116|0);
 HEAP32[$88>>2] = 0;
 $89 = $delivery;
 $90 = (($89) + 146|0);
 HEAP8[$90>>0] = 0;
 $91 = $delivery;
 $92 = (($91) + 120|0);
 HEAP32[$92>>2] = 0;
 $93 = $delivery;
 $94 = (($93) + 124|0);
 HEAP32[$94>>2] = 0;
 $95 = $delivery;
 $96 = (($95) + 147|0);
 HEAP8[$96>>0] = 0;
 $97 = $delivery;
 $98 = (($97) + 136|0);
 $99 = HEAP32[$98>>2]|0;
 _pn_buffer_clear($99);
 $100 = $delivery;
 $101 = (($100) + 148|0);
 HEAP8[$101>>0] = 0;
 $102 = $delivery;
 $103 = (($102) + 140|0);
 $104 = HEAP32[$103>>2]|0;
 _pn_record_clear($104);
 $105 = $delivery;
 $106 = (($105) + 128|0);
 $107 = (($106) + 5|0);
 HEAP8[$107>>0] = 0;
 $108 = $delivery;
 $109 = (($108) + 128|0);
 $110 = (($109) + 4|0);
 HEAP8[$110>>0] = 0;
 $111 = $1;
 $112 = (($111) + 268|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if (!($114)) {
  $115 = $delivery;
  $116 = $1;
  $117 = (($116) + 268|0);
  HEAP32[$117>>2] = $115;
 }
 $118 = $1;
 $119 = (($118) + 276|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + 1)|0;
 HEAP32[$119>>2] = $121;
 $122 = $1;
 $123 = (($122) + 256|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 60|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $delivery;
 _pn_work_update($126,$127);
 $128 = $delivery;
 (_pn_decref($128)|0);
 $129 = $delivery;
 $0 = $129;
 $130 = $0;
 STACKTOP = sp;return ($130|0);
}
function _pn_delivery_buffered($delivery) {
 $delivery = $delivery|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $delivery;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((7032|0),(6256|0),1519,(7496|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (($4) + 145|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 do {
  if ($7) {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
  } else {
   $8 = $1;
   $9 = (($8) + 96|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_pn_link_is_sender($10)|0);
   if (!($11)) {
    $$expand_i1_val6 = 0;
    $0 = $$expand_i1_val6;
    break;
   }
   $12 = $1;
   $13 = (($12) + 128|0);
   $state = $13;
   $14 = $state;
   $15 = (($14) + 4|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&1;
   if ($17) {
    $$expand_i1_val2 = 0;
    $0 = $$expand_i1_val2;
    break;
   }
   $18 = $1;
   $19 = (($18) + 148|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&1;
   if ($21) {
    $27 = 1;
   } else {
    $22 = $1;
    $23 = (($22) + 136|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_pn_buffer_size($24)|0);
    $26 = ($25>>>0)>(0);
    $27 = $26;
   }
   $$expand_i1_val4 = $27&1;
   $0 = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = $0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function _pn_delivery_current($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $link = $3;
 $4 = $link;
 $5 = (_pn_link_current($4)|0);
 $6 = $0;
 $7 = ($5|0)==($6|0);
 STACKTOP = sp;return ($7|0);
}
function _pn_delivery_writable($delivery) {
 $delivery = $delivery|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $link = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $delivery;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $15 = $$pre_trunc&1;
  STACKTOP = sp;return ($15|0);
 }
 $4 = $1;
 $5 = (($4) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $link = $6;
 $7 = $link;
 $8 = (_pn_link_is_sender($7)|0);
 if ($8) {
  $9 = $1;
  $10 = (_pn_delivery_current($9)|0);
  if ($10) {
   $11 = $link;
   $12 = (_pn_link_credit($11)|0);
   $13 = ($12|0)>(0);
   $14 = $13;
  } else {
   $14 = 0;
  }
 } else {
  $14 = 0;
 }
 $$expand_i1_val2 = $14&1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $15 = $$pre_trunc&1;
 STACKTOP = sp;return ($15|0);
}
function _pn_delivery_readable($delivery) {
 $delivery = $delivery|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $delivery;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $$expand_i1_val2 = 0;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $12 = $$pre_trunc&1;
  STACKTOP = sp;return ($12|0);
 }
 $4 = $1;
 $5 = (($4) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $link = $6;
 $7 = $link;
 $8 = (_pn_link_is_receiver($7)|0);
 if ($8) {
  $9 = $1;
  $10 = (_pn_delivery_current($9)|0);
  $11 = $10;
 } else {
  $11 = 0;
 }
 $$expand_i1_val = $11&1;
 $0 = $$expand_i1_val;
 $$pre_trunc = $0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function _pn_delivery_tag($agg$result,$delivery) {
 $agg$result = $agg$result|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp;
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 100|0);
  $5 = HEAP32[$4>>2]|0;
  _pn_buffer_bytes($tag,$5);
  $6 = (($tag) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$tag>>2]|0;
  _pn_dtag($agg$result,$7,$8);
  STACKTOP = sp;return;
 } else {
  _pn_dtag($agg$result,0,0);
  STACKTOP = sp;return;
 }
}
function _pn_advance_sender($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 268|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 148|0);
 HEAP8[$4>>0] = 1;
 $5 = $0;
 $6 = (($5) + 288|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 284|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$10>>2] = $12;
 $13 = $0;
 $14 = (($13) + 256|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 92|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 $19 = $0;
 $20 = (($19) + 268|0);
 $21 = HEAP32[$20>>2]|0;
 _pn_add_tpwork($21);
 $22 = $0;
 $23 = (($22) + 268|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 104|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = (($27) + 268|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _pn_advance_receiver($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 284|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 288|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = (($9) + 256|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$12>>2] = $14;
 $15 = $0;
 $16 = (($15) + 268|0);
 $17 = HEAP32[$16>>2]|0;
 $current = $17;
 $18 = $current;
 $19 = (($18) + 136|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_pn_buffer_size($20)|0);
 $22 = $0;
 $23 = (($22) + 256|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 80|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($21))|0;
 HEAP32[$25>>2] = $27;
 $28 = $current;
 $29 = (($28) + 136|0);
 $30 = HEAP32[$29>>2]|0;
 _pn_buffer_clear($30);
 $31 = $0;
 $32 = (($31) + 256|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 96|0);
 $35 = (($34) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $39 = $0;
  $40 = (($39) + 268|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 104|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $0;
  $45 = (($44) + 268|0);
  HEAP32[$45>>2] = $43;
  STACKTOP = sp;return;
 }
 $38 = $current;
 _pn_add_tpwork($38);
 $39 = $0;
 $40 = (($39) + 268|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 104|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $0;
 $45 = (($44) + 268|0);
 HEAP32[$45>>2] = $43;
 STACKTOP = sp;return;
}
function _pn_link_advance($link) {
 $link = $link|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $next = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $link;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (($4) + 268|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $1;
   $9 = (($8) + 268|0);
   $10 = HEAP32[$9>>2]|0;
   $prev = $10;
   $11 = $1;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(2);
   if ($13) {
    $14 = $1;
    _pn_advance_sender($14);
   } else {
    $15 = $1;
    _pn_advance_receiver($15);
   }
   $16 = $1;
   $17 = (($16) + 268|0);
   $18 = HEAP32[$17>>2]|0;
   $next = $18;
   $19 = $1;
   $20 = (($19) + 256|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 60|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $prev;
   _pn_work_update($23,$24);
   $25 = $next;
   $26 = ($25|0)!=(0|0);
   if ($26) {
    $27 = $1;
    $28 = (($27) + 256|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 60|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $next;
    _pn_work_update($31,$32);
   }
   $33 = $prev;
   $34 = $next;
   $35 = ($33|0)!=($34|0);
   $$expand_i1_val = $35&1;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $36 = $$pre_trunc&1;
   STACKTOP = sp;return ($36|0);
  }
 }
 $$expand_i1_val2 = 0;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $36 = $$pre_trunc&1;
 STACKTOP = sp;return ($36|0);
}
function _pn_link_queued($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 288|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pn_link_send($sender,$bytes,$n) {
 $sender = $sender|0;
 $bytes = $bytes|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sender;
 $2 = $bytes;
 $3 = $n;
 $4 = $1;
 $5 = (_pn_link_current($4)|0);
 $current = $5;
 $6 = $current;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = -1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $current;
   $13 = (($12) + 136|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $2;
   $16 = $3;
   (_pn_buffer_append($14,$15,$16)|0);
   $17 = $3;
   $18 = $1;
   $19 = (($18) + 256|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 84|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($17))|0;
   HEAP32[$21>>2] = $23;
   $24 = $current;
   _pn_add_tpwork($24);
   $25 = $3;
   $0 = $25;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _pn_link_recv($receiver,$bytes,$n) {
 $receiver = $receiver|0;
 $bytes = $bytes|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delivery = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $receiver;
 $2 = $bytes;
 $3 = $n;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = -6;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $6 = $1;
 $7 = (($6) + 268|0);
 $8 = HEAP32[$7>>2]|0;
 $delivery = $8;
 $9 = $delivery;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $0 = -5;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $11 = $delivery;
 $12 = (($11) + 136|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = $2;
 $16 = (_pn_buffer_get($13,0,$14,$15)|0);
 $size = $16;
 $17 = $delivery;
 $18 = (($17) + 136|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $size;
 (_pn_buffer_trim($19,$20,0)|0);
 $21 = $size;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $39 = $delivery;
  $40 = (($39) + 148|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&1;
  $43 = $42 ? -1 : 0;
  $0 = $43;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $23 = $size;
 $24 = $1;
 $25 = (($24) + 256|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 80|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) - ($23))|0;
 HEAP32[$27>>2] = $29;
 $30 = $1;
 $31 = (($30) + 256|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 96|0);
 $34 = (($33) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $37 = $delivery;
  _pn_add_tpwork($37);
 }
 $38 = $size;
 $0 = $38;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _pn_link_flow($receiver,$credit) {
 $receiver = $receiver|0;
 $credit = $credit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $receiver;
 $1 = $credit;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((7544|0),(6256|0),1865,(7560|0));
  // unreachable;
 }
 $4 = $0;
 $5 = (_pn_link_is_receiver($4)|0);
 if (!($5)) {
  ___assert_fail((7576|0),(6256|0),1866,(7560|0));
  // unreachable;
 }
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 284|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($6))|0;
 HEAP32[$8>>2] = $10;
 $11 = $0;
 $12 = (($11) + 256|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 _pn_modified($15,$16,1);
 $17 = $0;
 $18 = (($17) + 300|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&1;
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $0;
 _pn_link_set_drain($21,0);
 $22 = $0;
 $23 = (($22) + 300|0);
 HEAP8[$23>>0] = 0;
 STACKTOP = sp;return;
}
function _pn_link_set_drain($receiver,$drain) {
 $receiver = $receiver|0;
 $drain = $drain|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $receiver;
 $2 = $drain&1;
 $1 = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((7544|0),(6256|0),1886,(7608|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (_pn_link_is_receiver($5)|0);
 if ($6) {
  $7 = $1;
  $8 = $7&1;
  $9 = $0;
  $10 = (($9) + 301|0);
  $11 = $8&1;
  HEAP8[$10>>0] = $11;
  $12 = $0;
  $13 = (($12) + 256|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 60|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  _pn_modified($16,$17,1);
  $18 = $0;
  $19 = (($18) + 300|0);
  HEAP8[$19>>0] = 1;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7576|0),(6256|0),1887,(7608|0));
  // unreachable;
 }
}
function _pn_delivery_local_state($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 16|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  tempRet0 = $10;
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((7032|0),(6256|0),1914,(7656|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_delivery_remote_state($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 48|0);
  $5 = (($4) + 16|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  tempRet0 = $11;
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((7032|0),(6256|0),1926,(7680|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_delivery_settled($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 48|0);
  $5 = (($4) + 46|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&1;
  $8 = $7&1;
  $9 = $8;
 } else {
  $9 = 0;
 }
 $10 = ($9|0)!=(0);
 STACKTOP = sp;return ($10|0);
}
function _pn_delivery_updated($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 144|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&1;
  $7 = $6&1;
  $8 = $7;
 } else {
  $8 = 0;
 }
 $9 = ($8|0)!=(0);
 STACKTOP = sp;return ($9|0);
}
function _pn_delivery_update($delivery,$0,$1) {
 $delivery = $delivery|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $delivery;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($16) + 16|0);
  $18 = $17;
  $19 = $18;
  HEAP32[$19>>2] = $12;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $15;
  $22 = $2;
  _pn_add_tpwork($22);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _pn_delivery_pending($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = (($1) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_pn_buffer_size($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_delivery_partial($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = (($1) + 148|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 $5 = $4 ^ 1;
 STACKTOP = sp;return ($5|0);
}
function _pn_connection_condition($connection) {
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $connection;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 12|0);
  STACKTOP = sp;return ($4|0);
 } else {
  ___assert_fail((6240|0),(6256|0),1983,(7712|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_condition_is_set($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_pn_string_get($4)|0);
 $6 = ($5|0)!=(0|0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function _pn_condition_clear($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  _pn_string_clear($4);
  $5 = $0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  _pn_string_clear($7);
  $8 = $0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  _pn_data_clear($10);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7736|0),(6256|0),2025,(7752|0));
  // unreachable;
 }
}
function _pn_condition_get_name($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = (_pn_string_get($4)|0);
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((7736|0),(6256|0),2033,(7776|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_condition_set_name($condition,$name) {
 $condition = $condition|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $name;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $1;
  $7 = (_pn_string_set($5,$6)|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((7736|0),(6256|0),2039,(7800|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_condition_get_description($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((7736|0),(6256|0),2045,(7824|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_condition_set_description($condition,$description) {
 $condition = $condition|0;
 $description = $description|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $description;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((7736|0),(6256|0),2051,(7856|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_condition_info($condition) {
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $condition;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((7736|0),(6256|0),2057,(7888|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_event_session($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $event;
 $2 = $1;
 $3 = (_pn_event_class($2)|0);
 $4 = (_pn_class_id($3)|0);
 $cond = ($4|0)==(15);
 do {
  if ($cond) {
   $5 = $1;
   $6 = (_pn_event_context($5)|0);
   $0 = $6;
  } else {
   $7 = $1;
   $8 = (_pn_event_link($7)|0);
   $link = $8;
   $9 = $link;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $link;
    $12 = (_pn_link_session($11)|0);
    $0 = $12;
    break;
   }
   $0 = 0;
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _pn_event_link($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $dlv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $event;
 $2 = $1;
 $3 = (_pn_event_class($2)|0);
 $4 = (_pn_class_id($3)|0);
 $cond = ($4|0)==(16);
 do {
  if ($cond) {
   $5 = $1;
   $6 = (_pn_event_context($5)|0);
   $0 = $6;
  } else {
   $7 = $1;
   $8 = (_pn_event_delivery($7)|0);
   $dlv = $8;
   $9 = $dlv;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $dlv;
    $12 = (_pn_delivery_link($11)|0);
    $0 = $12;
    break;
   }
   $0 = 0;
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _pn_event_delivery($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $event;
 $2 = $1;
 $3 = (_pn_event_class($2)|0);
 $4 = (_pn_class_id($3)|0);
 $cond = ($4|0)==(17);
 if ($cond) {
  $5 = $1;
  $6 = (_pn_event_context($5)|0);
  $0 = $6;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function _pn_collector__class() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (8256|0);
}
function _pn_collector_new() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pn_collector__class()|0);
 $1 = (_pn_class_new($0,16)|0);
 STACKTOP = sp;return ($1|0);
}
function _pn_collector() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pn_collector_new()|0);
 STACKTOP = sp;return ($0|0);
}
function _pn_collector_free($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _pn_collector_release($3);
  $4 = $0;
  (_pn_decref($4)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((8328|0),(8344|0),86,(8408|0));
  // unreachable;
 }
}
function _pn_collector_release($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((8328|0),(8344|0),93,(8432|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = (($7) + 12|0);
 HEAP8[$8>>0] = 1;
 $9 = $0;
 _pn_collector_drain($9);
 $10 = $0;
 _pn_collector_shrink($10);
 STACKTOP = sp;return;
}
function _pn_collector_put($collector,$clazz,$context,$type) {
 $collector = $collector|0;
 $clazz = $clazz|0;
 $context = $context|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $event = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $collector;
 $2 = $clazz;
 $3 = $context;
 $4 = $type;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((8456|0),(8344|0),111,(8464|0));
  // unreachable;
 }
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 if ($12) {
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $tail = $15;
 $16 = $tail;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $tail;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $4;
  $22 = ($20|0)==($21|0);
  if ($22) {
   $23 = $tail;
   $24 = (($23) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $3;
   $27 = ($25|0)==($26|0);
   if ($27) {
    $0 = 0;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
  }
 }
 $28 = $2;
 $29 = (($28) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = (FUNCTION_TABLE_ii[$30 & 127]($31)|0);
 $2 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = (_pn_list_pop($34)|0);
 $event = $35;
 $36 = $event;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $38 = (_pn_event()|0);
  $event = $38;
 }
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $41 = $event;
 HEAP32[$41>>2] = $40;
 $42 = $event;
 $43 = HEAP32[$42>>2]|0;
 (_pn_incref($43)|0);
 $44 = $tail;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $event;
  $47 = $tail;
  $48 = (($47) + 16|0);
  HEAP32[$48>>2] = $46;
  $49 = $event;
  $50 = $1;
  $51 = (($50) + 8|0);
  HEAP32[$51>>2] = $49;
 } else {
  $52 = $event;
  $53 = $1;
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = $52;
  $55 = $event;
  $56 = $1;
  $57 = (($56) + 4|0);
  HEAP32[$57>>2] = $55;
 }
 $58 = $2;
 $59 = $event;
 $60 = (($59) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = $3;
 $62 = $event;
 $63 = (($62) + 8|0);
 HEAP32[$63>>2] = $61;
 $64 = $4;
 $65 = $event;
 $66 = (($65) + 20|0);
 HEAP32[$66>>2] = $64;
 $67 = $2;
 $68 = $event;
 $69 = (($68) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 (_pn_class_incref($67,$70)|0);
 $71 = $event;
 $0 = $71;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _pn_event() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pn_event_new()|0);
 STACKTOP = sp;return ($0|0);
}
function _pn_collector_peek($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_collector_pop($collector) {
 $collector = $collector|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $event = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $collector;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $event = $4;
 $5 = $event;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $19 = $$pre_trunc&1;
  STACKTOP = sp;return ($19|0);
 }
 $7 = $event;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $16 = $1;
  $17 = (($16) + 8|0);
  HEAP32[$17>>2] = 0;
 }
 $18 = $event;
 (_pn_decref($18)|0);
 $$expand_i1_val2 = 1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $19 = $$pre_trunc&1;
 STACKTOP = sp;return ($19|0);
}
function _pn_collector_more($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((8328|0),(8344|0),173,(8488|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function _pn_event__class() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (8512|0);
}
function _pn_event_new() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pn_event__class()|0);
 $1 = (_pn_class_new($0,24)|0);
 STACKTOP = sp;return ($1|0);
}
function _pn_event_type($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_event_class($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((8584|0),(8344|0),249,(8592|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_event_context($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((8584|0),(8344|0),255,(8608|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_event_type_name($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 do {
  switch ($2|0) {
  case 1:  {
   $0 = 8648;
   break;
  }
  case 7:  {
   $0 = 8776;
   break;
  }
  case 12:  {
   $0 = 8928;
   break;
  }
  case 13:  {
   $0 = 8952;
   break;
  }
  case 2:  {
   $0 = 8664;
   break;
  }
  case 16:  {
   $0 = 9040;
   break;
  }
  case 6:  {
   $0 = 8752;
   break;
  }
  case 18:  {
   $0 = 9064;
   break;
  }
  case 28:  {
   $0 = 9280;
   break;
  }
  case 17:  {
   $0 = 9016;
   break;
  }
  case 10:  {
   $0 = 8896;
   break;
  }
  case 26:  {
   $0 = 9248;
   break;
  }
  case 5:  {
   $0 = 8728;
   break;
  }
  case 36:  {
   $0 = 9480;
   break;
  }
  case 37:  {
   $0 = 9504;
   break;
  }
  case 14:  {
   $0 = 8992;
   break;
  }
  case 23:  {
   $0 = 9152;
   break;
  }
  case 15:  {
   $0 = 8968;
   break;
  }
  case 19:  {
   $0 = 9088;
   break;
  }
  case 34:  {
   $0 = 9432;
   break;
  }
  case 35:  {
   $0 = 9456;
   break;
  }
  case 9:  {
   $0 = 8800;
   break;
  }
  case 21:  {
   $0 = 9104;
   break;
  }
  case 29:  {
   $0 = 9296;
   break;
  }
  case 32:  {
   $0 = 9368;
   break;
  }
  case 33:  {
   $0 = 9400;
   break;
  }
  case 22:  {
   $0 = 9224;
   break;
  }
  case 40:  {
   $0 = 9576;
   break;
  }
  case 41:  {
   $0 = 9600;
   break;
  }
  case 20:  {
   $0 = 9128;
   break;
  }
  case 30:  {
   $0 = 9312;
   break;
  }
  case 31:  {
   $0 = 9344;
   break;
  }
  case 0:  {
   $0 = 8632;
   break;
  }
  case 3:  {
   $0 = 8688;
   break;
  }
  case 25:  {
   $0 = 9200;
   break;
  }
  case 27:  {
   $0 = 9264;
   break;
  }
  case 11:  {
   $0 = 8864;
   break;
  }
  case 38:  {
   $0 = 9528;
   break;
  }
  case 39:  {
   $0 = 9552;
   break;
  }
  case 4:  {
   $0 = 8712;
   break;
  }
  case 24:  {
   $0 = 9176;
   break;
  }
  case 8:  {
   $0 = 8832;
   break;
  }
  default: {
   $0 = 0;
  }
  }
 } while(0);
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _pni_sniff_header($buf,$len) {
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $isAMQP = 0, $isFirst3AMQP = 0, $isFirst3SSL2CLientHello = 0, $isFirst4SSL2ClientHello = 0, $isFirst5AMQP = 0, $isFirst5OldAMQP = 0, $isSSL2Handshake = 0, $isSSL3Handshake = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $len;
 $3 = $2;
 $4 = ($3>>>0)<(3);
 if ($4) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $5 = $1;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(22);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(3);
  if ($13) {
   $14 = $1;
   $15 = (($14) + 2|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)<=(3);
   $20 = $18;
  } else {
   $20 = 0;
  }
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 $isSSL3Handshake = $19;
 $21 = $isSSL3Handshake;
 $22 = $21&1;
 if ($22) {
  $0 = 2;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $23 = $1;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 << 24 >> 24;
 $26 = ($25|0)==(65);
 if ($26) {
  $27 = $1;
  $28 = (($27) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(77);
  if ($31) {
   $32 = $1;
   $33 = (($32) + 2|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)==(81);
   $38 = $36;
  } else {
   $38 = 0;
  }
 } else {
  $38 = 0;
 }
 $37 = $38&1;
 $isFirst3AMQP = $37;
 $39 = $1;
 $40 = (($39) + 2|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 << 24 >> 24;
 $43 = ($42|0)==(1);
 $44 = $43&1;
 $isFirst3SSL2CLientHello = $44;
 $45 = $isFirst3AMQP;
 $46 = $45&1;
 if (!($46)) {
  $47 = $isFirst3SSL2CLientHello;
  $48 = $47&1;
  if (!($48)) {
   $0 = 1;
   $175 = $0;
   STACKTOP = sp;return ($175|0);
  }
 }
 $49 = $2;
 $50 = ($49>>>0)<(4);
 if ($50) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $51 = $isFirst3AMQP;
 $52 = $51&1;
 if ($52) {
  $53 = $1;
  $54 = (($53) + 3|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 << 24 >> 24;
  $57 = ($56|0)==(80);
  $59 = $57;
 } else {
  $59 = 0;
 }
 $58 = $59&1;
 $isAMQP = $58;
 $60 = $isFirst3SSL2CLientHello;
 $61 = $60&1;
 if ($61) {
  $62 = $1;
  $63 = (($62) + 3|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64 << 24 >> 24;
  $66 = ($65|0)==(2);
  if ($66) {
   $176 = 1;
  } else {
   $67 = $1;
   $68 = (($67) + 3|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69 << 24 >> 24;
   $71 = ($70|0)==(3);
   $176 = $71;
  }
  $73 = $176;
 } else {
  $73 = 0;
 }
 $72 = $73&1;
 $isFirst4SSL2ClientHello = $72;
 $74 = $isAMQP;
 $75 = $74&1;
 if (!($75)) {
  $76 = $isFirst4SSL2ClientHello;
  $77 = $76&1;
  if (!($77)) {
   $0 = 1;
   $175 = $0;
   STACKTOP = sp;return ($175|0);
  }
 }
 $78 = $2;
 $79 = ($78>>>0)<(5);
 if ($79) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $80 = $1;
 $81 = (($80) + 2|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82 << 24 >> 24;
 $84 = ($83|0)==(1);
 if ($84) {
  $85 = $1;
  $86 = (($85) + 3|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87 << 24 >> 24;
  $89 = ($88|0)==(3);
  if ($89) {
   $90 = $1;
   $91 = (($90) + 4|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92 << 24 >> 24;
   $94 = ($93|0)<=(3);
   if ($94) {
    $177 = 1;
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
  if ((label|0) == 30) {
   $95 = $1;
   $96 = (($95) + 3|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97 << 24 >> 24;
   $99 = ($98|0)==(2);
   if ($99) {
    $100 = $1;
    $101 = (($100) + 4|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = $102 << 24 >> 24;
    $104 = ($103|0)==(0);
    $178 = $104;
   } else {
    $178 = 0;
   }
   $177 = $178;
  }
  $106 = $177;
 } else {
  $106 = 0;
 }
 $105 = $106&1;
 $isSSL2Handshake = $105;
 $107 = $isSSL2Handshake;
 $108 = $107&1;
 if ($108) {
  $0 = 2;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $109 = $isAMQP;
 $110 = $109&1;
 if ($110) {
  $111 = $1;
  $112 = (($111) + 4|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113 << 24 >> 24;
  $115 = ($114|0)==(1);
  $117 = $115;
 } else {
  $117 = 0;
 }
 $116 = $117&1;
 $isFirst5OldAMQP = $116;
 $118 = $isAMQP;
 $119 = $118&1;
 if ($119) {
  $120 = $1;
  $121 = (($120) + 4|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122 << 24 >> 24;
  $124 = ($123|0)==(0);
  if ($124) {
   $179 = 1;
  } else {
   $125 = $1;
   $126 = (($125) + 4|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = ($128|0)==(2);
   if ($129) {
    $179 = 1;
   } else {
    $130 = $1;
    $131 = (($130) + 4|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132 << 24 >> 24;
    $134 = ($133|0)==(3);
    $179 = $134;
   }
  }
  $136 = $179;
 } else {
  $136 = 0;
 }
 $135 = $136&1;
 $isFirst5AMQP = $135;
 $137 = $isFirst5AMQP;
 $138 = $137&1;
 if (!($138)) {
  $139 = $isFirst5OldAMQP;
  $140 = $139&1;
  if (!($140)) {
   $0 = 1;
   $175 = $0;
   STACKTOP = sp;return ($175|0);
  }
 }
 $141 = $2;
 $142 = ($141>>>0)<(6);
 if ($142) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $143 = $1;
 $144 = (($143) + 5|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145 << 24 >> 24;
 $147 = ($146|0)!=(1);
 if ($147) {
  $0 = 1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $148 = $2;
 $149 = ($148>>>0)<(8);
 if ($149) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $150 = $1;
 $151 = (($150) + 6|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152 << 24 >> 24;
 $154 = ($153|0)==(0);
 do {
  if ($154) {
   $155 = $1;
   $156 = (($155) + 7|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157 << 24 >> 24;
   $159 = ($158|0)==(0);
   if (!($159)) {
    break;
   }
   $160 = $1;
   $161 = (($160) + 4|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162 << 24 >> 24;
   $164 = ($163|0)==(0);
   if ($164) {
    $0 = 5;
    $175 = $0;
    STACKTOP = sp;return ($175|0);
   }
   $165 = $1;
   $166 = (($165) + 4|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167 << 24 >> 24;
   $169 = ($168|0)==(2);
   if ($169) {
    $0 = 3;
    $175 = $0;
    STACKTOP = sp;return ($175|0);
   }
   $170 = $1;
   $171 = (($170) + 4|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172 << 24 >> 24;
   $174 = ($173|0)==(3);
   if (!($174)) {
    break;
   }
   $0 = 4;
   $175 = $0;
   STACKTOP = sp;return ($175|0);
  }
 } while(0);
 $0 = 6;
 $175 = $0;
 STACKTOP = sp;return ($175|0);
}
function _pni_protocol_name($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (9832 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _pn_delivery_map_init($db,$next) {
 $db = $db|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $next;
 $2 = HEAP32[608>>2]|0;
 $3 = (_pn_hash($2,0,0.75)|0);
 $4 = $0;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = $1;
 $7 = $0;
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _pn_delivery_map_free($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _pn_free($3);
 STACKTOP = sp;return;
}
function _pn_delivery_map_get($db,$id) {
 $db = $db|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $id;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (_pn_hash_get($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _pn_delivery_map_push($db,$delivery) {
 $db = $db|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $delivery;
 $2 = $1;
 $3 = (($2) + 128|0);
 $ds = $3;
 $4 = $ds;
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 _pn_delivery_state_init($4,$5,$7);
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $ds;
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 (_pn_hash_put($11,$13,$14)|0);
 $15 = $ds;
 STACKTOP = sp;return ($15|0);
}
function _pn_delivery_map_del($db,$delivery) {
 $db = $db|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $delivery;
 $2 = $1;
 $3 = (($2) + 128|0);
 $4 = (($3) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = (($7) + 128|0);
 $9 = (($8) + 5|0);
 HEAP8[$9>>0] = 0;
 $10 = $1;
 $11 = (($10) + 128|0);
 $12 = (($11) + 4|0);
 HEAP8[$12>>0] = 0;
 $13 = $0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (($16) + 128|0);
 $18 = HEAP32[$17>>2]|0;
 _pn_hash_del($15,$18);
 STACKTOP = sp;return;
}
function _pn_delivery_map_clear($dm) {
 $dm = $dm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dlv = 0, $entry = 0, $hash = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dm;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $hash = $3;
 $4 = $hash;
 $5 = (_pn_hash_head($4)|0);
 $entry = $5;
 while(1) {
  $6 = $entry;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $hash;
  $9 = $entry;
  $10 = (_pn_hash_value($8,$9)|0);
  $dlv = $10;
  $11 = $0;
  $12 = $dlv;
  _pn_delivery_map_del($11,$12);
  $13 = $hash;
  $14 = $entry;
  $15 = (_pn_hash_next($13,$14)|0);
  $entry = $15;
 }
 $16 = $0;
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function _pn_set_error_layer($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $layer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $layer = 0;
 while(1) {
  $1 = $layer;
  $2 = ($1|0)<(3);
  if (!($2)) {
   break;
  }
  $3 = $layer;
  $4 = $0;
  $5 = (($4) + 76|0);
  $6 = (($5) + ($3<<2)|0);
  HEAP32[$6>>2] = 10144;
  $7 = $layer;
  $8 = (($7) + 1)|0;
  $layer = $8;
 }
 STACKTOP = sp;return;
}
function _pn_channel_state($transport,$channel) {
 $transport = $transport|0;
 $channel = $channel|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $channel;
 $2 = $0;
 $3 = (($2) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = $5&65535;
 $7 = (_pn_hash_get($4,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pn_transport() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_pn_class_new(10160,256)|0);
 $transport = $1;
 $2 = $transport;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $4 = $transport;
 $5 = (($4) + 200|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_malloc($6)|0);
 $8 = $transport;
 $9 = (($8) + 208|0);
 HEAP32[$9>>2] = $7;
 $10 = $transport;
 $11 = (($10) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = $transport;
  _pn_transport_free($14);
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $15 = $transport;
 $16 = (($15) + 212|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_malloc($17)|0);
 $19 = $transport;
 $20 = (($19) + 220|0);
 HEAP32[$20>>2] = $18;
 $21 = $transport;
 $22 = (($21) + 220|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $25 = $transport;
  _pn_transport_free($25);
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $26 = $transport;
 $27 = (($26) + 152|0);
 HEAP32[$27>>2] = 4096;
 $28 = $transport;
 $29 = (($28) + 156|0);
 HEAP32[$29>>2] = 0;
 $30 = $transport;
 $31 = (($30) + 152|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_malloc($32)|0);
 $34 = $transport;
 $35 = (($34) + 160|0);
 HEAP32[$35>>2] = $33;
 $36 = $transport;
 $37 = (($36) + 160|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $41 = $transport;
  $0 = $41;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $40 = $transport;
  _pn_transport_free($40);
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _pn_transport_free($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 236|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  ___assert_fail((10376|0),(10248|0),548,(10400|0));
  // unreachable;
 }
 $7 = $0;
 $8 = (($7) + 236|0);
 HEAP8[$8>>0] = 1;
 $9 = $0;
 (_pn_decref($9)|0);
 STACKTOP = sp;return;
}
function _pn_transport_set_server($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 245|0);
  HEAP8[$4>>0] = 1;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10232|0),(10248|0),509,(10320|0));
  // unreachable;
 }
}
function _pn_transport_require_auth($transport,$required) {
 $transport = $transport|0;
 $required = $required|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $2 = $required&1;
 $1 = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = $5&1;
  $7 = $0;
  $8 = (($7) + 247|0);
  $9 = $6&1;
  HEAP8[$8>>0] = $9;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10232|0),(10248|0),523,(10344|0));
  // unreachable;
 }
}
function _pn_transport_bind($transport,$connection) {
 $transport = $transport|0;
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $connection;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((10232|0),(10248|0),602,(10424|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((10448|0),(10248|0),603,(10424|0));
  // unreachable;
 }
 $7 = $1;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $0 = -5;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $11 = $2;
 $12 = (($11) + 84|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $0 = -5;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $15 = $2;
 $16 = $1;
 $17 = (($16) + 12|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = $2;
 $20 = (($19) + 84|0);
 HEAP32[$20>>2] = $18;
 $21 = $2;
 (_pn_incref($21)|0);
 $22 = $2;
 _pn_connection_bound($22);
 $23 = $2;
 $24 = (($23) + 112|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_pn_string_size($25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $1;
  (_pn_sasl($28)|0);
  $29 = $1;
  $30 = $2;
  $31 = (($30) + 112|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_pn_string_get($32)|0);
  $34 = $2;
  $35 = (($34) + 116|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_pn_string_get($36)|0);
  _pni_sasl_set_user_password($29,$33,$37);
 }
 $38 = $1;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $1;
  $43 = $2;
  $44 = (($43) + 108|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_pn_string_get($45)|0);
  _pni_sasl_set_remote_hostname($42,$46);
 }
 $47 = $1;
 $48 = (($47) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $1;
  $52 = $2;
  $53 = (($52) + 108|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_pn_string_get($54)|0);
  (_pn_ssl_set_peer_hostname($51,$55)|0);
 }
 $56 = $1;
 $57 = (($56) + 238|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&1;
 if ($59) {
  $60 = $2;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 & 7;
  $64 = $63 | 16;
  $65 = $2;
  $66 = (($65) + 4|0);
  HEAP32[$66>>2] = $64;
  $67 = $1;
  $68 = $2;
  _pni_post_remote_open_events($67,$68);
  $69 = $1;
  $70 = (($69) + 246|0);
  HEAP8[$70>>0] = 0;
  $71 = $1;
  (_transport_consume($71)|0);
 }
 $0 = 0;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _pni_transport_unbind_handles($handles,$reset_state) {
 $handles = $handles|0;
 $reset_state = $reset_state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $h = 0, $key = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handles;
 $2 = $reset_state&1;
 $1 = $2;
 $3 = $0;
 $4 = (_pn_hash_head($3)|0);
 $h = $4;
 while(1) {
  $5 = $h;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = $h;
  $9 = (_pn_hash_key($7,$8)|0);
  $key = $9;
  $10 = $0;
  $11 = $h;
  $12 = (_pn_hash_value($10,$11)|0);
  $link = $12;
  $13 = $1;
  $14 = $13&1;
  if ($14) {
   $15 = $link;
   _pn_link_unbound($15);
  }
  $16 = $link;
  _pn_ep_decref($16);
  $17 = $0;
  $18 = $key;
  _pn_hash_del($17,$18);
  $19 = $0;
  $20 = $h;
  $21 = (_pn_hash_next($19,$20)|0);
  $h = $21;
 }
 STACKTOP = sp;return;
}
function _pni_transport_unbind_channels($channels) {
 $channels = $channels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $key = 0, $ssn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $channels;
 $1 = $0;
 $2 = (_pn_hash_head($1)|0);
 $h = $2;
 while(1) {
  $3 = $h;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $h;
  $7 = (_pn_hash_key($5,$6)|0);
  $key = $7;
  $8 = $0;
  $9 = $h;
  $10 = (_pn_hash_value($8,$9)|0);
  $ssn = $10;
  $11 = $ssn;
  $12 = (($11) + 96|0);
  $13 = (($12) + 8|0);
  _pn_delivery_map_clear($13);
  $14 = $ssn;
  $15 = (($14) + 96|0);
  $16 = (($15) + 16|0);
  _pn_delivery_map_clear($16);
  $17 = $ssn;
  $18 = (($17) + 96|0);
  $19 = (($18) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  _pni_transport_unbind_handles($20,1);
  $21 = $ssn;
  $22 = (($21) + 96|0);
  $23 = (($22) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  _pni_transport_unbind_handles($24,1);
  $25 = $ssn;
  _pn_session_unbound($25);
  $26 = $ssn;
  _pn_ep_decref($26);
  $27 = $0;
  $28 = $key;
  _pn_hash_del($27,$28);
  $29 = $0;
  $30 = $h;
  $31 = (_pn_hash_next($29,$30)|0);
  $h = $31;
 }
 STACKTOP = sp;return;
}
function _pn_transport_unbind($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $endpoint = 0;
 var $ssn = 0, $was_referenced = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((10232|0),(10248|0),667,(10464|0));
  // unreachable;
 }
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $8 = $1;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $conn = $10;
 $11 = $1;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = (($13) + 251|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&1;
 $17 = $16&1;
 $was_referenced = $17;
 $18 = $conn;
 $19 = (($18) + 132|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[80>>2]|0;
 $22 = $conn;
 (_pn_collector_put($20,$21,$22,7)|0);
 $23 = $conn;
 $24 = (_pn_session_head($23,0)|0);
 $ssn = $24;
 while(1) {
  $25 = $ssn;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $ssn;
  $28 = (($27) + 96|0);
  $29 = (($28) + 8|0);
  _pn_delivery_map_clear($29);
  $30 = $ssn;
  $31 = (($30) + 96|0);
  $32 = (($31) + 16|0);
  _pn_delivery_map_clear($32);
  $33 = $ssn;
  $34 = (_pn_session_next($33,0)|0);
  $ssn = $34;
 }
 $35 = $conn;
 $36 = (($35) + 60|0);
 $37 = HEAP32[$36>>2]|0;
 $endpoint = $37;
 while(1) {
  $38 = $endpoint;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   break;
  }
  $40 = $endpoint;
  $41 = (($40) + 24|0);
  _pn_condition_clear($41);
  $42 = $conn;
  $43 = $endpoint;
  _pn_modified($42,$43,1);
  $44 = $endpoint;
  $45 = (($44) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  $endpoint = $46;
 }
 $47 = $1;
 $48 = (($47) + 128|0);
 $49 = HEAP32[$48>>2]|0;
 _pni_transport_unbind_channels($49);
 $50 = $1;
 $51 = (($50) + 132|0);
 $52 = HEAP32[$51>>2]|0;
 _pni_transport_unbind_channels($52);
 $53 = $conn;
 _pn_connection_unbound($53);
 $54 = $was_referenced;
 $55 = $54&1;
 if ($55) {
  $56 = $conn;
  (_pn_decref($56)|0);
 }
 $0 = 0;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _pn_handle_state($ssn,$handle) {
 $ssn = $ssn|0;
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $handle;
 $2 = $0;
 $3 = (($2) + 96|0);
 $4 = (($3) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (_pn_hash_get($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _pni_disposition_batchable($disposition) {
 $disposition = $disposition|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $disposition;
 $2 = $1;
 $3 = (($2) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 if ((($6|0) == 36)) {
  $cond1 = ($9|0)==(0);
  if ($cond1) {
   $$expand_i1_val = 1;
   $0 = $$expand_i1_val;
  } else {
   label = 6;
  }
 } else if ((($6|0) == 38)) {
  $cond = ($9|0)==(0);
  if ($cond) {
   $$expand_i1_val2 = 1;
   $0 = $$expand_i1_val2;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $$expand_i1_val4 = 0;
  $0 = $$expand_i1_val4;
 }
 $$pre_trunc = $0;
 $10 = $$pre_trunc&1;
 STACKTOP = sp;return ($10|0);
}
function _pni_disposition_encode($disposition,$data) {
 $disposition = $disposition|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond1 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = $disposition;
 $1 = $data;
 $2 = $0;
 $cond = $2;
 $3 = $0;
 $4 = (($3) + 16|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 switch ($7|0) {
 case 39:  {
  $cond1 = ($10|0)==(0);
  if ($cond1) {
   $41 = $1;
   $42 = $0;
   $43 = (($42) + 44|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&1;
   $46 = $45&1;
   $47 = $0;
   $48 = (($47) + 45|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&1;
   $51 = $50&1;
   $52 = $0;
   $53 = (($52) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $46;
   $vararg_ptr8 = (($vararg_buffer5) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $51;
   $vararg_ptr9 = (($vararg_buffer5) + 8|0);
   HEAP32[$vararg_ptr9>>2] = $54;
   (_pn_data_fill($41,10504,$vararg_buffer5)|0);
   STACKTOP = sp;return;
  } else {
   label = 11;
  }
  break;
 }
 case 38:  {
  $cond2 = ($10|0)==(0);
  if ($cond2) {
   label = 8;
  } else {
   label = 11;
  }
  break;
 }
 case 35:  {
  $cond5 = ($10|0)==(0);
  if ($cond5) {
   $11 = $1;
   (_pn_data_put_list($11)|0);
   $12 = $1;
   (_pn_data_enter($12)|0);
   $13 = $1;
   $14 = $0;
   $15 = (($14) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   (_pn_data_put_uint($13,$16)|0);
   $17 = $1;
   $18 = $0;
   $19 = (($18) + 32|0);
   $20 = $19;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   (_pn_data_put_ulong($17,$22,$25)|0);
   $26 = $1;
   (_pn_data_exit($26)|0);
   STACKTOP = sp;return;
  } else {
   label = 11;
  }
  break;
 }
 case 36:  {
  $cond4 = ($10|0)==(0);
  if ($cond4) {
   label = 8;
  } else {
   label = 11;
  }
  break;
 }
 case 37:  {
  $cond3 = ($10|0)==(0);
  if ($cond3) {
   $27 = $1;
   $28 = $cond;
   $29 = (_pn_condition_is_set($28)|0);
   $30 = $29&1;
   $31 = $cond;
   $32 = (_pn_condition_get_name($31)|0);
   $33 = $cond;
   $34 = (_pn_condition_get_description($33)|0);
   $35 = $cond;
   $36 = (_pn_condition_info($35)|0);
   HEAP32[$vararg_buffer>>2] = $30;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   $37 = $vararg_ptr1;
   $38 = $37;
   HEAP32[$38>>2] = 29;
   $39 = (($37) + 4)|0;
   $40 = $39;
   HEAP32[$40>>2] = 0;
   $vararg_ptr2 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr2>>2] = $32;
   $vararg_ptr3 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr3>>2] = $34;
   $vararg_ptr4 = (($vararg_buffer) + 20|0);
   HEAP32[$vararg_ptr4>>2] = $36;
   (_pn_data_fill($27,10488,$vararg_buffer)|0);
   STACKTOP = sp;return;
  } else {
   label = 11;
  }
  break;
 }
 default: {
  label = 11;
 }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  $55 = $1;
  $56 = $0;
  $57 = (($56) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  (_pn_data_copy($55,$58)|0);
  STACKTOP = sp;return;
 }
}
function _pn_do_trace($transport,$ch,$dir,$args,$payload,$size) {
 $transport = $transport|0;
 $ch = $ch|0;
 $dir = $dir|0;
 $args = $args|0;
 $payload = $payload|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $e = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 56|0;
 $0 = $transport;
 $1 = $ch;
 $2 = $dir;
 $3 = $args;
 $4 = $payload;
 $5 = $size;
 $6 = $0;
 $7 = (($6) + 228|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = (($11) + 136|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = $14&65535;
 $16 = $2;
 $17 = ($16|0)==(1);
 $18 = $17 ? 10520 : 10528;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $18;
 (_pn_string_format($13,10512,$vararg_buffer)|0);
 $19 = $3;
 $20 = $0;
 $21 = (($20) + 136|0);
 $22 = HEAP32[$21>>2]|0;
 (_pn_inspect($19,$22)|0);
 $23 = $3;
 $24 = (_pn_data_size($23)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $0;
  $27 = (($26) + 136|0);
  $28 = HEAP32[$27>>2]|0;
  (_pn_string_addf($28,10536,$vararg_buffer2)|0);
 }
 $29 = $5;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $4;
  $32 = $5;
  $33 = (_pn_quote_data($buf,1024,$31,$32)|0);
  $e = $33;
  $34 = $0;
  $35 = (($34) + 136|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $5;
  $38 = $e;
  $39 = ($38|0)==(-3);
  $40 = $39 ? 10568 : 10584;
  HEAP32[$vararg_buffer4>>2] = $37;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $buf;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $40;
  (_pn_string_addf($36,10552,$vararg_buffer4)|0);
 }
 $41 = $0;
 $42 = $0;
 $43 = (($42) + 136|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_pn_string_get($44)|0);
 _pn_transport_log($41,$45);
 STACKTOP = sp;return;
}
function _pn_transport_log($transport,$message) {
 $transport = $transport|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $message;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $0;
  $7 = $1;
  FUNCTION_TABLE_vii[$5 & 127]($6,$7);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10232|0),(10248|0),2554,(11656|0));
  // unreachable;
 }
}
function _pn_post_frame($transport,$type,$ch,$fmt,$varargs) {
 $transport = $transport|0;
 $type = $type|0;
 $ch = $ch|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ap = 0;
 var $buf = 0, $err = 0, $frame = 0, $frame$byval_copy = 0, $frame_buf = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $wr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $frame$byval_copy = sp + 104|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 72|0;
 $buf = sp + 56|0;
 $frame = sp + 32|0;
 $1 = $transport;
 $2 = $type;
 $3 = $ch;
 $4 = $fmt;
 $5 = $1;
 $6 = (($5) + 148|0);
 $7 = HEAP32[$6>>2]|0;
 $frame_buf = $7;
 HEAP32[$ap>>2] = $varargs;
 $8 = $1;
 $9 = (($8) + 144|0);
 $10 = HEAP32[$9>>2]|0;
 _pn_data_clear($10);
 $11 = $1;
 $12 = (($11) + 144|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = (_pn_data_vfill($13,$14,$ap)|0);
 $err = $15;
 $16 = $err;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $1;
  $19 = $4;
  $20 = $err;
  $21 = (_pn_code($20)|0);
  $22 = $1;
  $23 = (($22) + 144|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_pn_data_error($24)|0);
  $26 = (_pn_error_text($25)|0);
  HEAP32[$vararg_buffer>>2] = $19;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $21;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $26;
  _pn_transport_logf($18,10592,$vararg_buffer);
  $0 = -2;
  $138 = $0;
  STACKTOP = sp;return ($138|0);
 }
 $27 = $1;
 $28 = $3;
 $29 = $1;
 $30 = (($29) + 144|0);
 $31 = HEAP32[$30>>2]|0;
 _pn_do_trace($27,$28,1,$31,0,0);
 while(1) {
  $32 = $frame_buf;
  _pn_buffer_clear($32);
  $33 = $frame_buf;
  _pn_buffer_memory($buf,$33);
  $34 = $frame_buf;
  $35 = (_pn_buffer_available($34)|0);
  HEAP32[$buf>>2] = $35;
  $36 = $1;
  $37 = (($36) + 144|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($buf) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$buf>>2]|0;
  $42 = (_pn_data_encode($38,$40,$41)|0);
  $wr = $42;
  $43 = $wr;
  $44 = ($43|0)<(0);
  if (!($44)) {
   break;
  }
  $45 = $wr;
  $46 = ($45|0)==(-3);
  if (!($46)) {
   label = 7;
   break;
  }
  $47 = $frame_buf;
  $48 = $frame_buf;
  $49 = (_pn_buffer_available($48)|0);
  $50 = $49<<1;
  (_pn_buffer_ensure($47,$50)|0);
 }
 if ((label|0) == 7) {
  $51 = $1;
  $52 = $wr;
  $53 = (_pn_code($52)|0);
  HEAP32[$vararg_buffer3>>2] = $53;
  _pn_transport_logf($51,10624,$vararg_buffer3);
  $0 = -2;
  $138 = $0;
  STACKTOP = sp;return ($138|0);
 }
 ;HEAP32[$frame+0>>2]=0|0;HEAP32[$frame+4>>2]=0|0;HEAP32[$frame+8>>2]=0|0;HEAP32[$frame+12>>2]=0|0;HEAP32[$frame+16>>2]=0|0;
 $54 = $2;
 HEAP8[$frame>>0] = $54;
 $55 = $3;
 $56 = (($frame) + 2|0);
 HEAP16[$56>>1] = $55;
 $57 = (($buf) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($frame) + 16|0);
 HEAP32[$59>>2] = $58;
 $60 = $wr;
 $61 = (($frame) + 12|0);
 HEAP32[$61>>2] = $60;
 while(1) {
  $62 = $1;
  $63 = (($62) + 160|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $1;
  $66 = (($65) + 156|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($64) + ($67)|0);
  $69 = $1;
  $70 = (($69) + 152|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $1;
  $73 = (($72) + 156|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($71) - ($74))|0;
  ;HEAP32[$frame$byval_copy+0>>2]=HEAP32[$frame+0>>2]|0;HEAP32[$frame$byval_copy+4>>2]=HEAP32[$frame+4>>2]|0;HEAP32[$frame$byval_copy+8>>2]=HEAP32[$frame+8>>2]|0;HEAP32[$frame$byval_copy+12>>2]=HEAP32[$frame+12>>2]|0;HEAP32[$frame$byval_copy+16>>2]=HEAP32[$frame+16>>2]|0;
  $76 = (_pn_write_frame($68,$75,$frame$byval_copy)|0);
  $n = $76;
  $77 = ($76|0)!=(0);
  $78 = $77 ^ 1;
  if (!($78)) {
   break;
  }
  $79 = $1;
  $80 = (($79) + 152|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81<<1;
  HEAP32[$80>>2] = $82;
  $83 = $1;
  $84 = (($83) + 160|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $1;
  $87 = (($86) + 152|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (_realloc($85,$88)|0);
  $90 = $1;
  $91 = (($90) + 160|0);
  HEAP32[$91>>2] = $89;
 }
 $92 = $1;
 $93 = (($92) + 184|0);
 $94 = $93;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (_i64Add(($96|0),($99|0),1,0)|0);
 $101 = tempRet0;
 $102 = $93;
 $103 = $102;
 HEAP32[$103>>2] = $100;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $101;
 $106 = $1;
 $107 = (($106) + 228|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 & 1;
 $110 = ($109|0)!=(0);
 if ($110) {
  $111 = $1;
  $112 = (($111) + 136|0);
  $113 = HEAP32[$112>>2]|0;
  (_pn_string_set($113,10648)|0);
  $114 = $1;
  $115 = (($114) + 136|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $1;
  $118 = (($117) + 160|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $1;
  $121 = (($120) + 156|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) + ($122)|0);
  $124 = $n;
  (_pn_quote($116,$123,$124)|0);
  $125 = $1;
  $126 = (($125) + 136|0);
  $127 = HEAP32[$126>>2]|0;
  (_pn_string_addf($127,10656,$vararg_buffer6)|0);
  $128 = $1;
  $129 = $1;
  $130 = (($129) + 136|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (_pn_string_get($131)|0);
  _pn_transport_log($128,$132);
 }
 $133 = $n;
 $134 = $1;
 $135 = (($134) + 156|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = (($136) + ($133))|0;
 HEAP32[$135>>2] = $137;
 $0 = 0;
 $138 = $0;
 STACKTOP = sp;return ($138|0);
}
function _pn_transport_logf($transport,$fmt,$varargs) {
 $transport = $transport|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $transport;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = $1;
 _pn_transport_vlogf($2,$3,$ap);
 STACKTOP = sp;return;
}
function _pn_post_amqp_transfer_frame($transport,$ch,$handle,$id,$payload,$tag,$message_format,$settled,$more,$frame_limit,$0,$1,$state) {
 $transport = $transport|0;
 $ch = $ch|0;
 $handle = $handle|0;
 $id = $id|0;
 $payload = $payload|0;
 $tag = $tag|0;
 $message_format = $message_format|0;
 $settled = $settled|0;
 $more = $more|0;
 $frame_limit = $frame_limit|0;
 $0 = $0|0;
 $1 = $1|0;
 $state = $state|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $available = 0, $buf = 0, $err = 0, $frame = 0, $frame1 = 0, $frame1$byval_copy = 0, $framecount = 0, $more_flag = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer11 = 0;
 var $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $wr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $frame1$byval_copy = sp + 176|0;
 $vararg_buffer18 = sp + 80|0;
 $vararg_buffer15 = sp + 72|0;
 $vararg_buffer11 = sp + 64|0;
 $vararg_buffer = sp + 8|0;
 $13 = sp;
 $buf = sp + 120|0;
 $frame1 = sp + 88|0;
 $3 = $transport;
 $4 = $ch;
 $5 = $handle;
 $6 = $id;
 $7 = $payload;
 $8 = $tag;
 $9 = $message_format;
 $15 = $settled&1;
 $10 = $15;
 $16 = $more&1;
 $11 = $16;
 $12 = $frame_limit;
 $17 = $13;
 $18 = $17;
 HEAP32[$18>>2] = $0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $1;
 $14 = $state;
 $21 = $11;
 $22 = $21&1;
 $23 = $22&1;
 $more_flag = $23;
 $framecount = 0;
 $24 = $3;
 $25 = (($24) + 148|0);
 $26 = HEAP32[$25>>2]|0;
 $frame = $26;
 L1: while(1) {
  $27 = $3;
  $28 = (($27) + 144|0);
  $29 = HEAP32[$28>>2]|0;
  _pn_data_clear($29);
  $30 = $3;
  $31 = (($30) + 144|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $5;
  $34 = $6;
  $35 = $8;
  $36 = HEAP32[$35>>2]|0;
  $37 = $8;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $9;
  $41 = $10;
  $42 = $41&1;
  $43 = $42&1;
  $44 = $more_flag;
  $45 = $44&1;
  $46 = $45&1;
  $47 = $13;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($47) + 4)|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = ($49|0)!=(0);
  $54 = ($52|0)!=(0);
  $55 = $53 | $54;
  $56 = $55&1;
  $57 = $13;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($57) + 4)|0;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = $14;
  $64 = $vararg_buffer;
  $65 = $64;
  HEAP32[$65>>2] = 20;
  $66 = (($64) + 4)|0;
  $67 = $66;
  HEAP32[$67>>2] = 0;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  $vararg_ptr2 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  $vararg_ptr3 = (($vararg_buffer) + 16|0);
  HEAP32[$vararg_ptr3>>2] = $36;
  $vararg_ptr4 = (($vararg_buffer) + 20|0);
  HEAP32[$vararg_ptr4>>2] = $39;
  $vararg_ptr5 = (($vararg_buffer) + 24|0);
  HEAP32[$vararg_ptr5>>2] = $40;
  $vararg_ptr6 = (($vararg_buffer) + 28|0);
  HEAP32[$vararg_ptr6>>2] = $43;
  $vararg_ptr7 = (($vararg_buffer) + 32|0);
  HEAP32[$vararg_ptr7>>2] = $46;
  $vararg_ptr8 = (($vararg_buffer) + 36|0);
  HEAP32[$vararg_ptr8>>2] = $56;
  $vararg_ptr9 = (($vararg_buffer) + 40|0);
  $68 = $vararg_ptr9;
  $69 = $68;
  HEAP32[$69>>2] = $59;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = $62;
  $vararg_ptr10 = (($vararg_buffer) + 48|0);
  HEAP32[$vararg_ptr10>>2] = $63;
  $72 = (_pn_data_fill($32,10664,$vararg_buffer)|0);
  $err = $72;
  $73 = $err;
  $74 = ($73|0)!=(0);
  if ($74) {
   label = 3;
   break;
  }
  L4: while(1) {
   while(1) {
    $83 = $frame;
    _pn_buffer_clear($83);
    $84 = $frame;
    _pn_buffer_memory($buf,$84);
    $85 = $frame;
    $86 = (_pn_buffer_available($85)|0);
    HEAP32[$buf>>2] = $86;
    $87 = $3;
    $88 = (($87) + 144|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($buf) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[$buf>>2]|0;
    $93 = (_pn_data_encode($89,$91,$92)|0);
    $wr = $93;
    $94 = $wr;
    $95 = ($94|0)<(0);
    if ($95) {
     $96 = $wr;
     $97 = ($96|0)==(-3);
     if (!($97)) {
      label = 9;
      break L1;
     }
     $98 = $frame;
     $99 = $frame;
     $100 = (_pn_buffer_available($99)|0);
     $101 = $100<<1;
     (_pn_buffer_ensure($98,$101)|0);
     continue;
    }
    $105 = $wr;
    HEAP32[$buf>>2] = $105;
    $106 = $7;
    $107 = HEAP32[$106>>2]|0;
    $available = $107;
    $108 = $3;
    $109 = (($108) + 44|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)!=(0);
    if ($111) {
     $112 = $available;
     $113 = HEAP32[$buf>>2]|0;
     $114 = (($112) + ($113))|0;
     $115 = $3;
     $116 = (($115) + 44|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) - 8)|0;
     $119 = ($114>>>0)>($118>>>0);
     if ($119) {
      $120 = $3;
      $121 = (($120) + 44|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) - 8)|0;
      $124 = HEAP32[$buf>>2]|0;
      $125 = (($123) - ($124))|0;
      $available = $125;
      $126 = $more_flag;
      $127 = $126&1;
      $128 = $127&1;
      $129 = ($128|0)==(0);
      if ($129) {
       label = 13;
       break L4;
      }
     } else {
      $130 = $more_flag;
      $131 = $130&1;
      $132 = $131&1;
      $133 = ($132|0)==(1);
      if ($133) {
       $134 = $11;
       $135 = $134&1;
       $136 = $135&1;
       $137 = ($136|0)==(0);
       if ($137) {
        label = 17;
        break L4;
       }
      }
     }
    }
    $138 = $frame;
    $139 = (_pn_buffer_available($138)|0);
    $140 = $available;
    $141 = HEAP32[$buf>>2]|0;
    $142 = (($140) + ($141))|0;
    $143 = ($139>>>0)<($142>>>0);
    if (!($143)) {
     break;
    }
    $144 = $frame;
    $145 = $available;
    $146 = HEAP32[$buf>>2]|0;
    $147 = (($145) + ($146))|0;
    (_pn_buffer_ensure($144,$147)|0);
   }
   $148 = $3;
   $149 = $4;
   $150 = $3;
   $151 = (($150) + 144|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $7;
   $154 = (($153) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $available;
   _pn_do_trace($148,$149,1,$152,$155,$156);
   $157 = (($buf) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = HEAP32[$buf>>2]|0;
   $160 = (($158) + ($159)|0);
   $161 = $7;
   $162 = (($161) + 4|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $available;
   _memmove(($160|0),($163|0),($164|0))|0;
   $165 = $available;
   $166 = $7;
   $167 = (($166) + 4|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + ($165)|0);
   HEAP32[$167>>2] = $169;
   $170 = $available;
   $171 = $7;
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) - ($170))|0;
   HEAP32[$171>>2] = $173;
   $174 = $available;
   $175 = HEAP32[$buf>>2]|0;
   $176 = (($175) + ($174))|0;
   HEAP32[$buf>>2] = $176;
   ;HEAP32[$frame1+0>>2]=0|0;HEAP32[$frame1+4>>2]=0|0;HEAP32[$frame1+8>>2]=0|0;HEAP32[$frame1+12>>2]=0|0;HEAP32[$frame1+16>>2]=0|0;
   $177 = $4;
   $178 = (($frame1) + 2|0);
   HEAP16[$178>>1] = $177;
   $179 = (($buf) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($frame1) + 16|0);
   HEAP32[$181>>2] = $180;
   $182 = HEAP32[$buf>>2]|0;
   $183 = (($frame1) + 12|0);
   HEAP32[$183>>2] = $182;
   while(1) {
    $184 = $3;
    $185 = (($184) + 160|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $3;
    $188 = (($187) + 156|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($186) + ($189)|0);
    $191 = $3;
    $192 = (($191) + 152|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $3;
    $195 = (($194) + 156|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = (($193) - ($196))|0;
    ;HEAP32[$frame1$byval_copy+0>>2]=HEAP32[$frame1+0>>2]|0;HEAP32[$frame1$byval_copy+4>>2]=HEAP32[$frame1+4>>2]|0;HEAP32[$frame1$byval_copy+8>>2]=HEAP32[$frame1+8>>2]|0;HEAP32[$frame1$byval_copy+12>>2]=HEAP32[$frame1+12>>2]|0;HEAP32[$frame1$byval_copy+16>>2]=HEAP32[$frame1+16>>2]|0;
    $198 = (_pn_write_frame($190,$197,$frame1$byval_copy)|0);
    $n = $198;
    $199 = ($198|0)!=(0);
    $200 = $199 ^ 1;
    if (!($200)) {
     break;
    }
    $201 = $3;
    $202 = (($201) + 152|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $203<<1;
    HEAP32[$202>>2] = $204;
    $205 = $3;
    $206 = (($205) + 160|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $3;
    $209 = (($208) + 152|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (_realloc($207,$210)|0);
    $212 = $3;
    $213 = (($212) + 160|0);
    HEAP32[$213>>2] = $211;
   }
   $214 = $3;
   $215 = (($214) + 184|0);
   $216 = $215;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $219 = (($216) + 4)|0;
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $222 = (_i64Add(($218|0),($221|0),1,0)|0);
   $223 = tempRet0;
   $224 = $215;
   $225 = $224;
   HEAP32[$225>>2] = $222;
   $226 = (($224) + 4)|0;
   $227 = $226;
   HEAP32[$227>>2] = $223;
   $228 = $framecount;
   $229 = (($228) + 1)|0;
   $framecount = $229;
   $230 = $3;
   $231 = (($230) + 228|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $232 & 1;
   $234 = ($233|0)!=(0);
   if ($234) {
    $235 = $3;
    $236 = (($235) + 136|0);
    $237 = HEAP32[$236>>2]|0;
    (_pn_string_set($237,10648)|0);
    $238 = $3;
    $239 = (($238) + 136|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $3;
    $242 = (($241) + 160|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $3;
    $245 = (($244) + 156|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = (($243) + ($246)|0);
    $248 = $n;
    (_pn_quote($240,$247,$248)|0);
    $249 = $3;
    $250 = (($249) + 136|0);
    $251 = HEAP32[$250>>2]|0;
    (_pn_string_addf($251,10656,$vararg_buffer18)|0);
    $252 = $3;
    $253 = $3;
    $254 = (($253) + 136|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = (_pn_string_get($255)|0);
    _pn_transport_log($252,$256);
   }
   $257 = $n;
   $258 = $3;
   $259 = (($258) + 156|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + ($257))|0;
   HEAP32[$259>>2] = $261;
   $262 = $7;
   $263 = HEAP32[$262>>2]|0;
   $264 = ($263>>>0)>(0);
   if ($264) {
    $265 = $framecount;
    $266 = $12;
    $267 = ($265|0)<($266|0);
    $270 = $267;
   } else {
    $270 = 0;
   }
   if (!($270)) {
    label = 31;
    break L1;
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $more_flag = 1;
   continue;
  }
  else if ((label|0) == 17) {
   label = 0;
   $more_flag = 0;
   continue;
  }
 }
 if ((label|0) == 3) {
  $75 = $3;
  $76 = $err;
  $77 = (_pn_code($76)|0);
  $78 = $3;
  $79 = (($78) + 144|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (_pn_data_error($80)|0);
  $82 = (_pn_error_text($81)|0);
  HEAP32[$vararg_buffer11>>2] = $77;
  $vararg_ptr14 = (($vararg_buffer11) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $82;
  _pn_transport_logf($75,10680,$vararg_buffer11);
  $2 = -2;
  $269 = $2;
  STACKTOP = sp;return ($269|0);
 }
 else if ((label|0) == 9) {
  $102 = $3;
  $103 = $wr;
  $104 = (_pn_code($103)|0);
  HEAP32[$vararg_buffer15>>2] = $104;
  _pn_transport_logf($102,10624,$vararg_buffer15);
  $2 = -2;
  $269 = $2;
  STACKTOP = sp;return ($269|0);
 }
 else if ((label|0) == 31) {
  $268 = $framecount;
  $2 = $268;
  $269 = $2;
  STACKTOP = sp;return ($269|0);
 }
 return (0)|0;
}
function _pn_post_close($transport,$condition,$description) {
 $transport = $transport|0;
 $condition = $condition|0;
 $description = $description|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $info = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $condition;
 $2 = $description;
 $cond = 0;
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_pn_connection_condition($9)|0);
  $cond = $10;
 }
 $info = 0;
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = $cond;
  $14 = (_pn_condition_is_set($13)|0);
  if ($14) {
   $15 = $cond;
   $16 = (_pn_condition_get_name($15)|0);
   $1 = $16;
   $17 = $cond;
   $18 = (_pn_condition_get_description($17)|0);
   $2 = $18;
   $19 = $cond;
   $20 = (_pn_condition_info($19)|0);
   $info = $20;
  }
 }
 $21 = $0;
 $22 = $1;
 $23 = ($22|0)!=(0|0);
 $24 = $23&1;
 $25 = $1;
 $26 = $2;
 $27 = $info;
 $28 = $vararg_buffer;
 $29 = $28;
 HEAP32[$29>>2] = 24;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = 0;
 $vararg_ptr1 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr1>>2] = $24;
 $vararg_ptr2 = (($vararg_buffer) + 12|0);
 $32 = $vararg_ptr2;
 $33 = $32;
 HEAP32[$33>>2] = 29;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = 0;
 $vararg_ptr3 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr3>>2] = $25;
 $vararg_ptr4 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr4>>2] = $26;
 $vararg_ptr5 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr5>>2] = $27;
 $36 = (_pn_post_frame($21,0,0,10720,$vararg_buffer)|0);
 STACKTOP = sp;return ($36|0);
}
function _pn_do_error($transport,$condition,$fmt,$varargs) {
 $transport = $transport|0;
 $condition = $condition|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap = 0, $buf = 0, $collector = 0, $cond = 0, $extended = 0, $first = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 48|0;
 $buf = sp + 2128|0;
 $extended = sp + 80|0;
 $0 = $transport;
 $1 = $condition;
 $2 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  (_vsnprintf($buf,1024,$5,$ap)|0);
 } else {
  HEAP8[$buf>>0] = 0;
 }
 $6 = $0;
 $7 = (($6) + 239|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $0;
  $11 = (($10) + 237|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&1;
  if (!($13)) {
   $14 = $0;
   $15 = $vararg_buffer;
   $16 = $15;
   HEAP32[$16>>2] = 16;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = 0;
   $vararg_ptr1 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr1>>2] = 10584;
   (_pn_post_frame($14,0,0,10736,$vararg_buffer)|0);
  }
  $19 = $0;
  $20 = $1;
  (_pn_post_close($19,$20,$buf)|0);
  $21 = $0;
  $22 = (($21) + 239|0);
  HEAP8[$22>>0] = 1;
 }
 $23 = $0;
 $24 = (($23) + 246|0);
 HEAP8[$24>>0] = 1;
 $25 = $0;
 $26 = (($25) + 60|0);
 $cond = $26;
 $27 = $cond;
 $28 = (_pn_condition_is_set($27)|0);
 if ($28) {
  $34 = $cond;
  $35 = (_pn_condition_get_description($34)|0);
  $first = $35;
  $36 = $first;
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $2;
   $39 = ($38|0)!=(0|0);
   if ($39) {
    $40 = $first;
    HEAP32[$vararg_buffer2>>2] = $40;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $buf;
    (_snprintf($extended,2048,10744,$vararg_buffer2)|0);
    $41 = $cond;
    (_pn_condition_set_description($41,$extended)|0);
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   $42 = $2;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    $44 = $cond;
    (_pn_condition_set_description($44,$buf)|0);
   }
  }
 } else {
  $29 = $cond;
  $30 = $1;
  (_pn_condition_set_name($29,$30)|0);
  $31 = $2;
  $32 = ($31|0)!=(0|0);
  if ($32) {
   $33 = $cond;
   (_pn_condition_set_description($33,$buf)|0);
  }
 }
 $45 = $0;
 $46 = (_pni_transport_collector($45)|0);
 $collector = $46;
 $47 = $collector;
 $48 = HEAP32[80>>2]|0;
 $49 = $0;
 (_pn_collector_put($47,$48,$49,31)|0);
 $50 = $0;
 $51 = (($50) + 228|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 & 4;
 $54 = ($53|0)!=(0);
 if (!($54)) {
  $57 = $0;
  $58 = (($57) + 243|0);
  HEAP8[$58>>0] = 1;
  $59 = $0;
  _pni_close_tail($59);
  STACKTOP = sp;return -2;
 }
 $55 = $0;
 $56 = $1;
 HEAP32[$vararg_buffer6>>2] = $56;
 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $buf;
 _pn_transport_logf($55,10752,$vararg_buffer6);
 $57 = $0;
 $58 = (($57) + 243|0);
 HEAP8[$58>>0] = 1;
 $59 = $0;
 _pni_close_tail($59);
 STACKTOP = sp;return -2;
}
function _pn_do_open($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $conn = 0, $container_q = 0, $err = 0, $hostname_q = 0, $remote_container = 0, $remote_container$byval_copy = 0, $remote_hostname = 0, $remote_hostname$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $remote_hostname$byval_copy = sp + 104|0;
 $remote_container$byval_copy = sp + 96|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer = sp;
 $container_q = sp + 115|0;
 $hostname_q = sp + 114|0;
 $remote_container = sp + 64|0;
 $remote_hostname = sp + 56|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $1;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $conn = $8;
 $9 = $1;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 _pn_data_clear($11);
 $12 = $1;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 _pn_data_clear($14);
 $15 = $1;
 $16 = (($15) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 _pn_data_clear($17);
 $18 = $4;
 $19 = $1;
 $20 = (($19) + 44|0);
 $21 = $1;
 $22 = (($21) + 234|0);
 $23 = $1;
 $24 = (($23) + 92|0);
 $25 = $1;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = (($28) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $1;
 $32 = (($31) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$vararg_buffer>>2] = $container_q;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $remote_container;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $hostname_q;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $remote_hostname;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $20;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $22;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $24;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $27;
 $vararg_ptr8 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $30;
 $vararg_ptr9 = (($vararg_buffer) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $33;
 $34 = (_pn_data_scan($18,10768,$vararg_buffer)|0);
 $err = $34;
 $35 = $err;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $err;
  $0 = $37;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $38 = $1;
 $39 = (($38) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40>>>0)>(0);
 if ($41) {
  $42 = $1;
  $43 = (($42) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44>>>0)<(512);
  if ($45) {
   $46 = $1;
   $47 = $1;
   $48 = (($47) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $49;
   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
   HEAP32[$vararg_ptr13>>2] = 512;
   _pn_transport_logf($46,10792,$vararg_buffer10);
   $50 = $1;
   $51 = (($50) + 44|0);
   HEAP32[$51>>2] = 512;
  }
 }
 $52 = HEAP8[$container_q>>0]|0;
 $53 = $52&1;
 if ($53) {
  ;HEAP32[$remote_container$byval_copy+0>>2]=HEAP32[$remote_container+0>>2]|0;HEAP32[$remote_container$byval_copy+4>>2]=HEAP32[$remote_container+4>>2]|0;
  $54 = (_pn_bytes_strdup($remote_container$byval_copy)|0);
  $55 = $1;
  $56 = (($55) + 16|0);
  HEAP32[$56>>2] = $54;
 } else {
  $57 = $1;
  $58 = (($57) + 16|0);
  HEAP32[$58>>2] = 0;
 }
 $59 = HEAP8[$hostname_q>>0]|0;
 $60 = $59&1;
 if ($60) {
  ;HEAP32[$remote_hostname$byval_copy+0>>2]=HEAP32[$remote_hostname+0>>2]|0;HEAP32[$remote_hostname$byval_copy+4>>2]=HEAP32[$remote_hostname+4>>2]|0;
  $61 = (_pn_bytes_strdup($remote_hostname$byval_copy)|0);
  $62 = $1;
  $63 = (($62) + 20|0);
  HEAP32[$63>>2] = $61;
 } else {
  $64 = $1;
  $65 = (($64) + 20|0);
  HEAP32[$65>>2] = 0;
 }
 $66 = $conn;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $conn;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 & 7;
  $72 = $71 | 16;
  $73 = $conn;
  $74 = (($73) + 4|0);
  HEAP32[$74>>2] = $72;
  $75 = $1;
  $76 = $conn;
  _pni_post_remote_open_events($75,$76);
 } else {
  $77 = $1;
  $78 = (($77) + 246|0);
  HEAP8[$78>>0] = 1;
 }
 $79 = $1;
 $80 = (($79) + 238|0);
 HEAP8[$80>>0] = 1;
 $0 = 0;
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _pn_do_begin($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $next = 0, $remote_channel = 0, $reply = 0, $ssn = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $reply = sp + 44|0;
 $remote_channel = sp + 40|0;
 $next = sp + 20|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $reply;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $remote_channel;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $next;
 $7 = (_pn_data_scan($6,10848,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $11 = HEAP8[$reply>>0]|0;
 $12 = $11&1;
 if ($12) {
  $13 = $1;
  $14 = (($13) + 128|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP16[$remote_channel>>1]|0;
  $17 = $16&65535;
  $18 = (_pn_hash_get($15,$17)|0);
  $ssn = $18;
 } else {
  $19 = $1;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_pn_session($21)|0);
  $ssn = $22;
 }
 $23 = HEAP32[$next>>2]|0;
 $24 = $ssn;
 $25 = (($24) + 96|0);
 $26 = (($25) + 24|0);
 HEAP32[$26>>2] = $23;
 $27 = $ssn;
 $28 = $3;
 _pni_map_remote_channel($27,$28);
 $29 = $ssn;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 7;
 $33 = $32 | 16;
 $34 = $ssn;
 $35 = (($34) + 4|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 132|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[80>>2]|0;
 $42 = $ssn;
 (_pn_collector_put($40,$41,$42,15)|0);
 $0 = 0;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _pn_find_link($ssn,$name,$is_sender) {
 $ssn = $ssn|0;
 $name = $name|0;
 $is_sender = $is_sender|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $link = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ssn;
 $3 = $is_sender&1;
 $2 = $3;
 $4 = $2;
 $5 = $4&1;
 $6 = $5 ? 2 : 3;
 $type = $6;
 $i = 0;
 L1: while(1) {
  $7 = $i;
  $8 = $1;
  $9 = (($8) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_pn_list_size($10)|0);
  $12 = ($7>>>0)<($11>>>0);
  if (!($12)) {
   label = 10;
   break;
  }
  $13 = $1;
  $14 = (($13) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $i;
  $17 = (_pn_list_get($15,$16)|0);
  $link = $17;
  $18 = $link;
  $19 = HEAP32[$18>>2]|0;
  $20 = $type;
  $21 = ($19|0)==($20|0);
  do {
   if ($21) {
    $22 = $link;
    $23 = (($22) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 & 4;
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = $link;
     $28 = (($27) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 & 32;
     $31 = ($30|0)!=(0);
     if ($31) {
      break;
     }
    }
    $32 = (($name) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $link;
    $35 = (($34) + 252|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_pn_string_get($36)|0);
    $38 = HEAP32[$name>>2]|0;
    $39 = (_strncmp($33,$37,$38)|0);
    $40 = ($39|0)!=(0);
    if (!($40)) {
     label = 7;
     break L1;
    }
   }
  } while(0);
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 if ((label|0) == 7) {
  $41 = $link;
  $0 = $41;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _pn_terminus_set_address_bytes($terminus,$address) {
 $terminus = $terminus|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $terminus;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($address) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$address>>2]|0;
  $8 = (_pn_string_setn($4,$6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((10856|0),(10248|0),1199,(10872|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_do_attach($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0, $dist_mode = 0, $dist_mode$byval_copy = 0, $err = 0, $handle = 0, $idc = 0, $is_sender = 0, $link = 0, $name = 0;
 var $name$byval_copy = 0, $rcv_settle = 0, $rcv_settle_mode = 0, $rsrc = 0, $rtgt = 0, $snd_settle = 0, $snd_settle_mode = 0, $source = 0, $source$byval_copy = 0, $src_dr = 0, $src_dynamic = 0, $src_exp = 0, $src_exp$byval_copy = 0, $src_timeout = 0, $ssn = 0, $strbuf = 0, $strheap = 0, $strname = 0, $target = 0, $target$byval_copy = 0;
 var $tgt_dr = 0, $tgt_dynamic = 0, $tgt_exp = 0, $tgt_exp$byval_copy = 0, $tgt_timeout = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tgt_exp$byval_copy = sp + 296|0;
 $target$byval_copy = sp + 288|0;
 $dist_mode$byval_copy = sp + 280|0;
 $src_exp$byval_copy = sp + 272|0;
 $source$byval_copy = sp + 264|0;
 $name$byval_copy = sp + 256|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer21 = sp + 96|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer = sp + 8|0;
 $name = sp + 232|0;
 $handle = sp + 224|0;
 $is_sender = sp + 446|0;
 $source = sp + 216|0;
 $target = sp + 208|0;
 $src_dr = sp + 204|0;
 $tgt_dr = sp + 200|0;
 $src_exp = sp + 192|0;
 $tgt_exp = sp + 184|0;
 $src_timeout = sp + 176|0;
 $tgt_timeout = sp + 172|0;
 $src_dynamic = sp + 445|0;
 $tgt_dynamic = sp + 444|0;
 $idc = sp + 168|0;
 $dist_mode = sp + 160|0;
 $snd_settle = sp + 443|0;
 $rcv_settle = sp + 442|0;
 $snd_settle_mode = sp + 441|0;
 $rcv_settle_mode = sp + 440|0;
 $strbuf = sp + 312|0;
 $code = sp;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $name;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $handle;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $is_sender;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $snd_settle;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $snd_settle_mode;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $rcv_settle;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $rcv_settle_mode;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $source;
 $vararg_ptr8 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $src_dr;
 $vararg_ptr9 = (($vararg_buffer) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $src_exp;
 $vararg_ptr10 = (($vararg_buffer) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $src_timeout;
 $vararg_ptr11 = (($vararg_buffer) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $src_dynamic;
 $vararg_ptr12 = (($vararg_buffer) + 48|0);
 HEAP32[$vararg_ptr12>>2] = $dist_mode;
 $vararg_ptr13 = (($vararg_buffer) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $target;
 $vararg_ptr14 = (($vararg_buffer) + 56|0);
 HEAP32[$vararg_ptr14>>2] = $tgt_dr;
 $vararg_ptr15 = (($vararg_buffer) + 60|0);
 HEAP32[$vararg_ptr15>>2] = $tgt_exp;
 $vararg_ptr16 = (($vararg_buffer) + 64|0);
 HEAP32[$vararg_ptr16>>2] = $tgt_timeout;
 $vararg_ptr17 = (($vararg_buffer) + 68|0);
 HEAP32[$vararg_ptr17>>2] = $tgt_dynamic;
 $vararg_ptr18 = (($vararg_buffer) + 72|0);
 HEAP32[$vararg_ptr18>>2] = $idc;
 $7 = (_pn_data_scan($6,10904,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 $11 = HEAP32[$name>>2]|0;
 $12 = ($11>>>0)>=(128);
 if ($12) {
  $13 = HEAP32[$name>>2]|0;
  $14 = (($13) + 1)|0;
  $15 = (_malloc($14)|0);
  $16 = $15;
 } else {
  $16 = 0;
 }
 $strheap = $16;
 $17 = $strheap;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $strheap;
  $20 = $19;
 } else {
  $20 = $strbuf;
 }
 $strname = $20;
 $21 = $strname;
 $22 = (($name) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$name>>2]|0;
 (_strncpy(($21|0),($23|0),($24|0))|0);
 $25 = HEAP32[$name>>2]|0;
 $26 = $strname;
 $27 = (($26) + ($25)|0);
 HEAP8[$27>>0] = 0;
 $28 = $1;
 $29 = $3;
 $30 = (_pn_channel_state($28,$29)|0);
 $ssn = $30;
 $31 = $ssn;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  $33 = $1;
  (_pn_do_error($33,10944,10976,$vararg_buffer19)|0);
  $34 = $strheap;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $strheap;
   _free($36);
  }
  $0 = -1;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 $37 = $ssn;
 $38 = HEAP8[$is_sender>>0]|0;
 $39 = $38&1;
 ;HEAP32[$name$byval_copy+0>>2]=HEAP32[$name+0>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
 $40 = (_pn_find_link($37,$name$byval_copy,$39)|0);
 $link = $40;
 $41 = $link;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  $43 = HEAP8[$is_sender>>0]|0;
  $44 = $43&1;
  if ($44) {
   $45 = $ssn;
   $46 = $strname;
   $47 = (_pn_sender($45,$46)|0);
   $link = $47;
  } else {
   $48 = $ssn;
   $49 = $strname;
   $50 = (_pn_receiver($48,$49)|0);
   $link = $50;
  }
 }
 $51 = $strheap;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = $strheap;
  _free($53);
 }
 $54 = $link;
 $55 = HEAP32[$handle>>2]|0;
 _pni_map_remote_handle($54,$55);
 $56 = $link;
 $57 = (($56) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & 7;
 $60 = $59 | 16;
 $61 = $link;
 $62 = (($61) + 4|0);
 HEAP32[$62>>2] = $60;
 $63 = $link;
 $64 = (($63) + 148|0);
 $rsrc = $64;
 $65 = (($source) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  label = 22;
 } else {
  $68 = HEAP8[$src_dynamic>>0]|0;
  $69 = $68&1;
  if ($69) {
   label = 22;
  } else {
   $83 = $rsrc;
   (_pn_terminus_set_type($83,0)|0);
  }
 }
 if ((label|0) == 22) {
  $70 = $rsrc;
  (_pn_terminus_set_type($70,1)|0);
  $71 = $rsrc;
  ;HEAP32[$source$byval_copy+0>>2]=HEAP32[$source+0>>2]|0;HEAP32[$source$byval_copy+4>>2]=HEAP32[$source+4>>2]|0;
  (_pn_terminus_set_address_bytes($71,$source$byval_copy)|0);
  $72 = $rsrc;
  $73 = HEAP32[$src_dr>>2]|0;
  (_pn_terminus_set_durability($72,$73)|0);
  $74 = $rsrc;
  ;HEAP32[$src_exp$byval_copy+0>>2]=HEAP32[$src_exp+0>>2]|0;HEAP32[$src_exp$byval_copy+4>>2]=HEAP32[$src_exp+4>>2]|0;
  $75 = (_symbol2policy($src_exp$byval_copy)|0);
  (_pn_terminus_set_expiry_policy($74,$75)|0);
  $76 = $rsrc;
  $77 = HEAP32[$src_timeout>>2]|0;
  (_pn_terminus_set_timeout($76,$77)|0);
  $78 = $rsrc;
  $79 = HEAP8[$src_dynamic>>0]|0;
  $80 = $79&1;
  (_pn_terminus_set_dynamic($78,$80)|0);
  $81 = $rsrc;
  ;HEAP32[$dist_mode$byval_copy+0>>2]=HEAP32[$dist_mode+0>>2]|0;HEAP32[$dist_mode$byval_copy+4>>2]=HEAP32[$dist_mode+4>>2]|0;
  $82 = (_symbol2dist_mode($dist_mode$byval_copy)|0);
  (_pn_terminus_set_distribution_mode($81,$82)|0);
 }
 $84 = $link;
 $85 = (($84) + 192|0);
 $rtgt = $85;
 $86 = (($target) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  label = 26;
 } else {
  $89 = HEAP8[$tgt_dynamic>>0]|0;
  $90 = $89&1;
  if ($90) {
   label = 26;
  } else {
   $102 = $code;
   $103 = $102;
   HEAP32[$103>>2] = 0;
   $104 = (($102) + 4)|0;
   $105 = $104;
   HEAP32[$105>>2] = 0;
   $106 = $link;
   $107 = (($106) + 192|0);
   $108 = (($107) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   _pn_data_clear($109);
   $110 = $4;
   $111 = $link;
   $112 = (($111) + 192|0);
   $113 = (($112) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   HEAP32[$vararg_buffer21>>2] = $code;
   $vararg_ptr24 = (($vararg_buffer21) + 4|0);
   HEAP32[$vararg_ptr24>>2] = $114;
   $115 = (_pn_data_scan($110,11008,$vararg_buffer21)|0);
   $err = $115;
   $116 = $err;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $err;
    $0 = $118;
    $230 = $0;
    STACKTOP = sp;return ($230|0);
   }
   $119 = $code;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($119) + 4)|0;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   $125 = ($121|0)==(48);
   $126 = ($124|0)==(0);
   $127 = $125 & $126;
   if ($127) {
    $128 = $rtgt;
    (_pn_terminus_set_type($128,3)|0);
   } else {
    $129 = $rtgt;
    (_pn_terminus_set_type($129,0)|0);
   }
  }
 }
 if ((label|0) == 26) {
  $91 = $rtgt;
  (_pn_terminus_set_type($91,2)|0);
  $92 = $rtgt;
  ;HEAP32[$target$byval_copy+0>>2]=HEAP32[$target+0>>2]|0;HEAP32[$target$byval_copy+4>>2]=HEAP32[$target+4>>2]|0;
  (_pn_terminus_set_address_bytes($92,$target$byval_copy)|0);
  $93 = $rtgt;
  $94 = HEAP32[$tgt_dr>>2]|0;
  (_pn_terminus_set_durability($93,$94)|0);
  $95 = $rtgt;
  ;HEAP32[$tgt_exp$byval_copy+0>>2]=HEAP32[$tgt_exp+0>>2]|0;HEAP32[$tgt_exp$byval_copy+4>>2]=HEAP32[$tgt_exp+4>>2]|0;
  $96 = (_symbol2policy($tgt_exp$byval_copy)|0);
  (_pn_terminus_set_expiry_policy($95,$96)|0);
  $97 = $rtgt;
  $98 = HEAP32[$tgt_timeout>>2]|0;
  (_pn_terminus_set_timeout($97,$98)|0);
  $99 = $rtgt;
  $100 = HEAP8[$tgt_dynamic>>0]|0;
  $101 = $100&1;
  (_pn_terminus_set_dynamic($99,$101)|0);
 }
 $130 = HEAP8[$snd_settle>>0]|0;
 $131 = $130&1;
 if ($131) {
  $132 = HEAP8[$snd_settle_mode>>0]|0;
  $133 = $link;
  $134 = (($133) + 298|0);
  HEAP8[$134>>0] = $132;
 }
 $135 = HEAP8[$rcv_settle>>0]|0;
 $136 = $135&1;
 if ($136) {
  $137 = HEAP8[$rcv_settle_mode>>0]|0;
  $138 = $link;
  $139 = (($138) + 299|0);
  HEAP8[$139>>0] = $137;
 }
 $140 = $link;
 $141 = (($140) + 148|0);
 $142 = (($141) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 _pn_data_clear($143);
 $144 = $link;
 $145 = (($144) + 148|0);
 $146 = (($145) + 16|0);
 $147 = HEAP32[$146>>2]|0;
 _pn_data_clear($147);
 $148 = $link;
 $149 = (($148) + 148|0);
 $150 = (($149) + 12|0);
 $151 = HEAP32[$150>>2]|0;
 _pn_data_clear($151);
 $152 = $link;
 $153 = (($152) + 148|0);
 $154 = (($153) + 8|0);
 $155 = HEAP32[$154>>2]|0;
 _pn_data_clear($155);
 $156 = $link;
 $157 = (($156) + 192|0);
 $158 = (($157) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 _pn_data_clear($159);
 $160 = $link;
 $161 = (($160) + 192|0);
 $162 = (($161) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 _pn_data_clear($163);
 $164 = $4;
 $165 = $link;
 $166 = (($165) + 148|0);
 $167 = (($166) + 4|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $link;
 $170 = (($169) + 148|0);
 $171 = (($170) + 16|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = $link;
 $174 = (($173) + 148|0);
 $175 = (($174) + 12|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $link;
 $178 = (($177) + 148|0);
 $179 = (($178) + 8|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = $link;
 $182 = (($181) + 192|0);
 $183 = (($182) + 4|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = $link;
 $186 = (($185) + 192|0);
 $187 = (($186) + 8|0);
 $188 = HEAP32[$187>>2]|0;
 HEAP32[$vararg_buffer25>>2] = $168;
 $vararg_ptr28 = (($vararg_buffer25) + 4|0);
 HEAP32[$vararg_ptr28>>2] = $172;
 $vararg_ptr29 = (($vararg_buffer25) + 8|0);
 HEAP32[$vararg_ptr29>>2] = $176;
 $vararg_ptr30 = (($vararg_buffer25) + 12|0);
 HEAP32[$vararg_ptr30>>2] = $180;
 $vararg_ptr31 = (($vararg_buffer25) + 16|0);
 HEAP32[$vararg_ptr31>>2] = $184;
 $vararg_ptr32 = (($vararg_buffer25) + 20|0);
 HEAP32[$vararg_ptr32>>2] = $188;
 $189 = (_pn_data_scan($164,11032,$vararg_buffer25)|0);
 $err = $189;
 $190 = $err;
 $191 = ($190|0)!=(0);
 if ($191) {
  $192 = $err;
  $0 = $192;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 $193 = $link;
 $194 = (($193) + 148|0);
 $195 = (($194) + 4|0);
 $196 = HEAP32[$195>>2]|0;
 _pn_data_rewind($196);
 $197 = $link;
 $198 = (($197) + 148|0);
 $199 = (($198) + 16|0);
 $200 = HEAP32[$199>>2]|0;
 _pn_data_rewind($200);
 $201 = $link;
 $202 = (($201) + 148|0);
 $203 = (($202) + 12|0);
 $204 = HEAP32[$203>>2]|0;
 _pn_data_rewind($204);
 $205 = $link;
 $206 = (($205) + 148|0);
 $207 = (($206) + 8|0);
 $208 = HEAP32[$207>>2]|0;
 _pn_data_rewind($208);
 $209 = $link;
 $210 = (($209) + 192|0);
 $211 = (($210) + 4|0);
 $212 = HEAP32[$211>>2]|0;
 _pn_data_rewind($212);
 $213 = $link;
 $214 = (($213) + 192|0);
 $215 = (($214) + 8|0);
 $216 = HEAP32[$215>>2]|0;
 _pn_data_rewind($216);
 $217 = HEAP8[$is_sender>>0]|0;
 $218 = $217&1;
 if (!($218)) {
  $219 = HEAP32[$idc>>2]|0;
  $220 = $link;
  $221 = (($220) + 236|0);
  $222 = (($221) + 8|0);
  HEAP32[$222>>2] = $219;
 }
 $223 = $1;
 $224 = (($223) + 12|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225) + 132|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = HEAP32[80>>2]|0;
 $229 = $link;
 (_pn_collector_put($227,$228,$229,21)|0);
 $0 = 0;
 $230 = $0;
 STACKTOP = sp;return ($230|0);
}
function _pn_do_transfer($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $delivery = 0, $err = 0, $handle = 0, $has_type = 0, $id = 0, $id_present = 0, $incoming = 0, $link = 0, $more = 0, $settled = 0, $ssn = 0, $state = 0, $tag = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 136|0;
 $vararg_buffer11 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer = sp + 8|0;
 $handle = sp + 112|0;
 $tag = sp + 104|0;
 $id_present = sp + 149|0;
 $id = sp + 100|0;
 $settled = sp + 148|0;
 $more = sp + 147|0;
 $has_type = sp + 146|0;
 $type = sp;
 $6 = sp + 72|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 _pn_data_clear($9);
 $10 = $4;
 $11 = $1;
 $12 = (($11) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$vararg_buffer>>2] = $handle;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $id_present;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $id;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $tag;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $settled;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $more;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $has_type;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $type;
 $vararg_ptr8 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $13;
 $14 = (_pn_data_scan($10,11072,$vararg_buffer)|0);
 $err = $14;
 $15 = $err;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $err;
  $0 = $17;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 $18 = $1;
 $19 = $3;
 $20 = (_pn_channel_state($18,$19)|0);
 $ssn = $20;
 $21 = $ssn;
 $22 = (($21) + 96|0);
 $23 = (($22) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $26 = $1;
  $27 = (_pn_do_error($26,11096,11128,$vararg_buffer9)|0);
  $0 = $27;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 $28 = $ssn;
 $29 = HEAP32[$handle>>2]|0;
 $30 = (_pn_handle_state($28,$29)|0);
 $link = $30;
 $31 = $link;
 $32 = (($31) + 264|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $link;
  $36 = (($35) + 264|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 148|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&1;
  if ($40) {
   label = 8;
  } else {
   $41 = $link;
   $42 = (($41) + 264|0);
   $43 = HEAP32[$42>>2]|0;
   $delivery = $43;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $44 = $ssn;
  $45 = (($44) + 96|0);
  $46 = (($45) + 8|0);
  $incoming = $46;
  $47 = $ssn;
  $48 = (($47) + 96|0);
  $49 = (($48) + 4|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&1;
  if (!($51)) {
   $52 = HEAP32[$id>>2]|0;
   $53 = $incoming;
   HEAP32[$53>>2] = $52;
   $54 = $ssn;
   $55 = (($54) + 96|0);
   $56 = (($55) + 4|0);
   HEAP8[$56>>0] = 1;
   $57 = $ssn;
   $58 = (($57) + 88|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[$58>>2] = $60;
  }
  $61 = $link;
  $62 = (($tag) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$tag>>2]|0;
  _pn_dtag454($6,$63,$64);
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
  $65 = (_pn_delivery($61,$$byval_copy)|0);
  $delivery = $65;
  $66 = $incoming;
  $67 = $delivery;
  $68 = (_pn_delivery_map_push($66,$67)|0);
  $state = $68;
  $69 = HEAP8[$id_present>>0]|0;
  $70 = $69&1;
  if ($70) {
   $71 = HEAP32[$id>>2]|0;
   $72 = $state;
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)!=($73|0);
   if ($74) {
    $75 = $1;
    $76 = $state;
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$id>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $77;
    $vararg_ptr14 = (($vararg_buffer11) + 4|0);
    HEAP32[$vararg_ptr14>>2] = $78;
    $79 = (_pn_do_error($75,11168,11200,$vararg_buffer11)|0);
    $0 = $79;
    $179 = $0;
    STACKTOP = sp;return ($179|0);
   }
  }
  $80 = HEAP8[$has_type>>0]|0;
  $81 = $80&1;
  if ($81) {
   $82 = $type;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = $delivery;
   $89 = (($88) + 48|0);
   $90 = (($89) + 16|0);
   $91 = $90;
   $92 = $91;
   HEAP32[$92>>2] = $84;
   $93 = (($91) + 4)|0;
   $94 = $93;
   HEAP32[$94>>2] = $87;
   $95 = $delivery;
   $96 = (($95) + 48|0);
   $97 = (($96) + 24|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $1;
   $100 = (($99) + 36|0);
   $101 = HEAP32[$100>>2]|0;
   (_pn_data_copy($98,$101)|0);
  }
  $102 = $link;
  $103 = (($102) + 236|0);
  $104 = (($103) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$104>>2] = $106;
  $107 = $link;
  $108 = (($107) + 236|0);
  $109 = (($108) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + -1)|0;
  HEAP32[$109>>2] = $111;
  $112 = $link;
  $113 = (($112) + 288|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$113>>2] = $115;
  $116 = HEAP8[$settled>>0]|0;
  $117 = $116&1;
  $118 = $delivery;
  $119 = (($118) + 48|0);
  $120 = (($119) + 46|0);
  $121 = $117&1;
  HEAP8[$120>>0] = $121;
  $122 = HEAP8[$settled>>0]|0;
  $123 = $122&1;
  if ($123) {
   $124 = $delivery;
   $125 = (($124) + 144|0);
   HEAP8[$125>>0] = 1;
   $126 = $1;
   $127 = (($126) + 12|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $delivery;
   _pn_work_update($128,$129);
  }
 }
 $130 = $delivery;
 $131 = (($130) + 136|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $5;
 $134 = (($133) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $5;
 $137 = HEAP32[$136>>2]|0;
 (_pn_buffer_append($132,$135,$137)|0);
 $138 = $5;
 $139 = HEAP32[$138>>2]|0;
 $140 = $ssn;
 $141 = (($140) + 80|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + ($139))|0;
 HEAP32[$141>>2] = $143;
 $144 = HEAP8[$more>>0]|0;
 $145 = $144&1;
 $146 = $145 ^ 1;
 $147 = $delivery;
 $148 = (($147) + 148|0);
 $149 = $146&1;
 HEAP8[$148>>0] = $149;
 $150 = $ssn;
 $151 = (($150) + 96|0);
 $152 = (($151) + 24|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($153) + 1)|0;
 HEAP32[$152>>2] = $154;
 $155 = $ssn;
 $156 = (($155) + 96|0);
 $157 = (($156) + 28|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + -1)|0;
 HEAP32[$157>>2] = $159;
 $160 = $ssn;
 $161 = (($160) + 96|0);
 $162 = (($161) + 28|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0);
 if (!($164)) {
  $165 = $link;
  $166 = (($165) + 236|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)>=(0);
  if ($168) {
   $169 = $1;
   $170 = $ssn;
   $171 = $link;
   (_pn_post_flow($169,$170,$171)|0);
  }
 }
 $172 = $1;
 $173 = (($172) + 12|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = (($174) + 132|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = HEAP32[80>>2]|0;
 $178 = $delivery;
 (_pn_collector_put($176,$177,$178,28)|0);
 $0 = 0;
 $179 = $0;
 STACKTOP = sp;return ($179|0);
}
function _pn_post_flow($transport,$ssn,$link) {
 $transport = $transport|0;
 $ssn = $ssn|0;
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $linkq = 0, $state = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $ssn;
 $2 = $link;
 $3 = $1;
 $4 = (_pn_session_incoming_window($3)|0);
 $5 = $1;
 $6 = (($5) + 96|0);
 $7 = (($6) + 28|0);
 HEAP32[$7>>2] = $4;
 $8 = $1;
 $9 = (_pn_session_outgoing_window($8)|0);
 $10 = $1;
 $11 = (($10) + 96|0);
 $12 = (($11) + 40|0);
 HEAP32[$12>>2] = $9;
 $13 = $2;
 $14 = ($13|0)!=(0|0);
 $15 = $14&1;
 $linkq = $15;
 $16 = $2;
 $17 = (($16) + 236|0);
 $state = $17;
 $18 = $0;
 $19 = $1;
 $20 = (($19) + 96|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $1;
 $23 = (($22) + 96|0);
 $24 = (($23) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = ($26|0)>=(0);
 $28 = $27&1;
 $29 = $1;
 $30 = (($29) + 96|0);
 $31 = (($30) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $1;
 $34 = (($33) + 96|0);
 $35 = (($34) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $1;
 $38 = (($37) + 96|0);
 $39 = (($38) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $1;
 $42 = (($41) + 96|0);
 $43 = (($42) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $linkq;
 $46 = $45&1;
 $47 = $46&1;
 $48 = $linkq;
 $49 = $48&1;
 if ($49) {
  $50 = $state;
  $51 = HEAP32[$50>>2]|0;
  $82 = $51;
 } else {
  $82 = 0;
 }
 $52 = $linkq;
 $53 = $52&1;
 $54 = $53&1;
 $55 = $linkq;
 $56 = $55&1;
 if ($56) {
  $57 = $state;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $83 = $59;
 } else {
  $83 = 0;
 }
 $60 = $linkq;
 $61 = $60&1;
 $62 = $61&1;
 $63 = $linkq;
 $64 = $63&1;
 if ($64) {
  $65 = $state;
  $66 = (($65) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $84 = $67;
 } else {
  $84 = 0;
 }
 $68 = $linkq;
 $69 = $68&1;
 $70 = $69&1;
 $71 = $linkq;
 $72 = $71&1;
 if ($72) {
  $73 = $2;
  $74 = (($73) + 301|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&1;
  $77 = $76&1;
  $85 = $77;
 } else {
  $85 = 0;
 }
 $78 = $vararg_buffer;
 $79 = $78;
 HEAP32[$79>>2] = 19;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = 0;
 $vararg_ptr1 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr1>>2] = $28;
 $vararg_ptr2 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr2>>2] = $32;
 $vararg_ptr3 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr3>>2] = $36;
 $vararg_ptr4 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr4>>2] = $40;
 $vararg_ptr5 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr5>>2] = $44;
 $vararg_ptr6 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr6>>2] = $47;
 $vararg_ptr7 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr7>>2] = $82;
 $vararg_ptr8 = (($vararg_buffer) + 36|0);
 HEAP32[$vararg_ptr8>>2] = $54;
 $vararg_ptr9 = (($vararg_buffer) + 40|0);
 HEAP32[$vararg_ptr9>>2] = $83;
 $vararg_ptr10 = (($vararg_buffer) + 44|0);
 HEAP32[$vararg_ptr10>>2] = $62;
 $vararg_ptr11 = (($vararg_buffer) + 48|0);
 HEAP32[$vararg_ptr11>>2] = $84;
 $vararg_ptr12 = (($vararg_buffer) + 52|0);
 HEAP32[$vararg_ptr12>>2] = $70;
 $vararg_ptr13 = (($vararg_buffer) + 56|0);
 HEAP32[$vararg_ptr13>>2] = $85;
 $86 = (_pn_post_frame($18,0,$21,11552,$vararg_buffer)|0);
 STACKTOP = sp;return ($86|0);
}
function _pn_do_flow($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dcount_init = 0, $delivery = 0;
 var $delivery_count = 0, $delta = 0, $drain = 0, $err = 0, $handle = 0, $handle_init = 0, $inext = 0, $inext_init = 0, $iwin = 0, $link = 0, $link_credit = 0, $old = 0, $onext = 0, $owin = 0, $receiver_count = 0, $ssn = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $onext = sp + 96|0;
 $inext = sp + 92|0;
 $delivery_count = sp + 88|0;
 $iwin = sp + 84|0;
 $owin = sp + 80|0;
 $link_credit = sp + 76|0;
 $handle = sp + 72|0;
 $inext_init = sp + 121|0;
 $handle_init = sp + 120|0;
 $dcount_init = sp + 119|0;
 $drain = sp + 118|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $inext_init;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $inext;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $iwin;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $onext;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $owin;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $handle_init;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $handle;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $dcount_init;
 $vararg_ptr8 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $delivery_count;
 $vararg_ptr9 = (($vararg_buffer) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $link_credit;
 $vararg_ptr10 = (($vararg_buffer) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $drain;
 $7 = (_pn_data_scan($6,11256,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $11 = $1;
 $12 = $3;
 $13 = (_pn_channel_state($11,$12)|0);
 $ssn = $13;
 $14 = HEAP8[$inext_init>>0]|0;
 $15 = $14&1;
 if ($15) {
  $16 = HEAP32[$inext>>2]|0;
  $17 = HEAP32[$iwin>>2]|0;
  $18 = (($16) + ($17))|0;
  $19 = $ssn;
  $20 = (($19) + 96|0);
  $21 = (($20) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($18) - ($22))|0;
  $24 = $ssn;
  $25 = (($24) + 96|0);
  $26 = (($25) + 32|0);
  HEAP32[$26>>2] = $23;
 } else {
  $27 = HEAP32[$iwin>>2]|0;
  $28 = $ssn;
  $29 = (($28) + 96|0);
  $30 = (($29) + 32|0);
  HEAP32[$30>>2] = $27;
 }
 $31 = HEAP8[$handle_init>>0]|0;
 $32 = $31&1;
 if ($32) {
  $33 = $ssn;
  $34 = HEAP32[$handle>>2]|0;
  $35 = (_pn_handle_state($33,$34)|0);
  $link = $35;
  $36 = $link;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(2);
  if ($38) {
   $39 = HEAP8[$dcount_init>>0]|0;
   $40 = $39&1;
   if ($40) {
    $41 = HEAP32[$delivery_count>>2]|0;
    $receiver_count = $41;
   } else {
    $receiver_count = 0;
   }
   $42 = $link;
   $43 = (($42) + 236|0);
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $old = $45;
   $46 = $receiver_count;
   $47 = HEAP32[$link_credit>>2]|0;
   $48 = (($46) + ($47))|0;
   $49 = $link;
   $50 = (($49) + 236|0);
   $51 = (($50) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($48) - ($52))|0;
   $54 = $link;
   $55 = (($54) + 236|0);
   $56 = (($55) + 12|0);
   HEAP32[$56>>2] = $53;
   $57 = $link;
   $58 = (($57) + 236|0);
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $old;
   $62 = (($60) - ($61))|0;
   $63 = $link;
   $64 = (($63) + 284|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($62))|0;
   HEAP32[$64>>2] = $66;
   $67 = HEAP8[$drain>>0]|0;
   $68 = $67&1;
   $69 = $link;
   $70 = (($69) + 301|0);
   $71 = $68&1;
   HEAP8[$70>>0] = $71;
   $72 = $link;
   $73 = (_pn_link_current($72)|0);
   $delivery = $73;
   $74 = $delivery;
   $75 = ($74|0)!=(0|0);
   if ($75) {
    $76 = $1;
    $77 = (($76) + 12|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $delivery;
    _pn_work_update($78,$79);
   }
  } else {
   $80 = HEAP32[$delivery_count>>2]|0;
   $81 = $link;
   $82 = (($81) + 236|0);
   $83 = (($82) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($80) - ($84))|0;
   $delta = $85;
   $86 = $delta;
   $87 = ($86|0)>(0);
   if ($87) {
    $88 = $delta;
    $89 = $link;
    $90 = (($89) + 236|0);
    $91 = (($90) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($88))|0;
    HEAP32[$91>>2] = $93;
    $94 = $delta;
    $95 = $link;
    $96 = (($95) + 236|0);
    $97 = (($96) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) - ($94))|0;
    HEAP32[$97>>2] = $99;
    $100 = $delta;
    $101 = $link;
    $102 = (($101) + 284|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) - ($100))|0;
    HEAP32[$102>>2] = $104;
    $105 = $delta;
    $106 = $link;
    $107 = (($106) + 292|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + ($105))|0;
    HEAP32[$107>>2] = $109;
   }
  }
  $110 = $1;
  $111 = (($110) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + 132|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = HEAP32[80>>2]|0;
  $116 = $link;
  (_pn_collector_put($114,$115,$116,26)|0);
 }
 $0 = 0;
 $117 = $0;
 STACKTOP = sp;return ($117|0);
}
function _pn_do_disposition($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, $cond2 = 0;
 var $cond3 = 0, $cond4 = 0, $deliveries = 0, $delivery = 0, $err = 0, $first = 0, $id = 0, $last = 0, $last_init = 0, $remote = 0, $remote_data = 0, $role = 0, $settled = 0, $ssn = 0, $type = 0, $type_init = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $role = sp + 94|0;
 $first = sp + 68|0;
 $last = sp + 64|0;
 $type = sp;
 $last_init = sp + 93|0;
 $settled = sp + 92|0;
 $type_init = sp + 91|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $type;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 _pn_data_clear($12);
 $13 = $4;
 $14 = $1;
 $15 = (($14) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $role;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $first;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $last_init;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $last;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $settled;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $type_init;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $type;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $16;
 $17 = (_pn_data_scan($13,11280,$vararg_buffer)|0);
 $err = $17;
 $18 = $err;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $err;
  $0 = $20;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 $21 = HEAP8[$last_init>>0]|0;
 $22 = $21&1;
 if (!($22)) {
  $23 = HEAP32[$first>>2]|0;
  HEAP32[$last>>2] = $23;
 }
 $24 = $1;
 $25 = $3;
 $26 = (_pn_channel_state($24,$25)|0);
 $ssn = $26;
 $27 = HEAP8[$role>>0]|0;
 $28 = $27&1;
 if ($28) {
  $29 = $ssn;
  $30 = (($29) + 96|0);
  $31 = (($30) + 16|0);
  $deliveries = $31;
 } else {
  $32 = $ssn;
  $33 = (($32) + 96|0);
  $34 = (($33) + 8|0);
  $deliveries = $34;
 }
 $35 = $1;
 $36 = (($35) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 _pn_data_rewind($37);
 $38 = $1;
 $39 = (($38) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_pn_data_next($40)|0);
 if ($41) {
  $42 = $1;
  $43 = (($42) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_pn_data_get_list($44)|0);
  $46 = ($45>>>0)>(0);
  $48 = $46;
 } else {
  $48 = 0;
 }
 $47 = $48&1;
 $remote_data = $47;
 $49 = HEAP32[$first>>2]|0;
 $id = $49;
 L15: while(1) {
  $50 = $id;
  $51 = HEAP32[$last>>2]|0;
  $52 = ($50|0)<=($51|0);
  if (!($52)) {
   label = 42;
   break;
  }
  $53 = $deliveries;
  $54 = $id;
  $55 = (_pn_delivery_map_get($53,$54)|0);
  $delivery = $55;
  $56 = $delivery;
  $57 = (($56) + 48|0);
  $remote = $57;
  $58 = $delivery;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = HEAP8[$type_init>>0]|0;
   $61 = $60&1;
   if ($61) {
    $62 = $type;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 4)|0;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = $remote;
    $69 = (($68) + 16|0);
    $70 = $69;
    $71 = $70;
    HEAP32[$71>>2] = $64;
    $72 = (($70) + 4)|0;
    $73 = $72;
    HEAP32[$73>>2] = $67;
   }
   $74 = $remote_data;
   $75 = $74&1;
   if ($75) {
    $76 = $type;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $79 = (($76) + 4)|0;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    switch ($78|0) {
    case 35:  {
     $cond4 = ($81|0)==(0);
     if ($cond4) {
      $82 = $1;
      $83 = (($82) + 36|0);
      $84 = HEAP32[$83>>2]|0;
      _pn_data_rewind($84);
      $85 = $1;
      $86 = (($85) + 36|0);
      $87 = HEAP32[$86>>2]|0;
      (_pn_data_next($87)|0);
      $88 = $1;
      $89 = (($88) + 36|0);
      $90 = HEAP32[$89>>2]|0;
      (_pn_data_enter($90)|0);
      $91 = $1;
      $92 = (($91) + 36|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (_pn_data_next($93)|0);
      if ($94) {
       $95 = $1;
       $96 = (($95) + 36|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = (_pn_data_get_uint($97)|0);
       $99 = $remote;
       $100 = (($99) + 40|0);
       HEAP32[$100>>2] = $98;
      }
      $101 = $1;
      $102 = (($101) + 36|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (_pn_data_next($103)|0);
      if ($104) {
       $105 = $1;
       $106 = (($105) + 36|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (_pn_data_get_ulong($107)|0);
       $109 = tempRet0;
       $110 = $remote;
       $111 = (($110) + 32|0);
       $112 = $111;
       $113 = $112;
       HEAP32[$113>>2] = $108;
       $114 = (($112) + 4)|0;
       $115 = $114;
       HEAP32[$115>>2] = $109;
      }
     } else {
      label = 37;
     }
     break;
    }
    case 36:  {
     $cond3 = ($81|0)==(0);
     if ($cond3) {
     } else {
      label = 37;
     }
     break;
    }
    case 39:  {
     $cond = ($81|0)==(0);
     if ($cond) {
      $124 = $1;
      $125 = (($124) + 36|0);
      $126 = HEAP32[$125>>2]|0;
      _pn_data_rewind($126);
      $127 = $1;
      $128 = (($127) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      (_pn_data_next($129)|0);
      $130 = $1;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      (_pn_data_enter($132)|0);
      $133 = $1;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (_pn_data_next($135)|0);
      if ($136) {
       $137 = $1;
       $138 = (($137) + 36|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = (_pn_data_get_bool($139)|0);
       $141 = $remote;
       $142 = (($141) + 44|0);
       $143 = $140&1;
       HEAP8[$142>>0] = $143;
      }
      $144 = $1;
      $145 = (($144) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (_pn_data_next($146)|0);
      if ($147) {
       $148 = $1;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (_pn_data_get_bool($150)|0);
       $152 = $remote;
       $153 = (($152) + 45|0);
       $154 = $151&1;
       HEAP8[$153>>0] = $154;
      }
      $155 = $1;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      _pn_data_narrow($157);
      $158 = $remote;
      $159 = (($158) + 24|0);
      $160 = HEAP32[$159>>2]|0;
      _pn_data_clear($160);
      $161 = $remote;
      $162 = (($161) + 28|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $1;
      $165 = (($164) + 36|0);
      $166 = HEAP32[$165>>2]|0;
      (_pn_data_appendn($163,$166,1)|0);
      $167 = $1;
      $168 = (($167) + 36|0);
      $169 = HEAP32[$168>>2]|0;
      _pn_data_widen($169);
     } else {
      label = 37;
     }
     break;
    }
    case 38:  {
     $cond1 = ($81|0)==(0);
     if ($cond1) {
     } else {
      label = 37;
     }
     break;
    }
    case 37:  {
     $cond2 = ($81|0)==(0);
     if ($cond2) {
      $116 = $1;
      $117 = (($116) + 36|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $remote;
      $120 = (_pn_scan_error($118,$119,11296)|0);
      $err = $120;
      $121 = $err;
      $122 = ($121|0)!=(0);
      if ($122) {
       label = 29;
       break L15;
      }
     } else {
      label = 37;
     }
     break;
    }
    default: {
     label = 37;
    }
    }
    if ((label|0) == 37) {
     label = 0;
     $170 = $remote;
     $171 = (($170) + 24|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $1;
     $174 = (($173) + 36|0);
     $175 = HEAP32[$174>>2]|0;
     (_pn_data_copy($172,$175)|0);
    }
   }
   $176 = HEAP8[$settled>>0]|0;
   $177 = $176&1;
   $178 = $remote;
   $179 = (($178) + 46|0);
   $180 = $177&1;
   HEAP8[$179>>0] = $180;
   $181 = $delivery;
   $182 = (($181) + 144|0);
   HEAP8[$182>>0] = 1;
   $183 = $1;
   $184 = (($183) + 12|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $delivery;
   _pn_work_update($185,$186);
   $187 = $1;
   $188 = (($187) + 12|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (($189) + 132|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = HEAP32[80>>2]|0;
   $193 = $delivery;
   (_pn_collector_put($191,$192,$193,28)|0);
  }
  $194 = $id;
  $195 = (($194) + 1)|0;
  $id = $195;
 }
 if ((label|0) == 29) {
  $123 = $err;
  $0 = $123;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 42) {
  $0 = 0;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 return (0)|0;
}
function _pn_do_detach($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $closed = 0, $err = 0, $handle = 0, $link = 0, $ssn = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $handle = sp + 32|0;
 $closed = sp + 54|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $handle;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $closed;
 $7 = (_pn_data_scan($6,11312,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $11 = $1;
 $12 = $3;
 $13 = (_pn_channel_state($11,$12)|0);
 $ssn = $13;
 $14 = $ssn;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $16 = $1;
  $17 = $3;
  $18 = $17&65535;
  HEAP32[$vararg_buffer2>>2] = $18;
  $19 = (_pn_do_error($16,11320,11344,$vararg_buffer2)|0);
  $0 = $19;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $20 = $ssn;
 $21 = HEAP32[$handle>>2]|0;
 $22 = (_pn_handle_state($20,$21)|0);
 $link = $22;
 $23 = $link;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $25 = $1;
  $26 = HEAP32[$handle>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $26;
  $27 = (_pn_do_error($25,11320,11368,$vararg_buffer5)|0);
  $0 = $27;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $28 = $4;
 $29 = $link;
 $30 = (($29) + 24|0);
 $31 = (_pn_scan_error($28,$30,11392)|0);
 $err = $31;
 $32 = $err;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $err;
  $0 = $34;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $35 = HEAP8[$closed>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = $link;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39 & 7;
  $41 = $40 | 32;
  $42 = $link;
  $43 = (($42) + 4|0);
  HEAP32[$43>>2] = $41;
  $44 = $1;
  $45 = (($44) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 132|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[80>>2]|0;
  $50 = $link;
  (_pn_collector_put($48,$49,$50,23)|0);
 } else {
  $51 = $1;
  $52 = (($51) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 132|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[80>>2]|0;
  $57 = $link;
  (_pn_collector_put($55,$56,$57,25)|0);
 }
 $58 = $link;
 _pni_unmap_remote_handle($58);
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _pn_do_end($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $ssn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $1;
 $7 = $3;
 $8 = (_pn_channel_state($6,$7)|0);
 $ssn = $8;
 $9 = $4;
 $10 = $ssn;
 $11 = (($10) + 24|0);
 $12 = (_pn_scan_error($9,$11,11408)|0);
 $err = $12;
 $13 = $err;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $err;
  $0 = $15;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $16 = $ssn;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 7;
  $20 = $19 | 32;
  $21 = $ssn;
  $22 = (($21) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 132|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[80>>2]|0;
  $29 = $ssn;
  (_pn_collector_put($27,$28,$29,17)|0);
  $30 = $ssn;
  _pni_unmap_remote_channel($30);
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _pn_do_close($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $1;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $conn = $8;
 $9 = $4;
 $10 = $1;
 $11 = (($10) + 48|0);
 $12 = (_pn_scan_error($9,$11,11408)|0);
 $err = $12;
 $13 = $err;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $err;
  $0 = $15;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $16 = $1;
  $17 = (($16) + 240|0);
  HEAP8[$17>>0] = 1;
  $18 = $conn;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 7;
  $22 = $21 | 32;
  $23 = $conn;
  $24 = (($23) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $1;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 132|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[80>>2]|0;
  $31 = $conn;
  (_pn_collector_put($29,$30,$31,11)|0);
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _pn_transport_close_tail($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 _pni_close_tail($1);
 $2 = $0;
 (_transport_consume($2)|0);
 STACKTOP = sp;return 0;
}
function _pn_transport_capacity($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $capacity = 0, $more = 0, $newbuf = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = (($2) + 241|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $0 = -1;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $6 = $1;
 $7 = (($6) + 212|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 216|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) - ($11))|0;
 $capacity = $12;
 $13 = $capacity;
 $14 = ($13|0)<=(0);
 if ($14) {
  $more = 0;
  $15 = $1;
  $16 = (($15) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  if ($18) {
   $22 = $1;
   $23 = (($22) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 212|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($24>>>0)>($27>>>0);
   if ($28) {
    $29 = $1;
    $30 = (($29) + 212|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $1;
    $33 = (($32) + 40|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $1;
    $36 = (($35) + 212|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($34) - ($37))|0;
    $39 = ($31>>>0)>($38>>>0);
    if ($39) {
     $40 = $1;
     $41 = (($40) + 40|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $1;
     $44 = (($43) + 212|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (($42) - ($45))|0;
     $50 = $46;
    } else {
     $47 = $1;
     $48 = (($47) + 212|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $49;
    }
    $more = $50;
   }
  } else {
   $19 = $1;
   $20 = (($19) + 212|0);
   $21 = HEAP32[$20>>2]|0;
   $more = $21;
  }
  $51 = $more;
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $1;
   $54 = (($53) + 220|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $1;
   $57 = (($56) + 212|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $more;
   $60 = (($58) + ($59))|0;
   $61 = (_realloc($55,$60)|0);
   $newbuf = $61;
   $62 = $newbuf;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    $64 = $newbuf;
    $65 = $1;
    $66 = (($65) + 220|0);
    HEAP32[$66>>2] = $64;
    $67 = $more;
    $68 = $1;
    $69 = (($68) + 212|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67))|0;
    HEAP32[$69>>2] = $71;
    $72 = $more;
    $73 = $capacity;
    $74 = (($73) + ($72))|0;
    $capacity = $74;
   }
  }
 }
 $75 = $capacity;
 $0 = $75;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function _pn_transport_tail($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (($4) + 216|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (($7) + 212|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6>>>0)<($9>>>0);
  if ($10) {
   $11 = $1;
   $12 = (($11) + 216|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $1;
   $15 = (($14) + 220|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($13)|0);
   $0 = $17;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
 }
 $0 = 0;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _pn_transport_process($transport,$size) {
 $transport = $transport|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((10232|0),(10248|0),2710,(11712|0));
  // unreachable;
 }
 $5 = $2;
 $6 = $1;
 $7 = (($6) + 212|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 216|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) - ($11))|0;
 $13 = ($5>>>0)>($12>>>0);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 212|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = (($17) + 216|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($16) - ($19))|0;
  $22 = $20;
 } else {
  $21 = $2;
  $22 = $21;
 }
 $2 = $22;
 $23 = $2;
 $24 = $1;
 $25 = (($24) + 216|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $2;
 $29 = $1;
 $30 = (($29) + 168|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_i64Add(($33|0),($36|0),($28|0),0)|0);
 $38 = tempRet0;
 $39 = $30;
 $40 = $39;
 HEAP32[$40>>2] = $37;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $1;
 $44 = (_transport_consume($43)|0);
 $n = $44;
 $45 = $n;
 $46 = ($45|0)==(-1);
 if ($46) {
  $47 = $1;
  _pni_close_tail($47);
 }
 $48 = $n;
 $49 = ($48|0)<(0);
 if ($49) {
  $50 = $n;
  $51 = ($50|0)!=(-1);
  if ($51) {
   $52 = $n;
   $0 = $52;
   $53 = $0;
   STACKTOP = sp;return ($53|0);
  }
 }
 $0 = 0;
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function _pn_process_conn_setup($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $cid = 0;
 var $connection = 0, $err = 0, $idle_timeout = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $2;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)!=(0);
  do {
   if (!($10)) {
    $11 = $1;
    $12 = (($11) + 237|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&1;
    if (!($14)) {
     $15 = $1;
     $16 = (($15) + 88|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)!=(0);
     if ($18) {
      $19 = $1;
      $20 = (($19) + 88|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21>>>0) / 2)&-1;
      $23 = $22;
     } else {
      $23 = 0;
     }
     $idle_timeout = $23;
     $24 = $2;
     $connection = $24;
     $25 = $connection;
     $26 = (($25) + 104|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (_pn_string_get($27)|0);
     $cid = $28;
     $29 = $1;
     $30 = $cid;
     $31 = ($30|0)!=(0|0);
     if ($31) {
      $32 = $cid;
      $71 = $32;
     } else {
      $71 = 10584;
     }
     $33 = $connection;
     $34 = (($33) + 108|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (_pn_string_get($35)|0);
     $37 = $1;
     $38 = (($37) + 40|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)!=(0);
     $41 = $40&1;
     $42 = $1;
     $43 = (($42) + 40|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $1;
     $46 = (($45) + 232|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = ($47<<16>>16)!=(0);
     $49 = $48&1;
     $50 = $1;
     $51 = (($50) + 232|0);
     $52 = HEAP16[$51>>1]|0;
     $53 = $52&65535;
     $54 = $idle_timeout;
     $55 = ($54|0)!=(0);
     $56 = $55&1;
     $57 = $idle_timeout;
     $58 = $connection;
     $59 = (($58) + 120|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $connection;
     $62 = (($61) + 124|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $connection;
     $65 = (($64) + 128|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $vararg_buffer;
     $68 = $67;
     HEAP32[$68>>2] = 16;
     $69 = (($67) + 4)|0;
     $70 = $69;
     HEAP32[$70>>2] = 0;
     $vararg_ptr1 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr1>>2] = $71;
     $vararg_ptr2 = (($vararg_buffer) + 12|0);
     HEAP32[$vararg_ptr2>>2] = $36;
     $vararg_ptr3 = (($vararg_buffer) + 16|0);
     HEAP32[$vararg_ptr3>>2] = $41;
     $vararg_ptr4 = (($vararg_buffer) + 20|0);
     HEAP32[$vararg_ptr4>>2] = $44;
     $vararg_ptr5 = (($vararg_buffer) + 24|0);
     HEAP32[$vararg_ptr5>>2] = $49;
     $vararg_ptr6 = (($vararg_buffer) + 28|0);
     HEAP32[$vararg_ptr6>>2] = $53;
     $vararg_ptr7 = (($vararg_buffer) + 32|0);
     HEAP32[$vararg_ptr7>>2] = $56;
     $vararg_ptr8 = (($vararg_buffer) + 36|0);
     HEAP32[$vararg_ptr8>>2] = $57;
     $vararg_ptr9 = (($vararg_buffer) + 40|0);
     HEAP32[$vararg_ptr9>>2] = $60;
     $vararg_ptr10 = (($vararg_buffer) + 44|0);
     HEAP32[$vararg_ptr10>>2] = $63;
     $vararg_ptr11 = (($vararg_buffer) + 48|0);
     HEAP32[$vararg_ptr11>>2] = $66;
     $72 = (_pn_post_frame($29,0,0,11424,$vararg_buffer)|0);
     $err = $72;
     $73 = $err;
     $74 = ($73|0)!=(0);
     if (!($74)) {
      $76 = $1;
      $77 = (($76) + 237|0);
      HEAP8[$77>>0] = 1;
      break;
     }
     $75 = $err;
     $0 = $75;
     $78 = $0;
     STACKTOP = sp;return ($78|0);
    }
   }
  } while(0);
 }
 $0 = 0;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function _pn_session_outgoing_window($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frames = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ssn;
 $2 = $1;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $size = $8;
 $9 = $size;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $1;
  $12 = (($11) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  $0 = $13;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $14 = $1;
 $15 = (($14) + 84|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $size;
 $18 = (($16>>>0) / ($17>>>0))&-1;
 $frames = $18;
 $19 = $1;
 $20 = (($19) + 84|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $size;
 $23 = (($21>>>0) % ($22>>>0))&-1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $frames;
  $26 = (($25) + 1)|0;
  $frames = $26;
 }
 $27 = $frames;
 $28 = $1;
 $29 = (($28) + 92|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($27|0)<($30|0);
 if ($31) {
  $32 = $1;
  $33 = (($32) + 92|0);
  $34 = HEAP32[$33>>2]|0;
  $36 = $34;
 } else {
  $35 = $frames;
  $36 = $35;
 }
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _pn_session_incoming_window($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ssn;
 $2 = $1;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $size = $8;
 $9 = $size;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (($14) + 80|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13) - ($16))|0;
  $18 = $size;
  $19 = (($17>>>0) / ($18>>>0))&-1;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 2147483647;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pn_process_ssn_setup($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ssn = 0, $state = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $endpoint;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  STACKTOP = sp;return 0;
 }
 $5 = $0;
 $6 = (($5) + 237|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if (!($8)) {
  STACKTOP = sp;return 0;
 }
 $9 = $1;
 $ssn = $9;
 $10 = $ssn;
 $11 = (($10) + 96|0);
 $state = $11;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $state;
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)==(65535);
  if ($20) {
   $21 = $ssn;
   _pni_map_local_channel($21);
   $22 = $ssn;
   $23 = (_pn_session_incoming_window($22)|0);
   $24 = $state;
   $25 = (($24) + 28|0);
   HEAP32[$25>>2] = $23;
   $26 = $ssn;
   $27 = (_pn_session_outgoing_window($26)|0);
   $28 = $state;
   $29 = (($28) + 40|0);
   HEAP32[$29>>2] = $27;
   $30 = $0;
   $31 = $state;
   $32 = HEAP16[$31>>1]|0;
   $33 = $state;
   $34 = (($33) + 2|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = ($36|0)>=(0);
   $38 = $37&1;
   $39 = $state;
   $40 = (($39) + 2|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = $state;
   $44 = (($43) + 36|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $state;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $state;
   $50 = (($49) + 40|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $vararg_buffer;
   $53 = $52;
   HEAP32[$53>>2] = 17;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = 0;
   $vararg_ptr1 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr1>>2] = $38;
   $vararg_ptr2 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr2>>2] = $42;
   $vararg_ptr3 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr3>>2] = $45;
   $vararg_ptr4 = (($vararg_buffer) + 20|0);
   HEAP32[$vararg_ptr4>>2] = $48;
   $vararg_ptr5 = (($vararg_buffer) + 24|0);
   HEAP32[$vararg_ptr5>>2] = $51;
   (_pn_post_frame($30,0,$32,11448,$vararg_buffer)|0);
  }
 }
 STACKTOP = sp;return 0;
}
function _pn_process_link_setup($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist_mode = 0, $err = 0;
 var $err1 = 0, $link = 0, $ssn_state = 0, $state = 0, $vararg_buffer = 0, $vararg_buffer22 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0;
 var $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 104|0;
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $endpoint;
 $3 = $1;
 $4 = (($3) + 237|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 do {
  if ($6) {
   $7 = $2;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(2);
   if (!($9)) {
    $10 = $2;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(3);
    if (!($12)) {
     break;
    }
   }
   $13 = $2;
   $link = $13;
   $14 = $link;
   $15 = (($14) + 256|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 96|0);
   $ssn_state = $17;
   $18 = $link;
   $19 = (($18) + 236|0);
   $state = $19;
   $20 = $ssn_state;
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = ($22|0)>=(0);
   if ($23) {
    $24 = $2;
    $25 = (($24) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26 & 1;
    $28 = ($27|0)!=(0);
    if (!($28)) {
     $29 = $state;
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(-1);
     if ($31) {
      $32 = $link;
      _pni_map_local_handle($32);
      $33 = $link;
      $34 = (($33) + 60|0);
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $dist_mode = $36;
      $37 = $link;
      $38 = (($37) + 104|0);
      $39 = (($38) + 32|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(3);
      do {
       if ($41) {
        $42 = $1;
        $43 = $ssn_state;
        $44 = HEAP16[$43>>1]|0;
        $45 = $link;
        $46 = (($45) + 252|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = (_pn_string_get($47)|0);
        $49 = $state;
        $50 = HEAP32[$49>>2]|0;
        $51 = $2;
        $52 = HEAP32[$51>>2]|0;
        $53 = ($52|0)==(3);
        $54 = $53&1;
        $55 = $link;
        $56 = (($55) + 296|0);
        $57 = HEAP8[$56>>0]|0;
        $58 = $57&255;
        $59 = $link;
        $60 = (($59) + 297|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = $61&255;
        $63 = $link;
        $64 = (($63) + 60|0);
        $65 = (($64) + 32|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = ($66|0)!=(0);
        $68 = $67&1;
        $69 = $link;
        $70 = (($69) + 60|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = (_pn_string_get($71)|0);
        $73 = $link;
        $74 = (($73) + 60|0);
        $75 = (($74) + 20|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = $link;
        $78 = (($77) + 60|0);
        $79 = (($78) + 24|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (_expiry_symbol($80)|0);
        $82 = $link;
        $83 = (($82) + 60|0);
        $84 = (($83) + 28|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = $link;
        $87 = (($86) + 60|0);
        $88 = (($87) + 40|0);
        $89 = HEAP8[$88>>0]|0;
        $90 = $89&1;
        $91 = $90&1;
        $92 = $link;
        $93 = (($92) + 60|0);
        $94 = (($93) + 4|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = $dist_mode;
        $97 = ($96|0)!=(0);
        $98 = $97&1;
        $99 = $dist_mode;
        $100 = (_dist_mode2symbol($99)|0);
        $101 = $link;
        $102 = (($101) + 60|0);
        $103 = (($102) + 16|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = $link;
        $106 = (($105) + 60|0);
        $107 = (($106) + 12|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = $link;
        $110 = (($109) + 60|0);
        $111 = (($110) + 8|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = $link;
        $114 = (($113) + 104|0);
        $115 = (($114) + 8|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = $vararg_buffer;
        $118 = $117;
        HEAP32[$118>>2] = 18;
        $119 = (($117) + 4)|0;
        $120 = $119;
        HEAP32[$120>>2] = 0;
        $vararg_ptr1 = (($vararg_buffer) + 8|0);
        HEAP32[$vararg_ptr1>>2] = $48;
        $vararg_ptr2 = (($vararg_buffer) + 12|0);
        HEAP32[$vararg_ptr2>>2] = $50;
        $vararg_ptr3 = (($vararg_buffer) + 16|0);
        HEAP32[$vararg_ptr3>>2] = $54;
        $vararg_ptr4 = (($vararg_buffer) + 20|0);
        HEAP32[$vararg_ptr4>>2] = $58;
        $vararg_ptr5 = (($vararg_buffer) + 24|0);
        HEAP32[$vararg_ptr5>>2] = $62;
        $vararg_ptr6 = (($vararg_buffer) + 28|0);
        HEAP32[$vararg_ptr6>>2] = $68;
        $vararg_ptr7 = (($vararg_buffer) + 32|0);
        $121 = $vararg_ptr7;
        $122 = $121;
        HEAP32[$122>>2] = 40;
        $123 = (($121) + 4)|0;
        $124 = $123;
        HEAP32[$124>>2] = 0;
        $vararg_ptr8 = (($vararg_buffer) + 40|0);
        HEAP32[$vararg_ptr8>>2] = $72;
        $vararg_ptr9 = (($vararg_buffer) + 44|0);
        HEAP32[$vararg_ptr9>>2] = $76;
        $vararg_ptr10 = (($vararg_buffer) + 48|0);
        HEAP32[$vararg_ptr10>>2] = $81;
        $vararg_ptr11 = (($vararg_buffer) + 52|0);
        HEAP32[$vararg_ptr11>>2] = $85;
        $vararg_ptr12 = (($vararg_buffer) + 56|0);
        HEAP32[$vararg_ptr12>>2] = $91;
        $vararg_ptr13 = (($vararg_buffer) + 60|0);
        HEAP32[$vararg_ptr13>>2] = $95;
        $vararg_ptr14 = (($vararg_buffer) + 64|0);
        HEAP32[$vararg_ptr14>>2] = $98;
        $vararg_ptr15 = (($vararg_buffer) + 68|0);
        HEAP32[$vararg_ptr15>>2] = $100;
        $vararg_ptr16 = (($vararg_buffer) + 72|0);
        HEAP32[$vararg_ptr16>>2] = $104;
        $vararg_ptr17 = (($vararg_buffer) + 76|0);
        HEAP32[$vararg_ptr17>>2] = $108;
        $vararg_ptr18 = (($vararg_buffer) + 80|0);
        HEAP32[$vararg_ptr18>>2] = $112;
        $vararg_ptr19 = (($vararg_buffer) + 84|0);
        $125 = $vararg_ptr19;
        $126 = $125;
        HEAP32[$126>>2] = 48;
        $127 = (($125) + 4)|0;
        $128 = $127;
        HEAP32[$128>>2] = 0;
        $vararg_ptr20 = (($vararg_buffer) + 92|0);
        HEAP32[$vararg_ptr20>>2] = $116;
        $vararg_ptr21 = (($vararg_buffer) + 96|0);
        HEAP32[$vararg_ptr21>>2] = 0;
        $129 = (_pn_post_frame($42,0,$44,11464,$vararg_buffer)|0);
        $err = $129;
        $130 = $err;
        $131 = ($130|0)!=(0);
        if (!($131)) {
         break;
        }
        $132 = $err;
        $0 = $132;
        $257 = $0;
        STACKTOP = sp;return ($257|0);
       } else {
        $133 = $1;
        $134 = $ssn_state;
        $135 = HEAP16[$134>>1]|0;
        $136 = $link;
        $137 = (($136) + 252|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (_pn_string_get($138)|0);
        $140 = $state;
        $141 = HEAP32[$140>>2]|0;
        $142 = $2;
        $143 = HEAP32[$142>>2]|0;
        $144 = ($143|0)==(3);
        $145 = $144&1;
        $146 = $link;
        $147 = (($146) + 296|0);
        $148 = HEAP8[$147>>0]|0;
        $149 = $148&255;
        $150 = $link;
        $151 = (($150) + 297|0);
        $152 = HEAP8[$151>>0]|0;
        $153 = $152&255;
        $154 = $link;
        $155 = (($154) + 60|0);
        $156 = (($155) + 32|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)!=(0);
        $159 = $158&1;
        $160 = $link;
        $161 = (($160) + 60|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = (_pn_string_get($162)|0);
        $164 = $link;
        $165 = (($164) + 60|0);
        $166 = (($165) + 20|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = $link;
        $169 = (($168) + 60|0);
        $170 = (($169) + 24|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (_expiry_symbol($171)|0);
        $173 = $link;
        $174 = (($173) + 60|0);
        $175 = (($174) + 28|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = $link;
        $178 = (($177) + 60|0);
        $179 = (($178) + 40|0);
        $180 = HEAP8[$179>>0]|0;
        $181 = $180&1;
        $182 = $181&1;
        $183 = $link;
        $184 = (($183) + 60|0);
        $185 = (($184) + 4|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = $dist_mode;
        $188 = ($187|0)!=(0);
        $189 = $188&1;
        $190 = $dist_mode;
        $191 = (_dist_mode2symbol($190)|0);
        $192 = $link;
        $193 = (($192) + 60|0);
        $194 = (($193) + 16|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = $link;
        $197 = (($196) + 60|0);
        $198 = (($197) + 12|0);
        $199 = HEAP32[$198>>2]|0;
        $200 = $link;
        $201 = (($200) + 60|0);
        $202 = (($201) + 8|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = $link;
        $205 = (($204) + 104|0);
        $206 = (($205) + 32|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = ($207|0)!=(0);
        $209 = $208&1;
        $210 = $link;
        $211 = (($210) + 104|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = (_pn_string_get($212)|0);
        $214 = $link;
        $215 = (($214) + 104|0);
        $216 = (($215) + 20|0);
        $217 = HEAP32[$216>>2]|0;
        $218 = $link;
        $219 = (($218) + 104|0);
        $220 = (($219) + 24|0);
        $221 = HEAP32[$220>>2]|0;
        $222 = (_expiry_symbol($221)|0);
        $223 = $link;
        $224 = (($223) + 104|0);
        $225 = (($224) + 28|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = $link;
        $228 = (($227) + 104|0);
        $229 = (($228) + 40|0);
        $230 = HEAP8[$229>>0]|0;
        $231 = $230&1;
        $232 = $231&1;
        $233 = $link;
        $234 = (($233) + 104|0);
        $235 = (($234) + 4|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = $link;
        $238 = (($237) + 104|0);
        $239 = (($238) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = $vararg_buffer22;
        $242 = $241;
        HEAP32[$242>>2] = 18;
        $243 = (($241) + 4)|0;
        $244 = $243;
        HEAP32[$244>>2] = 0;
        $vararg_ptr25 = (($vararg_buffer22) + 8|0);
        HEAP32[$vararg_ptr25>>2] = $139;
        $vararg_ptr26 = (($vararg_buffer22) + 12|0);
        HEAP32[$vararg_ptr26>>2] = $141;
        $vararg_ptr27 = (($vararg_buffer22) + 16|0);
        HEAP32[$vararg_ptr27>>2] = $145;
        $vararg_ptr28 = (($vararg_buffer22) + 20|0);
        HEAP32[$vararg_ptr28>>2] = $149;
        $vararg_ptr29 = (($vararg_buffer22) + 24|0);
        HEAP32[$vararg_ptr29>>2] = $153;
        $vararg_ptr30 = (($vararg_buffer22) + 28|0);
        HEAP32[$vararg_ptr30>>2] = $159;
        $vararg_ptr31 = (($vararg_buffer22) + 32|0);
        $245 = $vararg_ptr31;
        $246 = $245;
        HEAP32[$246>>2] = 40;
        $247 = (($245) + 4)|0;
        $248 = $247;
        HEAP32[$248>>2] = 0;
        $vararg_ptr32 = (($vararg_buffer22) + 40|0);
        HEAP32[$vararg_ptr32>>2] = $163;
        $vararg_ptr33 = (($vararg_buffer22) + 44|0);
        HEAP32[$vararg_ptr33>>2] = $167;
        $vararg_ptr34 = (($vararg_buffer22) + 48|0);
        HEAP32[$vararg_ptr34>>2] = $172;
        $vararg_ptr35 = (($vararg_buffer22) + 52|0);
        HEAP32[$vararg_ptr35>>2] = $176;
        $vararg_ptr36 = (($vararg_buffer22) + 56|0);
        HEAP32[$vararg_ptr36>>2] = $182;
        $vararg_ptr37 = (($vararg_buffer22) + 60|0);
        HEAP32[$vararg_ptr37>>2] = $186;
        $vararg_ptr38 = (($vararg_buffer22) + 64|0);
        HEAP32[$vararg_ptr38>>2] = $189;
        $vararg_ptr39 = (($vararg_buffer22) + 68|0);
        HEAP32[$vararg_ptr39>>2] = $191;
        $vararg_ptr40 = (($vararg_buffer22) + 72|0);
        HEAP32[$vararg_ptr40>>2] = $195;
        $vararg_ptr41 = (($vararg_buffer22) + 76|0);
        HEAP32[$vararg_ptr41>>2] = $199;
        $vararg_ptr42 = (($vararg_buffer22) + 80|0);
        HEAP32[$vararg_ptr42>>2] = $203;
        $vararg_ptr43 = (($vararg_buffer22) + 84|0);
        HEAP32[$vararg_ptr43>>2] = $209;
        $vararg_ptr44 = (($vararg_buffer22) + 88|0);
        $249 = $vararg_ptr44;
        $250 = $249;
        HEAP32[$250>>2] = 41;
        $251 = (($249) + 4)|0;
        $252 = $251;
        HEAP32[$252>>2] = 0;
        $vararg_ptr45 = (($vararg_buffer22) + 96|0);
        HEAP32[$vararg_ptr45>>2] = $213;
        $vararg_ptr46 = (($vararg_buffer22) + 100|0);
        HEAP32[$vararg_ptr46>>2] = $217;
        $vararg_ptr47 = (($vararg_buffer22) + 104|0);
        HEAP32[$vararg_ptr47>>2] = $222;
        $vararg_ptr48 = (($vararg_buffer22) + 108|0);
        HEAP32[$vararg_ptr48>>2] = $226;
        $vararg_ptr49 = (($vararg_buffer22) + 112|0);
        HEAP32[$vararg_ptr49>>2] = $232;
        $vararg_ptr50 = (($vararg_buffer22) + 116|0);
        HEAP32[$vararg_ptr50>>2] = $236;
        $vararg_ptr51 = (($vararg_buffer22) + 120|0);
        HEAP32[$vararg_ptr51>>2] = $240;
        $vararg_ptr52 = (($vararg_buffer22) + 124|0);
        HEAP32[$vararg_ptr52>>2] = 0;
        $253 = (_pn_post_frame($133,0,$135,11504,$vararg_buffer22)|0);
        $err1 = $253;
        $254 = $err1;
        $255 = ($254|0)!=(0);
        if (!($255)) {
         break;
        }
        $256 = $err1;
        $0 = $256;
        $257 = $0;
        STACKTOP = sp;return ($257|0);
       }
      } while(0);
     }
    }
   }
  }
 } while(0);
 $0 = 0;
 $257 = $0;
 STACKTOP = sp;return ($257|0);
}
function _pn_process_flow_receiver($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rcv = 0;
 var $ssn = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(3);
 if ($5) {
  $6 = $2;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $2;
   $rcv = $11;
   $12 = $rcv;
   $13 = (($12) + 256|0);
   $14 = HEAP32[$13>>2]|0;
   $ssn = $14;
   $15 = $rcv;
   $16 = (($15) + 236|0);
   $state = $16;
   $17 = $ssn;
   $18 = (($17) + 96|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = ($20|0)>=(0);
   do {
    if ($21) {
     $22 = $state;
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)>=(0);
     if ($24) {
      $25 = $rcv;
      $26 = (($25) + 301|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&1;
      if (!($28)) {
       $29 = $state;
       $30 = (($29) + 12|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $rcv;
       $33 = (($32) + 284|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $rcv;
       $36 = (($35) + 288|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (($34) - ($37))|0;
       $39 = ($31|0)!=($38|0);
       if (!($39)) {
        $40 = $ssn;
        $41 = (($40) + 96|0);
        $42 = (($41) + 28|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ($43|0)!=(0);
        if ($44) {
         break;
        }
       }
      }
      $45 = $rcv;
      $46 = (($45) + 284|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $rcv;
      $49 = (($48) + 288|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($47) - ($50))|0;
      $52 = $state;
      $53 = (($52) + 12|0);
      HEAP32[$53>>2] = $51;
      $54 = $1;
      $55 = $ssn;
      $56 = $rcv;
      $57 = (_pn_post_flow($54,$55,$56)|0);
      $0 = $57;
      $58 = $0;
      STACKTOP = sp;return ($58|0);
     }
    }
   } while(0);
  }
 }
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _pn_flush_disp($transport,$ssn) {
 $transport = $transport|0;
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $code = 0;
 var $err = 0, $settled = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $code = sp;
 $1 = $transport;
 $2 = $ssn;
 $3 = $2;
 $4 = (($3) + 96|0);
 $5 = (($4) + 56|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $code;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $2;
 $17 = (($16) + 96|0);
 $18 = (($17) + 64|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&1;
 $21 = $20&1;
 $settled = $21;
 $22 = $2;
 $23 = (($22) + 96|0);
 $24 = (($23) + 76|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 do {
  if ($26) {
   $27 = $1;
   $28 = $2;
   $29 = (($28) + 96|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $2;
   $32 = (($31) + 96|0);
   $33 = (($32) + 65|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&1;
   $36 = $35&1;
   $37 = $2;
   $38 = (($37) + 96|0);
   $39 = (($38) + 68|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $2;
   $42 = (($41) + 96|0);
   $43 = (($42) + 72|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $settled;
   $46 = $45&1;
   $47 = $46&1;
   $48 = $code;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = ($50|0)!=(0);
   $55 = ($53|0)!=(0);
   $56 = $54 | $55;
   $57 = $56&1;
   $58 = $code;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = $vararg_buffer;
   $65 = $64;
   HEAP32[$65>>2] = 21;
   $66 = (($64) + 4)|0;
   $67 = $66;
   HEAP32[$67>>2] = 0;
   $vararg_ptr1 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr1>>2] = $36;
   $vararg_ptr2 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr2>>2] = $40;
   $vararg_ptr3 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr3>>2] = $44;
   $vararg_ptr4 = (($vararg_buffer) + 20|0);
   HEAP32[$vararg_ptr4>>2] = $47;
   $vararg_ptr5 = (($vararg_buffer) + 24|0);
   HEAP32[$vararg_ptr5>>2] = $57;
   $vararg_ptr6 = (($vararg_buffer) + 28|0);
   $68 = $vararg_ptr6;
   $69 = $68;
   HEAP32[$69>>2] = $60;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = $63;
   $72 = (_pn_post_frame($27,0,$30,11576,$vararg_buffer)|0);
   $err = $72;
   $73 = $err;
   $74 = ($73|0)!=(0);
   if (!($74)) {
    $76 = $2;
    $77 = (($76) + 96|0);
    $78 = (($77) + 65|0);
    HEAP8[$78>>0] = 0;
    $79 = $2;
    $80 = (($79) + 96|0);
    $81 = (($80) + 56|0);
    $82 = $81;
    $83 = $82;
    HEAP32[$83>>2] = 0;
    $84 = (($82) + 4)|0;
    $85 = $84;
    HEAP32[$85>>2] = 0;
    $86 = $2;
    $87 = (($86) + 96|0);
    $88 = (($87) + 64|0);
    HEAP8[$88>>0] = 0;
    $89 = $2;
    $90 = (($89) + 96|0);
    $91 = (($90) + 68|0);
    HEAP32[$91>>2] = 0;
    $92 = $2;
    $93 = (($92) + 96|0);
    $94 = (($93) + 72|0);
    HEAP32[$94>>2] = 0;
    $95 = $2;
    $96 = (($95) + 96|0);
    $97 = (($96) + 76|0);
    HEAP8[$97>>0] = 0;
    break;
   }
   $75 = $err;
   $0 = $75;
   $98 = $0;
   STACKTOP = sp;return ($98|0);
  }
 } while(0);
 $0 = 0;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _pn_post_disp($transport,$delivery) {
 $transport = $transport|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0, $err = 0, $link = 0, $role = 0, $ssn = 0, $ssn_state = 0, $state = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $code = sp;
 $1 = $transport;
 $2 = $delivery;
 $3 = $2;
 $4 = (($3) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $link = $5;
 $6 = $link;
 $7 = (($6) + 256|0);
 $8 = HEAP32[$7>>2]|0;
 $ssn = $8;
 $9 = $ssn;
 $10 = (($9) + 96|0);
 $ssn_state = $10;
 $11 = $1;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $link;
 $15 = (($14) + 256|0);
 $16 = HEAP32[$15>>2]|0;
 _pn_modified($13,$16,0);
 $17 = $2;
 $18 = (($17) + 128|0);
 $state = $18;
 $19 = $state;
 $20 = (($19) + 5|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&1;
 if (!($22)) {
  ___assert_fail((11592|0),(10248|0),2026,(11608|0));
  // unreachable;
 }
 $23 = $link;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(3);
 $26 = $25&1;
 $role = $26;
 $27 = $2;
 $28 = (($27) + 16|0);
 $29 = $28;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $code;
 $36 = $35;
 HEAP32[$36>>2] = $31;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = $code;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)!=(0);
 $46 = ($44|0)!=(0);
 $47 = $45 | $46;
 if (!($47)) {
  $48 = $2;
  $49 = (($48) + 46|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&1;
  if (!($51)) {
   $0 = 0;
   $212 = $0;
   STACKTOP = sp;return ($212|0);
  }
 }
 $52 = $2;
 $53 = (_pni_disposition_batchable($52)|0);
 if (!($53)) {
  $54 = $1;
  $55 = (($54) + 36|0);
  $56 = HEAP32[$55>>2]|0;
  _pn_data_clear($56);
  $57 = $2;
  $58 = $1;
  $59 = (($58) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  _pni_disposition_encode($57,$60);
  $61 = $1;
  $62 = $ssn;
  $63 = (($62) + 96|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $role;
  $66 = $65&1;
  $67 = $66&1;
  $68 = $state;
  $69 = HEAP32[$68>>2]|0;
  $70 = $state;
  $71 = HEAP32[$70>>2]|0;
  $72 = $2;
  $73 = (($72) + 46|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&1;
  $76 = $75&1;
  $77 = $code;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79|0)!=(0);
  $84 = ($82|0)!=(0);
  $85 = $83 | $84;
  $86 = $85&1;
  $87 = $code;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = $1;
  $94 = (($93) + 36|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $vararg_buffer;
  $97 = $96;
  HEAP32[$97>>2] = 21;
  $98 = (($96) + 4)|0;
  $99 = $98;
  HEAP32[$99>>2] = 0;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr1>>2] = $67;
  $vararg_ptr2 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr2>>2] = $69;
  $vararg_ptr3 = (($vararg_buffer) + 16|0);
  HEAP32[$vararg_ptr3>>2] = $71;
  $vararg_ptr4 = (($vararg_buffer) + 20|0);
  HEAP32[$vararg_ptr4>>2] = $76;
  $vararg_ptr5 = (($vararg_buffer) + 24|0);
  HEAP32[$vararg_ptr5>>2] = $86;
  $vararg_ptr6 = (($vararg_buffer) + 28|0);
  $100 = $vararg_ptr6;
  $101 = $100;
  HEAP32[$101>>2] = $89;
  $102 = (($100) + 4)|0;
  $103 = $102;
  HEAP32[$103>>2] = $92;
  $vararg_ptr7 = (($vararg_buffer) + 36|0);
  HEAP32[$vararg_ptr7>>2] = $95;
  $104 = (_pn_post_frame($61,0,$64,11624,$vararg_buffer)|0);
  $0 = $104;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 $105 = $ssn_state;
 $106 = (($105) + 76|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&1;
 do {
  if ($108) {
   $109 = $code;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) + 4)|0;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = $ssn_state;
   $116 = (($115) + 56|0);
   $117 = $116;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = ($111|0)==($119|0);
   $124 = ($114|0)==($122|0);
   $125 = $123 & $124;
   if ($125) {
    $126 = $2;
    $127 = (($126) + 46|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&1;
    $130 = $129&1;
    $131 = $ssn_state;
    $132 = (($131) + 64|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133&1;
    $135 = $134&1;
    $136 = ($130|0)==($135|0);
    if ($136) {
     $137 = $ssn_state;
     $138 = (($137) + 65|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = $139&1;
     $141 = $140&1;
     $142 = $role;
     $143 = $142&1;
     $144 = $143&1;
     $145 = ($141|0)==($144|0);
     if ($145) {
      $146 = $state;
      $147 = HEAP32[$146>>2]|0;
      $148 = $ssn_state;
      $149 = (($148) + 68|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (($150) - 1)|0;
      $152 = ($147|0)==($151|0);
      if ($152) {
       $153 = $state;
       $154 = HEAP32[$153>>2]|0;
       $155 = $ssn_state;
       $156 = (($155) + 68|0);
       HEAP32[$156>>2] = $154;
       $0 = 0;
       $212 = $0;
       STACKTOP = sp;return ($212|0);
      }
      $157 = $state;
      $158 = HEAP32[$157>>2]|0;
      $159 = $ssn_state;
      $160 = (($159) + 72|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = (($161) + 1)|0;
      $163 = ($158|0)==($162|0);
      if ($163) {
       $164 = $state;
       $165 = HEAP32[$164>>2]|0;
       $166 = $ssn_state;
       $167 = (($166) + 72|0);
       HEAP32[$167>>2] = $165;
       $0 = 0;
       $212 = $0;
       STACKTOP = sp;return ($212|0);
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 $168 = $ssn_state;
 $169 = (($168) + 76|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&1;
 do {
  if ($171) {
   $172 = $1;
   $173 = $ssn;
   $174 = (_pn_flush_disp($172,$173)|0);
   $err = $174;
   $175 = $err;
   $176 = ($175|0)!=(0);
   if (!($176)) {
    break;
   }
   $177 = $err;
   $0 = $177;
   $212 = $0;
   STACKTOP = sp;return ($212|0);
  }
 } while(0);
 $178 = $role;
 $179 = $178&1;
 $180 = $ssn_state;
 $181 = (($180) + 65|0);
 $182 = $179&1;
 HEAP8[$181>>0] = $182;
 $183 = $code;
 $184 = $183;
 $185 = HEAP32[$184>>2]|0;
 $186 = (($183) + 4)|0;
 $187 = $186;
 $188 = HEAP32[$187>>2]|0;
 $189 = $ssn_state;
 $190 = (($189) + 56|0);
 $191 = $190;
 $192 = $191;
 HEAP32[$192>>2] = $185;
 $193 = (($191) + 4)|0;
 $194 = $193;
 HEAP32[$194>>2] = $188;
 $195 = $2;
 $196 = (($195) + 46|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197&1;
 $199 = $ssn_state;
 $200 = (($199) + 64|0);
 $201 = $198&1;
 HEAP8[$200>>0] = $201;
 $202 = $state;
 $203 = HEAP32[$202>>2]|0;
 $204 = $ssn_state;
 $205 = (($204) + 68|0);
 HEAP32[$205>>2] = $203;
 $206 = $state;
 $207 = HEAP32[$206>>2]|0;
 $208 = $ssn_state;
 $209 = (($208) + 72|0);
 HEAP32[$209>>2] = $207;
 $210 = $ssn_state;
 $211 = (($210) + 76|0);
 HEAP8[$211>>0] = 1;
 $0 = 0;
 $212 = $0;
 STACKTOP = sp;return ($212|0);
}
function _pn_process_tpwork_sender($transport,$delivery,$settle) {
 $transport = $transport|0;
 $delivery = $delivery|0;
 $settle = $settle|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes = 0, $count = 0, $err = 0, $full_size = 0, $link = 0, $link_state = 0, $sent = 0, $ssn_state = 0, $state = 0, $state1 = 0, $tag = 0, $xfr_posted = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bytes = sp + 32|0;
 $tag = sp + 16|0;
 $1 = $transport;
 $2 = $delivery;
 $3 = $settle;
 $4 = $3;
 HEAP8[$4>>0] = 0;
 $5 = $2;
 $6 = (($5) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $link = $7;
 $8 = $link;
 $9 = (($8) + 256|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 96|0);
 $ssn_state = $11;
 $12 = $link;
 $13 = (($12) + 236|0);
 $link_state = $13;
 $xfr_posted = 0;
 $14 = $ssn_state;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = ($16|0)>=(0);
 if ($17) {
  $18 = $link_state;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>=(0);
  if ($20) {
   $21 = $2;
   $22 = (($21) + 128|0);
   $state = $22;
   $23 = $state;
   $24 = (($23) + 4|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&1;
   do {
    if (!($26)) {
     $27 = $2;
     $28 = (($27) + 148|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&1;
     if (!($30)) {
      $31 = $2;
      $32 = (($31) + 136|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (_pn_buffer_size($33)|0);
      $35 = ($34>>>0)>(0);
      if (!($35)) {
       break;
      }
     }
     $36 = $ssn_state;
     $37 = (($36) + 32|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)>(0);
     if ($39) {
      $40 = $link_state;
      $41 = (($40) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)>(0);
      if ($43) {
       $44 = $state;
       $45 = (($44) + 5|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = $46&1;
       if (!($47)) {
        $48 = $ssn_state;
        $49 = (($48) + 16|0);
        $50 = $2;
        $51 = (_pn_delivery_map_push($49,$50)|0);
        $state = $51;
       }
       $52 = $2;
       $53 = (($52) + 136|0);
       $54 = HEAP32[$53>>2]|0;
       _pn_buffer_bytes($bytes,$54);
       $55 = HEAP32[$bytes>>2]|0;
       $full_size = $55;
       $56 = $2;
       $57 = (($56) + 100|0);
       $58 = HEAP32[$57>>2]|0;
       _pn_buffer_bytes($tag,$58);
       $59 = $1;
       $60 = (($59) + 36|0);
       $61 = HEAP32[$60>>2]|0;
       _pn_data_clear($61);
       $62 = $2;
       $63 = $1;
       $64 = (($63) + 36|0);
       $65 = HEAP32[$64>>2]|0;
       _pni_disposition_encode($62,$65);
       $66 = $1;
       $67 = $ssn_state;
       $68 = HEAP16[$67>>1]|0;
       $69 = $link_state;
       $70 = HEAP32[$69>>2]|0;
       $71 = $state;
       $72 = HEAP32[$71>>2]|0;
       $73 = $2;
       $74 = (($73) + 46|0);
       $75 = HEAP8[$74>>0]|0;
       $76 = $75&1;
       $77 = $2;
       $78 = (($77) + 148|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = $79&1;
       $81 = $80 ^ 1;
       $82 = $ssn_state;
       $83 = (($82) + 32|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $2;
       $86 = (($85) + 16|0);
       $87 = $86;
       $88 = $87;
       $89 = HEAP32[$88>>2]|0;
       $90 = (($87) + 4)|0;
       $91 = $90;
       $92 = HEAP32[$91>>2]|0;
       $93 = $1;
       $94 = (($93) + 36|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (_pn_post_amqp_transfer_frame($66,$68,$70,$72,$bytes,$tag,0,$76,$81,$84,$89,$92,$95)|0);
       $count = $96;
       $97 = $count;
       $98 = ($97|0)<(0);
       if ($98) {
        $99 = $count;
        $0 = $99;
        $204 = $0;
        STACKTOP = sp;return ($204|0);
       }
       $xfr_posted = 1;
       $100 = $count;
       $101 = $ssn_state;
       $102 = (($101) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($103) + ($100))|0;
       HEAP32[$102>>2] = $104;
       $105 = $count;
       $106 = $ssn_state;
       $107 = (($106) + 32|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) - ($105))|0;
       HEAP32[$107>>2] = $109;
       $110 = $full_size;
       $111 = HEAP32[$bytes>>2]|0;
       $112 = (($110) - ($111))|0;
       $sent = $112;
       $113 = $2;
       $114 = (($113) + 136|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = $sent;
       (_pn_buffer_trim($115,$116,0)|0);
       $117 = $sent;
       $118 = $link;
       $119 = (($118) + 256|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (($120) + 84|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = (($122) - ($117))|0;
       HEAP32[$121>>2] = $123;
       $124 = $2;
       $125 = (($124) + 136|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (_pn_buffer_size($126)|0);
       $128 = ($127|0)!=(0);
       if (!($128)) {
        $129 = $2;
        $130 = (($129) + 148|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = $131&1;
        if ($132) {
         $133 = $state;
         $134 = (($133) + 4|0);
         HEAP8[$134>>0] = 1;
         $135 = $link_state;
         $136 = (($135) + 8|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = (($137) + 1)|0;
         HEAP32[$136>>2] = $138;
         $139 = $link_state;
         $140 = (($139) + 12|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = (($141) + -1)|0;
         HEAP32[$140>>2] = $142;
         $143 = $link;
         $144 = (($143) + 288|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = (($145) + -1)|0;
         HEAP32[$144>>2] = $146;
         $147 = $link;
         $148 = (($147) + 256|0);
         $149 = HEAP32[$148>>2]|0;
         $150 = (($149) + 92|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = (($151) + -1)|0;
         HEAP32[$150>>2] = $152;
        }
       }
       $153 = $1;
       $154 = (($153) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = (($155) + 132|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = HEAP32[80>>2]|0;
       $159 = $link;
       (_pn_collector_put($157,$158,$159,26)|0);
      }
     }
    }
   } while(0);
  }
 }
 $160 = $2;
 $161 = (($160) + 128|0);
 $162 = (($161) + 5|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&1;
 if ($164) {
  $165 = $2;
  $166 = (($165) + 128|0);
  $167 = $166;
 } else {
  $167 = 0;
 }
 $state1 = $167;
 $168 = $ssn_state;
 $169 = HEAP16[$168>>1]|0;
 $170 = $169 << 16 >> 16;
 $171 = ($170|0)>=(0);
 do {
  if ($171) {
   $172 = $2;
   $173 = (($172) + 48|0);
   $174 = (($173) + 46|0);
   $175 = HEAP8[$174>>0]|0;
   $176 = $175&1;
   if (!($176)) {
    $177 = $state1;
    $178 = ($177|0)!=(0|0);
    if ($178) {
     $179 = $state1;
     $180 = (($179) + 4|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&1;
     if ($182) {
      $183 = $xfr_posted;
      $184 = $183&1;
      if (!($184)) {
       $185 = $1;
       $186 = $2;
       $187 = (_pn_post_disp($185,$186)|0);
       $err = $187;
       $188 = $err;
       $189 = ($188|0)!=(0);
       if (!($189)) {
        break;
       }
       $190 = $err;
       $0 = $190;
       $204 = $0;
       STACKTOP = sp;return ($204|0);
      }
     }
    }
   }
  }
 } while(0);
 $191 = $2;
 $192 = (($191) + 46|0);
 $193 = HEAP8[$192>>0]|0;
 $194 = $193&1;
 if ($194) {
  $195 = $state1;
  $196 = ($195|0)!=(0|0);
  if ($196) {
   $197 = $state1;
   $198 = (($197) + 4|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&1;
   $203 = $200;
  } else {
   $203 = 0;
  }
 } else {
  $203 = 0;
 }
 $201 = $3;
 $202 = $203&1;
 HEAP8[$201>>0] = $202;
 $0 = 0;
 $204 = $0;
 STACKTOP = sp;return ($204|0);
}
function _pn_process_tpwork_receiver($transport,$delivery,$settle) {
 $transport = $transport|0;
 $delivery = $delivery|0;
 $settle = $settle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $err1 = 0, $link = 0, $ssn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $delivery;
 $3 = $settle;
 $4 = $3;
 HEAP8[$4>>0] = 0;
 $5 = $2;
 $6 = (($5) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $link = $7;
 $8 = $link;
 $9 = (($8) + 256|0);
 $10 = HEAP32[$9>>2]|0;
 $ssn = $10;
 $11 = $ssn;
 $12 = (($11) + 96|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = ($14|0)>=(0);
 do {
  if ($15) {
   $16 = $2;
   $17 = (($16) + 48|0);
   $18 = (($17) + 46|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&1;
   if (!($20)) {
    $21 = $2;
    $22 = (($21) + 128|0);
    $23 = (($22) + 5|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&1;
    if ($25) {
     $26 = $1;
     $27 = $2;
     $28 = (_pn_post_disp($26,$27)|0);
     $err = $28;
     $29 = $err;
     $30 = ($29|0)!=(0);
     if (!($30)) {
      break;
     }
     $31 = $err;
     $0 = $31;
     $50 = $0;
     STACKTOP = sp;return ($50|0);
    }
   }
  }
 } while(0);
 $32 = $ssn;
 $33 = (($32) + 96|0);
 $34 = (($33) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 do {
  if (!($36)) {
   $37 = $1;
   $38 = $ssn;
   $39 = $link;
   $40 = (_pn_post_flow($37,$38,$39)|0);
   $err1 = $40;
   $41 = $err1;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    break;
   }
   $43 = $err1;
   $0 = $43;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $44 = $2;
 $45 = (($44) + 46|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&1;
 $48 = $3;
 $49 = $47&1;
 HEAP8[$48>>0] = $49;
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _pn_process_tpwork($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $delivery = 0, $dm = 0, $err = 0, $err1 = 0;
 var $link = 0, $settle = 0, $tp_next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $settle = sp + 40|0;
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = (($6) + 239|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&1;
   if (!($9)) {
    $10 = $2;
    $conn = $10;
    $11 = $conn;
    $12 = (($11) + 96|0);
    $13 = HEAP32[$12>>2]|0;
    $delivery = $13;
    while(1) {
     $14 = $delivery;
     $15 = ($14|0)!=(0|0);
     if (!($15)) {
      label = 18;
      break;
     }
     $16 = $delivery;
     $17 = (($16) + 120|0);
     $18 = HEAP32[$17>>2]|0;
     $tp_next = $18;
     HEAP8[$settle>>0] = 0;
     $19 = $delivery;
     $20 = (($19) + 96|0);
     $21 = HEAP32[$20>>2]|0;
     $link = $21;
     $dm = 0;
     $22 = $link;
     $23 = (_pn_link_is_sender($22)|0);
     if ($23) {
      $24 = $link;
      $25 = (($24) + 256|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 96|0);
      $28 = (($27) + 16|0);
      $dm = $28;
      $29 = $1;
      $30 = $delivery;
      $31 = (_pn_process_tpwork_sender($29,$30,$settle)|0);
      $err = $31;
      $32 = $err;
      $33 = ($32|0)!=(0);
      if ($33) {
       label = 7;
       break;
      }
     } else {
      $35 = $link;
      $36 = (($35) + 256|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + 96|0);
      $39 = (($38) + 8|0);
      $dm = $39;
      $40 = $1;
      $41 = $delivery;
      $42 = (_pn_process_tpwork_receiver($40,$41,$settle)|0);
      $err1 = $42;
      $43 = $err1;
      $44 = ($43|0)!=(0);
      if ($44) {
       label = 10;
       break;
      }
     }
     $46 = HEAP8[$settle>>0]|0;
     $47 = $46&1;
     if ($47) {
      $48 = $dm;
      $49 = $delivery;
      _pn_full_settle($48,$49);
     } else {
      $50 = $delivery;
      $51 = (_pn_delivery_buffered($50)|0);
      if (!($51)) {
       $52 = $delivery;
       _pn_clear_tpwork($52);
      }
     }
     $53 = $tp_next;
     $delivery = $53;
    }
    if ((label|0) == 7) {
     $34 = $err;
     $0 = $34;
     $54 = $0;
     STACKTOP = sp;return ($54|0);
    }
    else if ((label|0) == 10) {
     $45 = $err1;
     $0 = $45;
     $54 = $0;
     STACKTOP = sp;return ($54|0);
    }
    else if ((label|0) == 18) {
     break;
    }
   }
  }
 } while(0);
 $0 = 0;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _pn_process_flush_disp($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $session = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = $2;
  $session = $6;
  $7 = $session;
  $8 = (($7) + 96|0);
  $state = $8;
  $9 = $state;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = ($11|0)>=(0);
  do {
   if ($12) {
    $13 = $1;
    $14 = (($13) + 239|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&1;
    if (!($16)) {
     $17 = $1;
     $18 = $session;
     $19 = (_pn_flush_disp($17,$18)|0);
     $err = $19;
     $20 = $err;
     $21 = ($20|0)!=(0);
     if (!($21)) {
      break;
     }
     $22 = $err;
     $0 = $22;
     $23 = $0;
     STACKTOP = sp;return ($23|0);
    }
   }
  } while(0);
 }
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _pn_process_flow_sender($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $snd = 0, $ssn = 0, $state = 0, $tail = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = $2;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $2;
   $snd = $11;
   $12 = $snd;
   $13 = (($12) + 256|0);
   $14 = HEAP32[$13>>2]|0;
   $ssn = $14;
   $15 = $snd;
   $16 = (($15) + 236|0);
   $state = $16;
   $17 = $ssn;
   $18 = (($17) + 96|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = ($20|0)>=(0);
   do {
    if ($21) {
     $22 = $state;
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)>=(0);
     if ($24) {
      $25 = $snd;
      $26 = (($25) + 301|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&1;
      if ($28) {
       $29 = $snd;
       $30 = (($29) + 292|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)!=(0);
       if ($32) {
        $33 = $snd;
        $34 = (($33) + 264|0);
        $35 = HEAP32[$34>>2]|0;
        $tail = $35;
        $36 = $tail;
        $37 = ($36|0)!=(0|0);
        if ($37) {
         $38 = $tail;
         $39 = (_pn_delivery_buffered($38)|0);
         if ($39) {
          break;
         }
        }
        $40 = $state;
        $41 = (($40) + 12|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $state;
        $44 = (($43) + 8|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (($45) + ($42))|0;
        HEAP32[$44>>2] = $46;
        $47 = $state;
        $48 = (($47) + 12|0);
        HEAP32[$48>>2] = 0;
        $49 = $snd;
        $50 = (($49) + 292|0);
        HEAP32[$50>>2] = 0;
        $51 = $1;
        $52 = $ssn;
        $53 = $snd;
        $54 = (_pn_post_flow($51,$52,$53)|0);
        $0 = $54;
        $55 = $0;
        STACKTOP = sp;return ($55|0);
       }
      }
     }
    }
   } while(0);
  }
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _pn_process_link_teardown($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $description = 0, $err = 0, $info = 0, $link = 0, $name = 0, $session = 0, $ssn_state = 0, $state = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(2);
 if ($5) {
  label = 3;
 } else {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(3);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = $2;
  $link = $9;
  $10 = $link;
  $11 = (($10) + 256|0);
  $12 = HEAP32[$11>>2]|0;
  $session = $12;
  $13 = $session;
  $14 = (($13) + 96|0);
  $ssn_state = $14;
  $15 = $link;
  $16 = (($15) + 236|0);
  $state = $16;
  $17 = $2;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 4;
  $21 = ($20|0)!=(0);
  if ($21) {
   label = 5;
  } else {
   $22 = $link;
   $23 = (($22) + 302|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&1;
   if ($25) {
    label = 5;
   }
  }
  do {
   if ((label|0) == 5) {
    $26 = $state;
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)>=(0);
    if ($28) {
     $29 = $ssn_state;
     $30 = HEAP16[$29>>1]|0;
     $31 = $30 << 16 >> 16;
     $32 = ($31|0)>=(0);
     if ($32) {
      $33 = $1;
      $34 = (($33) + 239|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = $35&1;
      if (!($36)) {
       $37 = $link;
       $38 = (_pn_link_is_sender($37)|0);
       if ($38) {
        $39 = $link;
        $40 = (_pn_link_queued($39)|0);
        $41 = ($40|0)!=(0);
        if ($41) {
         $42 = $state;
         $43 = (($42) + 4|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)!=(-2);
         if ($45) {
          $46 = $ssn_state;
          $47 = (($46) + 2|0);
          $48 = HEAP16[$47>>1]|0;
          $49 = $48 << 16 >> 16;
          $50 = ($49|0)!=(-2);
          if ($50) {
           $51 = $1;
           $52 = (($51) + 240|0);
           $53 = HEAP8[$52>>0]|0;
           $54 = $53&1;
           if (!($54)) {
            $0 = 0;
            $101 = $0;
            STACKTOP = sp;return ($101|0);
           }
          }
         }
        }
       }
       $name = 0;
       $description = 0;
       $info = 0;
       $55 = $2;
       $56 = (($55) + 12|0);
       $57 = (_pn_condition_is_set($56)|0);
       if ($57) {
        $58 = $2;
        $59 = (($58) + 12|0);
        $60 = (_pn_condition_get_name($59)|0);
        $name = $60;
        $61 = $2;
        $62 = (($61) + 12|0);
        $63 = (_pn_condition_get_description($62)|0);
        $description = $63;
        $64 = $2;
        $65 = (($64) + 12|0);
        $66 = (_pn_condition_info($65)|0);
        $info = $66;
       }
       $67 = $1;
       $68 = $ssn_state;
       $69 = HEAP16[$68>>1]|0;
       $70 = $state;
       $71 = HEAP32[$70>>2]|0;
       $72 = $link;
       $73 = (($72) + 302|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = $74&1;
       $76 = $75 ^ 1;
       $77 = $76&1;
       $78 = $name;
       $79 = ($78|0)!=(0|0);
       $80 = $79&1;
       $81 = $name;
       $82 = $description;
       $83 = $info;
       $84 = $vararg_buffer;
       $85 = $84;
       HEAP32[$85>>2] = 22;
       $86 = (($84) + 4)|0;
       $87 = $86;
       HEAP32[$87>>2] = 0;
       $vararg_ptr1 = (($vararg_buffer) + 8|0);
       HEAP32[$vararg_ptr1>>2] = $71;
       $vararg_ptr2 = (($vararg_buffer) + 12|0);
       HEAP32[$vararg_ptr2>>2] = $77;
       $vararg_ptr3 = (($vararg_buffer) + 16|0);
       HEAP32[$vararg_ptr3>>2] = $80;
       $vararg_ptr4 = (($vararg_buffer) + 20|0);
       $88 = $vararg_ptr4;
       $89 = $88;
       HEAP32[$89>>2] = 29;
       $90 = (($88) + 4)|0;
       $91 = $90;
       HEAP32[$91>>2] = 0;
       $vararg_ptr5 = (($vararg_buffer) + 28|0);
       HEAP32[$vararg_ptr5>>2] = $81;
       $vararg_ptr6 = (($vararg_buffer) + 32|0);
       HEAP32[$vararg_ptr6>>2] = $82;
       $vararg_ptr7 = (($vararg_buffer) + 36|0);
       HEAP32[$vararg_ptr7>>2] = $83;
       $92 = (_pn_post_frame($67,0,$69,11640,$vararg_buffer)|0);
       $err = $92;
       $93 = $err;
       $94 = ($93|0)!=(0);
       if (!($94)) {
        $96 = $link;
        _pni_unmap_local_handle($96);
        break;
       }
       $95 = $err;
       $0 = $95;
       $101 = $0;
       STACKTOP = sp;return ($101|0);
      }
     }
    }
   }
  } while(0);
  $97 = $1;
  $98 = (($97) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $2;
  _pn_clear_modified($99,$100);
 }
 $0 = 0;
 $101 = $0;
 STACKTOP = sp;return ($101|0);
}
function _pn_pointful_buffering($transport,$session) {
 $transport = $transport|0;
 $session = $session|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $link = 0, $ssn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $session;
 $3 = $1;
 $4 = (($3) + 240|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 $7 = $1;
 $8 = (($7) + 238|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 if (!($10)) {
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 $11 = $1;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $conn = $13;
 $14 = $conn;
 $15 = (_pn_link_head($14,0)|0);
 $link = $15;
 while(1) {
  $16 = $link;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 17;
   break;
  }
  $18 = $link;
  $19 = (_pn_link_is_sender($18)|0);
  if ($19) {
   $20 = $link;
   $21 = (_pn_link_queued($20)|0);
   $22 = ($21|0)>(0);
   if ($22) {
    $23 = $link;
    $24 = (($23) + 256|0);
    $25 = HEAP32[$24>>2]|0;
    $ssn = $25;
    $26 = $2;
    $27 = ($26|0)!=(0|0);
    if ($27) {
     $28 = $2;
     $29 = $ssn;
     $30 = ($28|0)==($29|0);
     if ($30) {
      $31 = $link;
      $32 = (($31) + 236|0);
      $33 = (($32) + 4|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)!=(-2);
      if ($35) {
       $36 = $2;
       $37 = (($36) + 96|0);
       $38 = (($37) + 2|0);
       $39 = HEAP16[$38>>1]|0;
       $40 = $39 << 16 >> 16;
       $41 = ($40|0)!=(-2);
       if ($41) {
        label = 13;
        break;
       }
      }
     }
    }
   }
  }
  $42 = $link;
  $43 = (_pn_link_next($42,0)|0);
  $link = $43;
 }
 if ((label|0) == 13) {
  $$expand_i1_val4 = 1;
  $0 = $$expand_i1_val4;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 17) {
  $$expand_i1_val6 = 0;
  $0 = $$expand_i1_val6;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _pn_process_ssn_teardown($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $description = 0, $err = 0, $info = 0, $name = 0, $session = 0, $state = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = $2;
  $session = $6;
  $7 = $session;
  $8 = (($7) + 96|0);
  $state = $8;
  $9 = $2;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 4;
  $13 = ($12|0)!=(0);
  do {
   if ($13) {
    $14 = $state;
    $15 = HEAP16[$14>>1]|0;
    $16 = $15 << 16 >> 16;
    $17 = ($16|0)>=(0);
    if ($17) {
     $18 = $1;
     $19 = (($18) + 239|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&1;
     if (!($21)) {
      $22 = $1;
      $23 = $session;
      $24 = (_pn_pointful_buffering($22,$23)|0);
      if ($24) {
       $0 = 0;
       $63 = $0;
       STACKTOP = sp;return ($63|0);
      }
      $name = 0;
      $description = 0;
      $info = 0;
      $25 = $2;
      $26 = (($25) + 12|0);
      $27 = (_pn_condition_is_set($26)|0);
      if ($27) {
       $28 = $2;
       $29 = (($28) + 12|0);
       $30 = (_pn_condition_get_name($29)|0);
       $name = $30;
       $31 = $2;
       $32 = (($31) + 12|0);
       $33 = (_pn_condition_get_description($32)|0);
       $description = $33;
       $34 = $2;
       $35 = (($34) + 12|0);
       $36 = (_pn_condition_info($35)|0);
       $info = $36;
      }
      $37 = $1;
      $38 = $state;
      $39 = HEAP16[$38>>1]|0;
      $40 = $name;
      $41 = ($40|0)!=(0|0);
      $42 = $41&1;
      $43 = $name;
      $44 = $description;
      $45 = $info;
      $46 = $vararg_buffer;
      $47 = $46;
      HEAP32[$47>>2] = 23;
      $48 = (($46) + 4)|0;
      $49 = $48;
      HEAP32[$49>>2] = 0;
      $vararg_ptr1 = (($vararg_buffer) + 8|0);
      HEAP32[$vararg_ptr1>>2] = $42;
      $vararg_ptr2 = (($vararg_buffer) + 12|0);
      $50 = $vararg_ptr2;
      $51 = $50;
      HEAP32[$51>>2] = 29;
      $52 = (($50) + 4)|0;
      $53 = $52;
      HEAP32[$53>>2] = 0;
      $vararg_ptr3 = (($vararg_buffer) + 20|0);
      HEAP32[$vararg_ptr3>>2] = $43;
      $vararg_ptr4 = (($vararg_buffer) + 24|0);
      HEAP32[$vararg_ptr4>>2] = $44;
      $vararg_ptr5 = (($vararg_buffer) + 28|0);
      HEAP32[$vararg_ptr5>>2] = $45;
      $54 = (_pn_post_frame($37,0,$39,10720,$vararg_buffer)|0);
      $err = $54;
      $55 = $err;
      $56 = ($55|0)!=(0);
      if (!($56)) {
       $58 = $session;
       _pni_unmap_local_channel($58);
       break;
      }
      $57 = $err;
      $0 = $57;
      $63 = $0;
      STACKTOP = sp;return ($63|0);
     }
    }
   }
  } while(0);
  $59 = $1;
  $60 = (($59) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $2;
  _pn_clear_modified($61,$62);
 }
 $0 = 0;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _pn_process_conn_teardown($transport,$endpoint) {
 $transport = $transport|0;
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $endpoint;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $2;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 4;
  $10 = ($9|0)!=(0);
  do {
   if ($10) {
    $11 = $1;
    $12 = (($11) + 239|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&1;
    if (!($14)) {
     $15 = $1;
     $16 = (_pn_pointful_buffering($15,0)|0);
     if ($16) {
      $0 = 0;
      $28 = $0;
      STACKTOP = sp;return ($28|0);
     }
     $17 = $1;
     $18 = (_pn_post_close($17,0,0)|0);
     $err = $18;
     $19 = $err;
     $20 = ($19|0)!=(0);
     if (!($20)) {
      $22 = $1;
      $23 = (($22) + 239|0);
      HEAP8[$23>>0] = 1;
      break;
     }
     $21 = $err;
     $0 = $21;
     $28 = $0;
     STACKTOP = sp;return ($28|0);
    }
   }
  } while(0);
  $24 = $1;
  $25 = (($24) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  _pn_clear_modified($26,$27);
 }
 $0 = 0;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _pn_phase($transport,$phase) {
 $transport = $transport|0;
 $phase = $phase|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $conn = 0, $endpoint = 0, $err = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $phase;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $conn = $5;
 $6 = $conn;
 $7 = (($6) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $endpoint = $8;
 while(1) {
  $9 = $endpoint;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $endpoint;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $next = $13;
  $14 = $2;
  $15 = $1;
  $16 = $endpoint;
  $17 = (FUNCTION_TABLE_iii[$14 & 127]($15,$16)|0);
  $err = $17;
  $18 = $err;
  $19 = ($18|0)!=(0);
  if ($19) {
   label = 4;
   break;
  }
  $21 = $next;
  $endpoint = $21;
 }
 if ((label|0) == 4) {
  $20 = $err;
  $0 = $20;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pn_process($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = (_pn_phase($2,96)|0);
 $err = $3;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = $err;
   $0 = $5;
  } else {
   $6 = $1;
   $7 = (_pn_phase($6,97)|0);
   $err = $7;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = $err;
    $0 = $9;
    break;
   }
   $10 = $1;
   $11 = (_pn_phase($10,98)|0);
   $err = $11;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = $err;
    $0 = $13;
    break;
   }
   $14 = $1;
   $15 = (_pn_phase($14,99)|0);
   $err = $15;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $err;
    $0 = $17;
    break;
   }
   $18 = $1;
   $19 = (_pn_phase($18,100)|0);
   $err = $19;
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = $err;
    $0 = $21;
    break;
   }
   $22 = $1;
   $23 = (_pn_phase($22,100)|0);
   $err = $23;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $err;
    $0 = $25;
    break;
   }
   $26 = $1;
   $27 = (_pn_phase($26,101)|0);
   $err = $27;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $err;
    $0 = $29;
    break;
   }
   $30 = $1;
   $31 = (_pn_phase($30,102)|0);
   $err = $31;
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = $err;
    $0 = $33;
    break;
   }
   $34 = $1;
   $35 = (_pn_phase($34,103)|0);
   $err = $35;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $err;
    $0 = $37;
    break;
   }
   $38 = $1;
   $39 = (_pn_phase($38,104)|0);
   $err = $39;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $err;
    $0 = $41;
    break;
   }
   $42 = $1;
   $43 = (_pn_phase($42,105)|0);
   $err = $43;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $err;
    $0 = $45;
    break;
   }
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 96|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $1;
    $53 = (($52) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $1;
    $56 = (($55) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    _pn_modified($54,$57,0);
   }
   $0 = 0;
  }
 } while(0);
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _pn_transport_pending($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (_transport_produce($3)|0);
  STACKTOP = sp;return ($4|0);
 } else {
  ___assert_fail((10232|0),(10248|0),2736,(11736|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_transport_head($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (($4) + 204|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $1;
   $9 = (($8) + 208|0);
   $10 = HEAP32[$9>>2]|0;
   $0 = $10;
   $11 = $0;
   STACKTOP = sp;return ($11|0);
  }
 }
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _pn_transport_pop($transport,$size) {
 $transport = $transport|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $size;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 204|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ($6>>>0)>=($7>>>0);
 if (!($8)) {
  ___assert_fail((11792|0),(10248|0),2771,(11832|0));
  // unreachable;
 }
 $9 = $1;
 $10 = $0;
 $11 = (($10) + 204|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($9))|0;
 HEAP32[$11>>2] = $13;
 $14 = $1;
 $15 = $0;
 $16 = (($15) + 176|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_i64Add(($19|0),($22|0),($14|0),0)|0);
 $24 = tempRet0;
 $25 = $16;
 $26 = $25;
 HEAP32[$26>>2] = $23;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = $0;
 $30 = (($29) + 204|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $0;
  $34 = (($33) + 208|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = $0;
  $38 = (($37) + 208|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36)|0);
  $41 = $0;
  $42 = (($41) + 204|0);
  $43 = HEAP32[$42>>2]|0;
  _memmove(($35|0),($40|0),($43|0))|0;
 }
 $44 = $0;
 $45 = (($44) + 204|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  $48 = $0;
  $49 = (_pn_transport_pending($48)|0);
  $50 = ($49|0)<(0);
  if ($50) {
   $51 = $0;
   _pni_close_head($51);
  }
 }
 STACKTOP = sp;return;
}
function _pn_transport_vlogf($transport,$fmt,$ap) {
 $transport = $transport|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $fmt;
 $2 = $ap;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 136|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = $2;
  (_pn_string_vformat($7,$8,$9)|0);
  $10 = $0;
  $11 = $0;
  $12 = (($11) + 136|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_pn_string_get($13)|0);
  _pn_transport_log($10,$14);
  STACKTOP = sp;return;
 }
 $15 = (_pn_log_enabled()|0);
 if ($15) {
  $16 = $1;
  $17 = $2;
  _pn_vlogf_impl($16,$17);
 }
 STACKTOP = sp;return;
}
function _pn_transport_tick($transport,$0,$1) {
 $transport = $transport|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $r = sp;
 $2 = $transport;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $r;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(3);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $2;
  $16 = (($15) + 76|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $i;
   $21 = $2;
   $22 = (($21) + 76|0);
   $23 = (($22) + ($20<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $r;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = $i;
    $35 = $2;
    $36 = (($35) + 76|0);
    $37 = (($36) + ($34<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $2;
    $42 = $i;
    $43 = $3;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (FUNCTION_TABLE_iiiii[$40 & 127]($41,$42,$45,$48)|0);
    $50 = tempRet0;
    $51 = (_pn_timestamp_min($30,$33,$49,$50)|0);
    $52 = tempRet0;
    $53 = $r;
    $54 = $53;
    HEAP32[$54>>2] = $51;
    $55 = (($53) + 4)|0;
    $56 = $55;
    HEAP32[$56>>2] = $52;
   }
  }
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 $59 = $r;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 tempRet0 = $64;
 STACKTOP = sp;return ($61|0);
}
function _pn_transport_push($transport,$src,$size) {
 $transport = $transport|0;
 $src = $src|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capacity = 0, $dst = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $src;
 $3 = $size;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((10232|0),(10248|0),2687,(11680|0));
  // unreachable;
 }
 $6 = $1;
 $7 = (_pn_transport_capacity($6)|0);
 $capacity = $7;
 $8 = $capacity;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $capacity;
  $0 = $10;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $11 = $3;
 $12 = $capacity;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $capacity;
  $3 = $14;
 }
 $15 = $1;
 $16 = (_pn_transport_tail($15)|0);
 $dst = $16;
 $17 = $dst;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((11704|0),(10248|0),2697,(11680|0));
  // unreachable;
 }
 $19 = $dst;
 $20 = $2;
 $21 = $3;
 _memmove(($19|0),($20|0),($21|0))|0;
 $22 = $1;
 $23 = $3;
 $24 = (_pn_transport_process($22,$23)|0);
 $n = $24;
 $25 = $n;
 $26 = ($25|0)<(0);
 if ($26) {
  $27 = $n;
  $0 = $27;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $28 = $3;
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _pn_transport_peek($transport,$dst,$size) {
 $transport = $transport|0;
 $dst = $dst|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pending = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $dst;
 $3 = $size;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((10232|0),(10248|0),2750,(11760|0));
  // unreachable;
 }
 $6 = $1;
 $7 = (_pn_transport_pending($6)|0);
 $pending = $7;
 $8 = $pending;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = $pending;
  $0 = $10;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $11 = $3;
 $12 = $pending;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $pending;
  $3 = $14;
 }
 $15 = $pending;
 $16 = ($15|0)>(0);
 do {
  if ($16) {
   $17 = $1;
   $18 = (_pn_transport_head($17)|0);
   $src = $18;
   $19 = $src;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = $2;
    $22 = $src;
    $23 = $3;
    _memmove(($21|0),($22|0),($23|0))|0;
    break;
   } else {
    ___assert_fail((11784|0),(10248|0),2761,(11760|0));
    // unreachable;
   }
  }
 } while(0);
 $24 = $3;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _pn_transport_close_head($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pending = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (_pn_transport_pending($1)|0);
 $pending = $2;
 $3 = $0;
 _pni_close_head($3);
 $4 = $pending;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = $0;
 $7 = $pending;
 _pn_transport_pop($6,$7);
 STACKTOP = sp;return 0;
}
function _pn_message_finalize($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $msg = $1;
 $2 = $msg;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _pn_free($4);
 $5 = $msg;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _pn_free($7);
 $8 = $msg;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 _pn_free($10);
 $11 = $msg;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 _pn_free($13);
 $14 = $msg;
 $15 = (($14) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 _pn_free($16);
 $17 = $msg;
 $18 = (($17) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 _pn_free($19);
 $20 = $msg;
 $21 = (($20) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 _pn_free($22);
 $23 = $msg;
 $24 = (($23) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 _pn_free($25);
 $26 = $msg;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 _pn_data_free($28);
 $29 = $msg;
 $30 = (($29) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 _pn_data_free($31);
 $32 = $msg;
 $33 = (($32) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 _pn_data_free($34);
 $35 = $msg;
 $36 = (($35) + 60|0);
 $37 = HEAP32[$36>>2]|0;
 _pn_data_free($37);
 $38 = $msg;
 $39 = (($38) + 64|0);
 $40 = HEAP32[$39>>2]|0;
 _pn_data_free($40);
 $41 = $msg;
 $42 = (($41) + 68|0);
 $43 = HEAP32[$42>>2]|0;
 _pn_data_free($43);
 $44 = $msg;
 $45 = (($44) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 _pn_data_free($46);
 $47 = $msg;
 $48 = (($47) + 76|0);
 $49 = HEAP32[$48>>2]|0;
 _pn_parser_free($49);
 $50 = $msg;
 $51 = (($50) + 80|0);
 $52 = HEAP32[$51>>2]|0;
 _pn_error_free($52);
 STACKTOP = sp;return;
}
function _pn_message_inspect($obj,$dst) {
 $obj = $obj|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $comma = 0, $err = 0, $err1 = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0;
 var $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer83 = sp + 304|0;
 $vararg_buffer81 = sp + 296|0;
 $vararg_buffer79 = sp + 288|0;
 $vararg_buffer77 = sp + 280|0;
 $vararg_buffer75 = sp + 272|0;
 $vararg_buffer73 = sp + 264|0;
 $vararg_buffer71 = sp + 256|0;
 $vararg_buffer69 = sp + 248|0;
 $vararg_buffer67 = sp + 240|0;
 $vararg_buffer64 = sp + 232|0;
 $vararg_buffer62 = sp + 224|0;
 $vararg_buffer60 = sp + 216|0;
 $vararg_buffer57 = sp + 208|0;
 $vararg_buffer55 = sp + 200|0;
 $vararg_buffer53 = sp + 192|0;
 $vararg_buffer50 = sp + 184|0;
 $vararg_buffer47 = sp + 176|0;
 $vararg_buffer45 = sp + 168|0;
 $vararg_buffer43 = sp + 160|0;
 $vararg_buffer41 = sp + 152|0;
 $vararg_buffer39 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer31 = sp + 112|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $obj;
 $2 = $dst;
 $3 = $1;
 $msg = $3;
 $4 = $2;
 $5 = (_pn_string_addf($4,12752,$vararg_buffer)|0);
 $err = $5;
 $6 = $err;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $err;
  $0 = $8;
  $489 = $0;
  STACKTOP = sp;return ($489|0);
 }
 $comma = 0;
 $9 = $msg;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_pn_string_get($11)|0);
 $13 = ($12|0)!=(0|0);
 do {
  if ($13) {
   $14 = $2;
   $15 = (_pn_string_addf($14,12768,$vararg_buffer1)|0);
   $err = $15;
   $16 = $err;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $err;
    $0 = $18;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $19 = $msg;
   $20 = (($19) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $2;
   $23 = (_pn_inspect($21,$22)|0);
   $err = $23;
   $24 = $err;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $err;
    $0 = $26;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $27 = $2;
   $28 = (_pn_string_addf($27,12784,$vararg_buffer3)|0);
   $err = $28;
   $29 = $err;
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $comma = 1;
    break;
   }
   $31 = $err;
   $0 = $31;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $32 = $msg;
 $33 = (($32) + 97|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 do {
  if ($35) {
   $36 = $2;
   $37 = $msg;
   $38 = (($37) + 97|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&1;
   $41 = $40&1;
   HEAP32[$vararg_buffer5>>2] = $41;
   $42 = (_pn_string_addf($36,12792,$vararg_buffer5)|0);
   $err = $42;
   $43 = $err;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $comma = 1;
    break;
   }
   $45 = $err;
   $0 = $45;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $46 = $msg;
 $47 = (($46) + 96|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)!=(4);
 do {
  if ($50) {
   $51 = $2;
   $52 = $msg;
   $53 = (($52) + 96|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   HEAP32[$vararg_buffer7>>2] = $55;
   $56 = (_pn_string_addf($51,12808,$vararg_buffer7)|0);
   $err = $56;
   $57 = $err;
   $58 = ($57|0)!=(0);
   if (!($58)) {
    $comma = 1;
    break;
   }
   $59 = $err;
   $0 = $59;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $60 = $msg;
 $61 = (($60) + 88|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0);
 do {
  if ($63) {
   $64 = $2;
   $65 = $msg;
   $66 = (($65) + 88|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $67;
   $68 = (_pn_string_addf($64,12824,$vararg_buffer10)|0);
   $err = $68;
   $69 = $err;
   $70 = ($69|0)!=(0);
   if (!($70)) {
    $comma = 1;
    break;
   }
   $71 = $err;
   $0 = $71;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $72 = $msg;
 $73 = (($72) + 98|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&1;
 do {
  if ($75) {
   $76 = $2;
   $77 = $msg;
   $78 = (($77) + 98|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&1;
   $81 = $80&1;
   HEAP32[$vararg_buffer13>>2] = $81;
   $82 = (_pn_string_addf($76,12840,$vararg_buffer13)|0);
   $err = $82;
   $83 = $err;
   $84 = ($83|0)!=(0);
   if (!($84)) {
    $comma = 1;
    break;
   }
   $85 = $err;
   $0 = $85;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $86 = $msg;
 $87 = (($86) + 92|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0);
 do {
  if ($89) {
   $90 = $2;
   $91 = $msg;
   $92 = (($91) + 92|0);
   $93 = HEAP32[$92>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $93;
   $94 = (_pn_string_addf($90,12864,$vararg_buffer16)|0);
   $err = $94;
   $95 = $err;
   $96 = ($95|0)!=(0);
   if (!($96)) {
    $comma = 1;
    break;
   }
   $97 = $err;
   $0 = $97;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $98 = $msg;
 $99 = (($98) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (_pn_data_size($100)|0);
 $102 = ($101|0)!=(0);
 do {
  if ($102) {
   $103 = $2;
   $104 = (_pn_string_addf($103,12888,$vararg_buffer19)|0);
   $err = $104;
   $105 = $err;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = $err;
    $0 = $107;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $108 = $msg;
   $109 = (($108) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $2;
   $112 = (_pn_inspect($110,$111)|0);
   $err = $112;
   $113 = $err;
   $114 = ($113|0)!=(0);
   if ($114) {
    $115 = $err;
    $0 = $115;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $116 = $2;
   $117 = (_pn_string_addf($116,12784,$vararg_buffer21)|0);
   $err = $117;
   $118 = $err;
   $119 = ($118|0)!=(0);
   if (!($119)) {
    $comma = 1;
    break;
   }
   $120 = $err;
   $0 = $120;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $121 = $msg;
 $122 = (($121) + 20|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (_pn_string_get($123)|0);
 $125 = ($124|0)!=(0|0);
 do {
  if ($125) {
   $126 = $2;
   $127 = (_pn_string_addf($126,12896,$vararg_buffer23)|0);
   $err = $127;
   $128 = $err;
   $129 = ($128|0)!=(0);
   if ($129) {
    $130 = $err;
    $0 = $130;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $131 = $msg;
   $132 = (($131) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $2;
   $135 = (_pn_inspect($133,$134)|0);
   $err = $135;
   $136 = $err;
   $137 = ($136|0)!=(0);
   if ($137) {
    $138 = $err;
    $0 = $138;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $139 = $2;
   $140 = (_pn_string_addf($139,12784,$vararg_buffer25)|0);
   $err = $140;
   $141 = $err;
   $142 = ($141|0)!=(0);
   if (!($142)) {
    $comma = 1;
    break;
   }
   $143 = $err;
   $0 = $143;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $144 = $msg;
 $145 = (($144) + 28|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (_pn_string_get($146)|0);
 $148 = ($147|0)!=(0|0);
 do {
  if ($148) {
   $149 = $2;
   $150 = (_pn_string_addf($149,12912,$vararg_buffer27)|0);
   $err = $150;
   $151 = $err;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $err;
    $0 = $153;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $154 = $msg;
   $155 = (($154) + 28|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $2;
   $158 = (_pn_inspect($156,$157)|0);
   $err = $158;
   $159 = $err;
   $160 = ($159|0)!=(0);
   if ($160) {
    $161 = $err;
    $0 = $161;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $162 = $2;
   $163 = (_pn_string_addf($162,12784,$vararg_buffer29)|0);
   $err = $163;
   $164 = $err;
   $165 = ($164|0)!=(0);
   if (!($165)) {
    $comma = 1;
    break;
   }
   $166 = $err;
   $0 = $166;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $167 = $msg;
 $168 = (($167) + 32|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = (_pn_string_get($169)|0);
 $171 = ($170|0)!=(0|0);
 do {
  if ($171) {
   $172 = $2;
   $173 = (_pn_string_addf($172,12928,$vararg_buffer31)|0);
   $err = $173;
   $174 = $err;
   $175 = ($174|0)!=(0);
   if ($175) {
    $176 = $err;
    $0 = $176;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $177 = $msg;
   $178 = (($177) + 32|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $2;
   $181 = (_pn_inspect($179,$180)|0);
   $err = $181;
   $182 = $err;
   $183 = ($182|0)!=(0);
   if ($183) {
    $184 = $err;
    $0 = $184;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $185 = $2;
   $186 = (_pn_string_addf($185,12784,$vararg_buffer33)|0);
   $err = $186;
   $187 = $err;
   $188 = ($187|0)!=(0);
   if (!($188)) {
    $comma = 1;
    break;
   }
   $189 = $err;
   $0 = $189;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $190 = $msg;
 $191 = (($190) + 36|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (_pn_data_size($192)|0);
 $194 = ($193|0)!=(0);
 do {
  if ($194) {
   $195 = $2;
   $196 = (_pn_string_addf($195,12944,$vararg_buffer35)|0);
   $err = $196;
   $197 = $err;
   $198 = ($197|0)!=(0);
   if ($198) {
    $199 = $err;
    $0 = $199;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $200 = $msg;
   $201 = (($200) + 36|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $2;
   $204 = (_pn_inspect($202,$203)|0);
   $err = $204;
   $205 = $err;
   $206 = ($205|0)!=(0);
   if ($206) {
    $207 = $err;
    $0 = $207;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $208 = $2;
   $209 = (_pn_string_addf($208,12784,$vararg_buffer37)|0);
   $err = $209;
   $210 = $err;
   $211 = ($210|0)!=(0);
   if (!($211)) {
    $comma = 1;
    break;
   }
   $212 = $err;
   $0 = $212;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $213 = $msg;
 $214 = (($213) + 40|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = (_pn_string_get($215)|0);
 $217 = ($216|0)!=(0|0);
 do {
  if ($217) {
   $218 = $2;
   $219 = (_pn_string_addf($218,12960,$vararg_buffer39)|0);
   $err = $219;
   $220 = $err;
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = $err;
    $0 = $222;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $223 = $msg;
   $224 = (($223) + 40|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $2;
   $227 = (_pn_inspect($225,$226)|0);
   $err = $227;
   $228 = $err;
   $229 = ($228|0)!=(0);
   if ($229) {
    $230 = $err;
    $0 = $230;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $231 = $2;
   $232 = (_pn_string_addf($231,12784,$vararg_buffer41)|0);
   $err = $232;
   $233 = $err;
   $234 = ($233|0)!=(0);
   if (!($234)) {
    $comma = 1;
    break;
   }
   $235 = $err;
   $0 = $235;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $236 = $msg;
 $237 = (($236) + 44|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = (_pn_string_get($238)|0);
 $240 = ($239|0)!=(0|0);
 do {
  if ($240) {
   $241 = $2;
   $242 = (_pn_string_addf($241,12976,$vararg_buffer43)|0);
   $err = $242;
   $243 = $err;
   $244 = ($243|0)!=(0);
   if ($244) {
    $245 = $err;
    $0 = $245;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $246 = $msg;
   $247 = (($246) + 44|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $2;
   $250 = (_pn_inspect($248,$249)|0);
   $err = $250;
   $251 = $err;
   $252 = ($251|0)!=(0);
   if ($252) {
    $253 = $err;
    $0 = $253;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $254 = $2;
   $255 = (_pn_string_addf($254,12784,$vararg_buffer45)|0);
   $err = $255;
   $256 = $err;
   $257 = ($256|0)!=(0);
   if (!($257)) {
    $comma = 1;
    break;
   }
   $258 = $err;
   $0 = $258;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $259 = $msg;
 $260 = $259;
 $261 = $260;
 $262 = HEAP32[$261>>2]|0;
 $263 = (($260) + 4)|0;
 $264 = $263;
 $265 = HEAP32[$264>>2]|0;
 $266 = ($262|0)!=(0);
 $267 = ($265|0)!=(0);
 $268 = $266 | $267;
 do {
  if ($268) {
   $269 = $2;
   $270 = $msg;
   $271 = $270;
   $272 = $271;
   $273 = HEAP32[$272>>2]|0;
   $274 = (($271) + 4)|0;
   $275 = $274;
   $276 = HEAP32[$275>>2]|0;
   $277 = $vararg_buffer47;
   $278 = $277;
   HEAP32[$278>>2] = $273;
   $279 = (($277) + 4)|0;
   $280 = $279;
   HEAP32[$280>>2] = $276;
   $281 = (_pn_string_addf($269,13000,$vararg_buffer47)|0);
   $err = $281;
   $282 = $err;
   $283 = ($282|0)!=(0);
   if (!($283)) {
    $comma = 1;
    break;
   }
   $284 = $err;
   $0 = $284;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $285 = $msg;
 $286 = (($285) + 8|0);
 $287 = $286;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = (($287) + 4)|0;
 $291 = $290;
 $292 = HEAP32[$291>>2]|0;
 $293 = ($289|0)!=(0);
 $294 = ($292|0)!=(0);
 $295 = $293 | $294;
 do {
  if ($295) {
   $296 = $2;
   $297 = $msg;
   $298 = (($297) + 8|0);
   $299 = $298;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = (($299) + 4)|0;
   $303 = $302;
   $304 = HEAP32[$303>>2]|0;
   $305 = $vararg_buffer50;
   $306 = $305;
   HEAP32[$306>>2] = $301;
   $307 = (($305) + 4)|0;
   $308 = $307;
   HEAP32[$308>>2] = $304;
   $309 = (_pn_string_addf($296,13024,$vararg_buffer50)|0);
   $err = $309;
   $310 = $err;
   $311 = ($310|0)!=(0);
   if (!($311)) {
    $comma = 1;
    break;
   }
   $312 = $err;
   $0 = $312;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $313 = $msg;
 $314 = (($313) + 48|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = (_pn_string_get($315)|0);
 $317 = ($316|0)!=(0|0);
 do {
  if ($317) {
   $318 = $2;
   $319 = (_pn_string_addf($318,13048,$vararg_buffer53)|0);
   $err = $319;
   $320 = $err;
   $321 = ($320|0)!=(0);
   if ($321) {
    $322 = $err;
    $0 = $322;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $323 = $msg;
   $324 = (($323) + 48|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = $2;
   $327 = (_pn_inspect($325,$326)|0);
   $err = $327;
   $328 = $err;
   $329 = ($328|0)!=(0);
   if ($329) {
    $330 = $err;
    $0 = $330;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $331 = $2;
   $332 = (_pn_string_addf($331,12784,$vararg_buffer55)|0);
   $err = $332;
   $333 = $err;
   $334 = ($333|0)!=(0);
   if (!($334)) {
    $comma = 1;
    break;
   }
   $335 = $err;
   $0 = $335;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $336 = $msg;
 $337 = (($336) + 84|0);
 $338 = HEAP32[$337>>2]|0;
 $339 = ($338|0)!=(0);
 do {
  if ($339) {
   $340 = $2;
   $341 = $msg;
   $342 = (($341) + 84|0);
   $343 = HEAP32[$342>>2]|0;
   HEAP32[$vararg_buffer57>>2] = $343;
   $344 = (_pn_string_addf($340,13064,$vararg_buffer57)|0);
   $err = $344;
   $345 = $err;
   $346 = ($345|0)!=(0);
   if (!($346)) {
    $comma = 1;
    break;
   }
   $347 = $err;
   $0 = $347;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $348 = $msg;
 $349 = (($348) + 52|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = (_pn_string_get($350)|0);
 $352 = ($351|0)!=(0|0);
 do {
  if ($352) {
   $353 = $2;
   $354 = (_pn_string_addf($353,13088,$vararg_buffer60)|0);
   $err = $354;
   $355 = $err;
   $356 = ($355|0)!=(0);
   if ($356) {
    $357 = $err;
    $0 = $357;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $358 = $msg;
   $359 = (($358) + 52|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $2;
   $362 = (_pn_inspect($360,$361)|0);
   $err = $362;
   $363 = $err;
   $364 = ($363|0)!=(0);
   if ($364) {
    $365 = $err;
    $0 = $365;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $366 = $2;
   $367 = (_pn_string_addf($366,12784,$vararg_buffer62)|0);
   $err = $367;
   $368 = $err;
   $369 = ($368|0)!=(0);
   if (!($369)) {
    $comma = 1;
    break;
   }
   $370 = $err;
   $0 = $370;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $371 = $msg;
 $372 = (($371) + 99|0);
 $373 = HEAP8[$372>>0]|0;
 $374 = $373&1;
 do {
  if ($374) {
   $375 = $2;
   $376 = $msg;
   $377 = (($376) + 99|0);
   $378 = HEAP8[$377>>0]|0;
   $379 = $378&1;
   $380 = $379&1;
   HEAP32[$vararg_buffer64>>2] = $380;
   $381 = (_pn_string_addf($375,13112,$vararg_buffer64)|0);
   $err = $381;
   $382 = $err;
   $383 = ($382|0)!=(0);
   if (!($383)) {
    $comma = 1;
    break;
   }
   $384 = $err;
   $0 = $384;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $385 = $msg;
 $386 = (($385) + 60|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = (_pn_data_size($387)|0);
 $389 = ($388|0)!=(0);
 do {
  if ($389) {
   $390 = $2;
   $391 = (_pn_string_addf($390,13128,$vararg_buffer67)|0);
   $err = $391;
   $392 = $err;
   $393 = ($392|0)!=(0);
   if ($393) {
    $394 = $err;
    $0 = $394;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $395 = $msg;
   $396 = (($395) + 60|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = $2;
   $399 = (_pn_inspect($397,$398)|0);
   $err = $399;
   $400 = $err;
   $401 = ($400|0)!=(0);
   if ($401) {
    $402 = $err;
    $0 = $402;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $403 = $2;
   $404 = (_pn_string_addf($403,12784,$vararg_buffer69)|0);
   $err = $404;
   $405 = $err;
   $406 = ($405|0)!=(0);
   if (!($406)) {
    $comma = 1;
    break;
   }
   $407 = $err;
   $0 = $407;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $408 = $msg;
 $409 = (($408) + 64|0);
 $410 = HEAP32[$409>>2]|0;
 $411 = (_pn_data_size($410)|0);
 $412 = ($411|0)!=(0);
 do {
  if ($412) {
   $413 = $2;
   $414 = (_pn_string_addf($413,13144,$vararg_buffer71)|0);
   $err = $414;
   $415 = $err;
   $416 = ($415|0)!=(0);
   if ($416) {
    $417 = $err;
    $0 = $417;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $418 = $msg;
   $419 = (($418) + 64|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = $2;
   $422 = (_pn_inspect($420,$421)|0);
   $err = $422;
   $423 = $err;
   $424 = ($423|0)!=(0);
   if ($424) {
    $425 = $err;
    $0 = $425;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $426 = $2;
   $427 = (_pn_string_addf($426,12784,$vararg_buffer73)|0);
   $err = $427;
   $428 = $err;
   $429 = ($428|0)!=(0);
   if (!($429)) {
    $comma = 1;
    break;
   }
   $430 = $err;
   $0 = $430;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $431 = $msg;
 $432 = (($431) + 68|0);
 $433 = HEAP32[$432>>2]|0;
 $434 = (_pn_data_size($433)|0);
 $435 = ($434|0)!=(0);
 do {
  if ($435) {
   $436 = $2;
   $437 = (_pn_string_addf($436,13160,$vararg_buffer75)|0);
   $err = $437;
   $438 = $err;
   $439 = ($438|0)!=(0);
   if ($439) {
    $440 = $err;
    $0 = $440;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $441 = $msg;
   $442 = (($441) + 68|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = $2;
   $445 = (_pn_inspect($443,$444)|0);
   $err = $445;
   $446 = $err;
   $447 = ($446|0)!=(0);
   if ($447) {
    $448 = $err;
    $0 = $448;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $449 = $2;
   $450 = (_pn_string_addf($449,12784,$vararg_buffer77)|0);
   $err = $450;
   $451 = $err;
   $452 = ($451|0)!=(0);
   if (!($452)) {
    $comma = 1;
    break;
   }
   $453 = $err;
   $0 = $453;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $454 = $msg;
 $455 = (($454) + 72|0);
 $456 = HEAP32[$455>>2]|0;
 $457 = (_pn_data_size($456)|0);
 $458 = ($457|0)!=(0);
 do {
  if ($458) {
   $459 = $2;
   $460 = (_pn_string_addf($459,13176,$vararg_buffer79)|0);
   $err = $460;
   $461 = $err;
   $462 = ($461|0)!=(0);
   if ($462) {
    $463 = $err;
    $0 = $463;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $464 = $msg;
   $465 = (($464) + 72|0);
   $466 = HEAP32[$465>>2]|0;
   $467 = $2;
   $468 = (_pn_inspect($466,$467)|0);
   $err = $468;
   $469 = $err;
   $470 = ($469|0)!=(0);
   if ($470) {
    $471 = $err;
    $0 = $471;
    $489 = $0;
    STACKTOP = sp;return ($489|0);
   }
   $472 = $2;
   $473 = (_pn_string_addf($472,12784,$vararg_buffer81)|0);
   $err = $473;
   $474 = $err;
   $475 = ($474|0)!=(0);
   if (!($475)) {
    $comma = 1;
    break;
   }
   $476 = $err;
   $0 = $476;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $477 = $comma;
 $478 = $477&1;
 do {
  if ($478) {
   $479 = $2;
   $480 = $2;
   $481 = (_pn_string_size($480)|0);
   $482 = (($481) - 2)|0;
   $483 = (_pn_string_resize($479,$482)|0);
   $err1 = $483;
   $484 = $err1;
   $485 = ($484|0)!=(0);
   if (!($485)) {
    break;
   }
   $486 = $err1;
   $0 = $486;
   $489 = $0;
   STACKTOP = sp;return ($489|0);
  }
 } while(0);
 $487 = $2;
 $488 = (_pn_string_addf($487,13184,$vararg_buffer83)|0);
 $0 = $488;
 $489 = $0;
 STACKTOP = sp;return ($489|0);
}
function _pn_message() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_pn_class_new(13192,104)|0);
 $msg = $0;
 $1 = $msg;
 $2 = (($1) + 97|0);
 HEAP8[$2>>0] = 0;
 $3 = $msg;
 $4 = (($3) + 96|0);
 HEAP8[$4>>0] = 4;
 $5 = $msg;
 $6 = (($5) + 88|0);
 HEAP32[$6>>2] = 0;
 $7 = $msg;
 $8 = (($7) + 98|0);
 HEAP8[$8>>0] = 0;
 $9 = $msg;
 $10 = (($9) + 92|0);
 HEAP32[$10>>2] = 0;
 $11 = (_pn_data(1)|0);
 $12 = $msg;
 $13 = (($12) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = (_pn_string(0)|0);
 $15 = $msg;
 $16 = (($15) + 20|0);
 HEAP32[$16>>2] = $14;
 $17 = (_pn_string(0)|0);
 $18 = $msg;
 $19 = (($18) + 24|0);
 HEAP32[$19>>2] = $17;
 $20 = (_pn_string(0)|0);
 $21 = $msg;
 $22 = (($21) + 28|0);
 HEAP32[$22>>2] = $20;
 $23 = (_pn_string(0)|0);
 $24 = $msg;
 $25 = (($24) + 32|0);
 HEAP32[$25>>2] = $23;
 $26 = (_pn_data(1)|0);
 $27 = $msg;
 $28 = (($27) + 36|0);
 HEAP32[$28>>2] = $26;
 $29 = (_pn_string(0)|0);
 $30 = $msg;
 $31 = (($30) + 40|0);
 HEAP32[$31>>2] = $29;
 $32 = (_pn_string(0)|0);
 $33 = $msg;
 $34 = (($33) + 44|0);
 HEAP32[$34>>2] = $32;
 $35 = $msg;
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = $msg;
 $41 = (($40) + 8|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = (_pn_string(0)|0);
 $47 = $msg;
 $48 = (($47) + 48|0);
 HEAP32[$48>>2] = $46;
 $49 = $msg;
 $50 = (($49) + 84|0);
 HEAP32[$50>>2] = 0;
 $51 = (_pn_string(0)|0);
 $52 = $msg;
 $53 = (($52) + 52|0);
 HEAP32[$53>>2] = $51;
 $54 = $msg;
 $55 = (($54) + 99|0);
 HEAP8[$55>>0] = 0;
 $56 = (_pn_data(16)|0);
 $57 = $msg;
 $58 = (($57) + 56|0);
 HEAP32[$58>>2] = $56;
 $59 = (_pn_data(16)|0);
 $60 = $msg;
 $61 = (($60) + 60|0);
 HEAP32[$61>>2] = $59;
 $62 = (_pn_data(16)|0);
 $63 = $msg;
 $64 = (($63) + 64|0);
 HEAP32[$64>>2] = $62;
 $65 = (_pn_data(16)|0);
 $66 = $msg;
 $67 = (($66) + 68|0);
 HEAP32[$67>>2] = $65;
 $68 = (_pn_data(16)|0);
 $69 = $msg;
 $70 = (($69) + 72|0);
 HEAP32[$70>>2] = $68;
 $71 = $msg;
 $72 = (($71) + 76|0);
 HEAP32[$72>>2] = 0;
 $73 = (_pn_error()|0);
 $74 = $msg;
 $75 = (($74) + 80|0);
 HEAP32[$75>>2] = $73;
 $76 = $msg;
 STACKTOP = sp;return ($76|0);
}
function _pn_message_free($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 _pn_free($1);
 STACKTOP = sp;return;
}
function _pn_message_clear($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = (($1) + 97|0);
 HEAP8[$2>>0] = 0;
 $3 = $0;
 $4 = (($3) + 96|0);
 HEAP8[$4>>0] = 4;
 $5 = $0;
 $6 = (($5) + 88|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = (($7) + 98|0);
 HEAP8[$8>>0] = 0;
 $9 = $0;
 $10 = (($9) + 92|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = (($11) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 _pn_data_clear($13);
 $14 = $0;
 $15 = (($14) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 _pn_string_clear($16);
 $17 = $0;
 $18 = (($17) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 _pn_string_clear($19);
 $20 = $0;
 $21 = (($20) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 _pn_string_clear($22);
 $23 = $0;
 $24 = (($23) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 _pn_string_clear($25);
 $26 = $0;
 $27 = (($26) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 _pn_data_clear($28);
 $29 = $0;
 $30 = (($29) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 _pn_string_clear($31);
 $32 = $0;
 $33 = (($32) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 _pn_string_clear($34);
 $35 = $0;
 $36 = $35;
 $37 = $36;
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = $0;
 $41 = (($40) + 8|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = $0;
 $47 = (($46) + 48|0);
 $48 = HEAP32[$47>>2]|0;
 _pn_string_clear($48);
 $49 = $0;
 $50 = (($49) + 84|0);
 HEAP32[$50>>2] = 0;
 $51 = $0;
 $52 = (($51) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 _pn_string_clear($53);
 $54 = $0;
 $55 = (($54) + 99|0);
 HEAP8[$55>>0] = 0;
 $56 = $0;
 $57 = (($56) + 56|0);
 $58 = HEAP32[$57>>2]|0;
 _pn_data_clear($58);
 $59 = $0;
 $60 = (($59) + 60|0);
 $61 = HEAP32[$60>>2]|0;
 _pn_data_clear($61);
 $62 = $0;
 $63 = (($62) + 64|0);
 $64 = HEAP32[$63>>2]|0;
 _pn_data_clear($64);
 $65 = $0;
 $66 = (($65) + 68|0);
 $67 = HEAP32[$66>>2]|0;
 _pn_data_clear($67);
 $68 = $0;
 $69 = (($68) + 72|0);
 $70 = HEAP32[$69>>2]|0;
 _pn_data_clear($70);
 STACKTOP = sp;return;
}
function _pn_message_is_durable($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 97|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&1;
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),411,(13336|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_durable($msg,$durable) {
 $msg = $msg|0;
 $durable = $durable|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $2 = $durable&1;
 $1 = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = $5&1;
  $7 = $0;
  $8 = (($7) + 97|0);
  $9 = $6&1;
  HEAP8[$8>>0] = $9;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((13264|0),(13272|0),416,(13360|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_priority($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 96|0);
  $5 = HEAP8[$4>>0]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((13264|0),(13272|0),424,(13384|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_priority($msg,$priority) {
 $msg = $msg|0;
 $priority = $priority|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $priority;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = $0;
  $6 = (($5) + 96|0);
  HEAP8[$6>>0] = $4;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((13264|0),(13272|0),429,(13408|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_ttl($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 88|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((13264|0),(13272|0),436,(13432|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_ttl($msg,$ttl) {
 $msg = $msg|0;
 $ttl = $ttl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $ttl;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = $0;
  $6 = (($5) + 88|0);
  HEAP32[$6>>2] = $4;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((13264|0),(13272|0),441,(13456|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_is_first_acquirer($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 98|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&1;
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),448,(13480|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_first_acquirer($msg,$first) {
 $msg = $msg|0;
 $first = $first|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $2 = $first&1;
 $1 = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = $5&1;
  $7 = $0;
  $8 = (($7) + 98|0);
  $9 = $6&1;
  HEAP8[$8>>0] = $9;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((13264|0),(13272|0),453,(13512|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_delivery_count($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 92|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((13264|0),(13272|0),460,(13544|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_delivery_count($msg,$count) {
 $msg = $msg|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $count;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = $0;
  $6 = (($5) + 92|0);
  HEAP32[$6>>2] = $4;
  STACKTOP = sp;return 0;
 } else {
  ___assert_fail((13264|0),(13272|0),465,(13576|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_id($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((13264|0),(13272|0),472,(13608|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_address($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),510,(13624|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_address($msg,$address) {
 $msg = $msg|0;
 $address = $address|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $address;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((13264|0),(13272|0),515,(13648|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_subject($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),521,(13672|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_subject($msg,$subject) {
 $msg = $msg|0;
 $subject = $subject|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $subject;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((13264|0),(13272|0),526,(13696|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_reply_to($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),532,(13720|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_reply_to($msg,$reply_to) {
 $msg = $msg|0;
 $reply_to = $reply_to|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $reply_to;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((13264|0),(13272|0),537,(13744|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_correlation_id($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((13264|0),(13272|0),543,(13768|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_content_type($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),560,(13800|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_content_type($msg,$type) {
 $msg = $msg|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $type;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((13264|0),(13272|0),565,(13832|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_content_encoding($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),571,(13864|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_content_encoding($msg,$encoding) {
 $msg = $msg|0;
 $encoding = $encoding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $encoding;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((13264|0),(13272|0),576,(13896|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_get_group_id($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_pn_string_get($5)|0);
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((13264|0),(13272|0),606,(13928|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_set_group_id($msg,$group_id) {
 $msg = $msg|0;
 $group_id = $group_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $group_id;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (_pn_string_set($6,$7)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((13264|0),(13272|0),611,(13952|0));
  // unreachable;
 }
 return (0)|0;
}
function _pn_message_decode($msg,$bytes,$size) {
 $msg = $msg|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $address = 0, $cencoding = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $ctype = 0, $desc = 0, $err = 0, $group_id = 0, $reply_to = 0, $reply_to_group_id = 0, $scanned = 0, $subject = 0;
 var $used = 0, $user_id = 0, $user_id$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer15 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $user_id$byval_copy = sp + 272|0;
 $vararg_buffer47 = sp + 176|0;
 $vararg_buffer45 = sp + 168|0;
 $vararg_buffer43 = sp + 160|0;
 $vararg_buffer41 = sp + 152|0;
 $vararg_buffer39 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $scanned = sp + 280|0;
 $desc = sp;
 $user_id = sp + 240|0;
 $address = sp + 232|0;
 $subject = sp + 224|0;
 $reply_to = sp + 216|0;
 $ctype = sp + 208|0;
 $cencoding = sp + 200|0;
 $group_id = sp + 192|0;
 $reply_to_group_id = sp + 184|0;
 $1 = $msg;
 $2 = $bytes;
 $3 = $size;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((13976|0),(13272|0),640,(14000|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((13976|0),(13272|0),640,(14000|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  ___assert_fail((13976|0),(13272|0),640,(14000|0));
  // unreachable;
 }
 $10 = $1;
 _pn_message_clear($10);
 L10: while(1) {
  $11 = $3;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 60;
   break;
  }
  $13 = $1;
  $14 = (($13) + 56|0);
  $15 = HEAP32[$14>>2]|0;
  _pn_data_clear($15);
  $16 = $1;
  $17 = (($16) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = $3;
  $21 = (_pn_data_decode($18,$19,$20)|0);
  $used = $21;
  $22 = $used;
  $23 = ($22|0)<(0);
  if ($23) {
   label = 8;
   break;
  }
  $34 = $used;
  $35 = $3;
  $36 = (($35) - ($34))|0;
  $3 = $36;
  $37 = $used;
  $38 = $2;
  $39 = (($38) + ($37)|0);
  $2 = $39;
  $40 = $1;
  $41 = (($40) + 56|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $scanned;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $desc;
  $43 = (_pn_data_scan($42,14040,$vararg_buffer1)|0);
  $err = $43;
  $44 = $err;
  $45 = ($44|0)!=(0);
  if ($45) {
   label = 10;
   break;
  }
  $56 = HEAP8[$scanned>>0]|0;
  $57 = $56&1;
  if (!($57)) {
   $58 = $desc;
   $59 = $58;
   HEAP32[$59>>2] = 0;
   $60 = (($58) + 4)|0;
   $61 = $60;
   HEAP32[$61>>2] = 0;
  }
  $62 = $1;
  $63 = (($62) + 56|0);
  $64 = HEAP32[$63>>2]|0;
  _pn_data_rewind($64);
  $65 = $1;
  $66 = (($65) + 56|0);
  $67 = HEAP32[$66>>2]|0;
  (_pn_data_next($67)|0);
  $68 = $1;
  $69 = (($68) + 56|0);
  $70 = HEAP32[$69>>2]|0;
  (_pn_data_enter($70)|0);
  $71 = $1;
  $72 = (($71) + 56|0);
  $73 = HEAP32[$72>>2]|0;
  (_pn_data_next($73)|0);
  $74 = $desc;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  switch ($76|0) {
  case 114:  {
   $cond6 = ($79|0)==(0);
   if ($cond6) {
    $248 = $1;
    $249 = (($248) + 56|0);
    $250 = HEAP32[$249>>2]|0;
    _pn_data_narrow($250);
    $251 = $1;
    $252 = (($251) + 64|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = $1;
    $255 = (($254) + 56|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = (_pn_data_copy($253,$256)|0);
    $err = $257;
    $258 = $err;
    $259 = ($258|0)!=(0);
    if ($259) {
     label = 47;
     break L10;
    }
   } else {
    label = 56;
   }
   break;
  }
  case 112:  {
   $cond8 = ($79|0)==(0);
   if ($cond8) {
    $80 = $1;
    $81 = (($80) + 56|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $1;
    $84 = (($83) + 97|0);
    $85 = $1;
    $86 = (($85) + 96|0);
    $87 = $1;
    $88 = (($87) + 88|0);
    $89 = $1;
    $90 = (($89) + 98|0);
    $91 = $1;
    $92 = (($91) + 92|0);
    HEAP32[$vararg_buffer8>>2] = $84;
    $vararg_ptr11 = (($vararg_buffer8) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $86;
    $vararg_ptr12 = (($vararg_buffer8) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $88;
    $vararg_ptr13 = (($vararg_buffer8) + 12|0);
    HEAP32[$vararg_ptr13>>2] = $90;
    $vararg_ptr14 = (($vararg_buffer8) + 16|0);
    HEAP32[$vararg_ptr14>>2] = $92;
    (_pn_data_scan($82,14048,$vararg_buffer8)|0);
   } else {
    label = 56;
   }
   break;
  }
  case 116:  {
   $cond4 = ($79|0)==(0);
   if ($cond4) {
    $261 = $1;
    $262 = (($261) + 56|0);
    $263 = HEAP32[$262>>2]|0;
    _pn_data_narrow($263);
    $264 = $1;
    $265 = (($264) + 68|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $1;
    $268 = (($267) + 56|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (_pn_data_copy($266,$269)|0);
    $err = $270;
    $271 = $err;
    $272 = ($271|0)!=(0);
    if ($272) {
     label = 50;
     break L10;
    }
   } else {
    label = 56;
   }
   break;
  }
  case 119:  {
   $cond1 = ($79|0)==(0);
   if ($cond1) {
    label = 52;
   } else {
    label = 56;
   }
   break;
  }
  case 117:  {
   $cond3 = ($79|0)==(0);
   if ($cond3) {
    label = 52;
   } else {
    label = 56;
   }
   break;
  }
  case 113:  {
   $cond7 = ($79|0)==(0);
   if ($cond7) {
    $235 = $1;
    $236 = (($235) + 56|0);
    $237 = HEAP32[$236>>2]|0;
    _pn_data_narrow($237);
    $238 = $1;
    $239 = (($238) + 60|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $1;
    $242 = (($241) + 56|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (_pn_data_copy($240,$243)|0);
    $err = $244;
    $245 = $err;
    $246 = ($245|0)!=(0);
    if ($246) {
     label = 44;
     break L10;
    }
   } else {
    label = 56;
   }
   break;
  }
  case 118:  {
   $cond2 = ($79|0)==(0);
   if ($cond2) {
    label = 52;
   } else {
    label = 56;
   }
   break;
  }
  case 115:  {
   $cond5 = ($79|0)==(0);
   if ($cond5) {
    $93 = $1;
    $94 = (($93) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    _pn_data_clear($95);
    $96 = $1;
    $97 = (($96) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    _pn_data_clear($98);
    $99 = $1;
    $100 = (($99) + 56|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $1;
    $103 = (($102) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $1;
    $106 = (($105) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = $1;
    $109 = $1;
    $110 = (($109) + 8|0);
    $111 = $1;
    $112 = (($111) + 84|0);
    HEAP32[$vararg_buffer15>>2] = $104;
    $vararg_ptr18 = (($vararg_buffer15) + 4|0);
    HEAP32[$vararg_ptr18>>2] = $user_id;
    $vararg_ptr19 = (($vararg_buffer15) + 8|0);
    HEAP32[$vararg_ptr19>>2] = $address;
    $vararg_ptr20 = (($vararg_buffer15) + 12|0);
    HEAP32[$vararg_ptr20>>2] = $subject;
    $vararg_ptr21 = (($vararg_buffer15) + 16|0);
    HEAP32[$vararg_ptr21>>2] = $reply_to;
    $vararg_ptr22 = (($vararg_buffer15) + 20|0);
    HEAP32[$vararg_ptr22>>2] = $107;
    $vararg_ptr23 = (($vararg_buffer15) + 24|0);
    HEAP32[$vararg_ptr23>>2] = $ctype;
    $vararg_ptr24 = (($vararg_buffer15) + 28|0);
    HEAP32[$vararg_ptr24>>2] = $cencoding;
    $vararg_ptr25 = (($vararg_buffer15) + 32|0);
    HEAP32[$vararg_ptr25>>2] = $108;
    $vararg_ptr26 = (($vararg_buffer15) + 36|0);
    HEAP32[$vararg_ptr26>>2] = $110;
    $vararg_ptr27 = (($vararg_buffer15) + 40|0);
    HEAP32[$vararg_ptr27>>2] = $group_id;
    $vararg_ptr28 = (($vararg_buffer15) + 44|0);
    HEAP32[$vararg_ptr28>>2] = $112;
    $vararg_ptr29 = (($vararg_buffer15) + 48|0);
    HEAP32[$vararg_ptr29>>2] = $reply_to_group_id;
    $113 = (_pn_data_scan($101,14064,$vararg_buffer15)|0);
    $err = $113;
    $114 = $err;
    $115 = ($114|0)!=(0);
    if ($115) {
     label = 25;
     break L10;
    }
    $126 = $1;
    $127 = (($126) + 20|0);
    $128 = HEAP32[$127>>2]|0;
    ;HEAP32[$user_id$byval_copy+0>>2]=HEAP32[$user_id+0>>2]|0;HEAP32[$user_id$byval_copy+4>>2]=HEAP32[$user_id+4>>2]|0;
    $129 = (_pn_string_set_bytes($128,$user_id$byval_copy)|0);
    $err = $129;
    $130 = $err;
    $131 = ($130|0)!=(0);
    if ($131) {
     label = 27;
     break L10;
    }
    $137 = $1;
    $138 = (($137) + 24|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (($address) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = HEAP32[$address>>2]|0;
    $143 = (_pn_string_setn($139,$141,$142)|0);
    $err = $143;
    $144 = $err;
    $145 = ($144|0)!=(0);
    if ($145) {
     label = 29;
     break L10;
    }
    $151 = $1;
    $152 = (($151) + 28|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($subject) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = HEAP32[$subject>>2]|0;
    $157 = (_pn_string_setn($153,$155,$156)|0);
    $err = $157;
    $158 = $err;
    $159 = ($158|0)!=(0);
    if ($159) {
     label = 31;
     break L10;
    }
    $165 = $1;
    $166 = (($165) + 32|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($reply_to) + 4|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = HEAP32[$reply_to>>2]|0;
    $171 = (_pn_string_setn($167,$169,$170)|0);
    $err = $171;
    $172 = $err;
    $173 = ($172|0)!=(0);
    if ($173) {
     label = 33;
     break L10;
    }
    $179 = $1;
    $180 = (($179) + 40|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($ctype) + 4|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = HEAP32[$ctype>>2]|0;
    $185 = (_pn_string_setn($181,$183,$184)|0);
    $err = $185;
    $186 = $err;
    $187 = ($186|0)!=(0);
    if ($187) {
     label = 35;
     break L10;
    }
    $193 = $1;
    $194 = (($193) + 44|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = (($cencoding) + 4|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = HEAP32[$cencoding>>2]|0;
    $199 = (_pn_string_setn($195,$197,$198)|0);
    $err = $199;
    $200 = $err;
    $201 = ($200|0)!=(0);
    if ($201) {
     label = 37;
     break L10;
    }
    $207 = $1;
    $208 = (($207) + 48|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (($group_id) + 4|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = HEAP32[$group_id>>2]|0;
    $213 = (_pn_string_setn($209,$211,$212)|0);
    $err = $213;
    $214 = $err;
    $215 = ($214|0)!=(0);
    if ($215) {
     label = 39;
     break L10;
    }
    $221 = $1;
    $222 = (($221) + 52|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($reply_to_group_id) + 4|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = HEAP32[$reply_to_group_id>>2]|0;
    $227 = (_pn_string_setn($223,$225,$226)|0);
    $err = $227;
    $228 = $err;
    $229 = ($228|0)!=(0);
    if ($229) {
     label = 41;
     break L10;
    }
   } else {
    label = 56;
   }
   break;
  }
  case 120:  {
   $cond = ($79|0)==(0);
   if ($cond) {
   } else {
    label = 56;
   }
   break;
  }
  default: {
   label = 56;
  }
  }
  if ((label|0) == 52) {
   label = 0;
   $274 = $1;
   $275 = (($274) + 56|0);
   $276 = HEAP32[$275>>2]|0;
   _pn_data_narrow($276);
   $277 = $1;
   $278 = (($277) + 72|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $1;
   $281 = (($280) + 56|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (_pn_data_copy($279,$282)|0);
   $err = $283;
   $284 = $err;
   $285 = ($284|0)!=(0);
   if ($285) {
    label = 53;
    break;
   }
  }
  else if ((label|0) == 56) {
   label = 0;
   $287 = $1;
   $288 = (($287) + 72|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $1;
   $291 = (($290) + 56|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (_pn_data_copy($289,$292)|0);
   $err = $293;
   $294 = $err;
   $295 = ($294|0)!=(0);
   if ($295) {
    label = 57;
    break;
   }
  }
 }
 switch (label|0) {
  case 8: {
   $24 = $1;
   $25 = (($24) + 80|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $used;
   $28 = $1;
   $29 = (($28) + 56|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_pn_data_error($30)|0);
   $32 = (_pn_error_text($31)|0);
   HEAP32[$vararg_buffer>>2] = $32;
   $33 = (_pn_error_format($26,$27,14024,$vararg_buffer)|0);
   $0 = $33;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 10: {
   $46 = $1;
   $47 = (($46) + 80|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $err;
   $50 = $1;
   $51 = (($50) + 56|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (_pn_data_error($52)|0);
   $54 = (_pn_error_text($53)|0);
   HEAP32[$vararg_buffer5>>2] = $54;
   $55 = (_pn_error_format($48,$49,14024,$vararg_buffer5)|0);
   $0 = $55;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 25: {
   $116 = $1;
   $117 = (($116) + 80|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $err;
   $120 = $1;
   $121 = (($120) + 56|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (_pn_data_error($122)|0);
   $124 = (_pn_error_text($123)|0);
   HEAP32[$vararg_buffer30>>2] = $124;
   $125 = (_pn_error_format($118,$119,14024,$vararg_buffer30)|0);
   $0 = $125;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 27: {
   $132 = $1;
   $133 = (($132) + 80|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $err;
   $136 = (_pn_error_format($134,$135,14088,$vararg_buffer33)|0);
   $0 = $136;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 29: {
   $146 = $1;
   $147 = (($146) + 80|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $err;
   $150 = (_pn_error_format($148,$149,14112,$vararg_buffer35)|0);
   $0 = $150;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 31: {
   $160 = $1;
   $161 = (($160) + 80|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $err;
   $164 = (_pn_error_format($162,$163,14136,$vararg_buffer37)|0);
   $0 = $164;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 33: {
   $174 = $1;
   $175 = (($174) + 80|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $err;
   $178 = (_pn_error_format($176,$177,14160,$vararg_buffer39)|0);
   $0 = $178;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 35: {
   $188 = $1;
   $189 = (($188) + 80|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $err;
   $192 = (_pn_error_format($190,$191,14184,$vararg_buffer41)|0);
   $0 = $192;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 37: {
   $202 = $1;
   $203 = (($202) + 80|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $err;
   $206 = (_pn_error_format($204,$205,14216,$vararg_buffer43)|0);
   $0 = $206;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 39: {
   $216 = $1;
   $217 = (($216) + 80|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $err;
   $220 = (_pn_error_format($218,$219,14248,$vararg_buffer45)|0);
   $0 = $220;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 41: {
   $230 = $1;
   $231 = (($230) + 80|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $err;
   $234 = (_pn_error_format($232,$233,14272,$vararg_buffer47)|0);
   $0 = $234;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 44: {
   $247 = $err;
   $0 = $247;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 47: {
   $260 = $err;
   $0 = $260;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 50: {
   $273 = $err;
   $0 = $273;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 53: {
   $286 = $err;
   $0 = $286;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 57: {
   $296 = $err;
   $0 = $296;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
  case 60: {
   $297 = $1;
   $298 = (($297) + 56|0);
   $299 = HEAP32[$298>>2]|0;
   _pn_data_clear($299);
   $0 = 0;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
   break;
  }
 }
 return (0)|0;
}
function _pn_message_encode($msg,$bytes,$size) {
 $msg = $msg|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encoded = 0, $remaining = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $msg;
 $2 = $bytes;
 $3 = $size;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $3;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $3;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(0);
    if ($12) {
     $13 = $1;
     $14 = (($13) + 56|0);
     $15 = HEAP32[$14>>2]|0;
     _pn_data_clear($15);
     $16 = $1;
     $17 = $1;
     $18 = (($17) + 56|0);
     $19 = HEAP32[$18>>2]|0;
     (_pn_message_data($16,$19)|0);
     $20 = $3;
     $21 = HEAP32[$20>>2]|0;
     $remaining = $21;
     $22 = $1;
     $23 = (($22) + 56|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $2;
     $26 = $remaining;
     $27 = (_pn_data_encode($24,$25,$26)|0);
     $encoded = $27;
     $28 = $encoded;
     $29 = ($28|0)<(0);
     if (!($29)) {
      $43 = $encoded;
      $44 = $2;
      $45 = (($44) + ($43)|0);
      $2 = $45;
      $46 = $encoded;
      $47 = $remaining;
      $48 = (($47) - ($46))|0;
      $remaining = $48;
      $49 = $remaining;
      $50 = $3;
      $51 = HEAP32[$50>>2]|0;
      $52 = (($51) - ($49))|0;
      HEAP32[$50>>2] = $52;
      $53 = $1;
      $54 = (($53) + 56|0);
      $55 = HEAP32[$54>>2]|0;
      _pn_data_clear($55);
      $0 = 0;
      $56 = $0;
      STACKTOP = sp;return ($56|0);
     }
     $30 = $encoded;
     $31 = ($30|0)==(-3);
     if ($31) {
      $32 = $encoded;
      $0 = $32;
      $56 = $0;
      STACKTOP = sp;return ($56|0);
     } else {
      $33 = $1;
      $34 = (($33) + 80|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $encoded;
      $37 = $1;
      $38 = (($37) + 56|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (_pn_data_error($39)|0);
      $41 = (_pn_error_text($40)|0);
      HEAP32[$vararg_buffer>>2] = $41;
      $42 = (_pn_error_format($35,$36,14024,$vararg_buffer)|0);
      $0 = $42;
      $56 = $0;
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  }
 }
 $0 = -6;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _pn_message_data($msg,$data) {
 $msg = $msg|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $body_type = 0, $err = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer36 = sp + 136|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer = sp;
 $1 = $msg;
 $2 = $data;
 $3 = $2;
 _pn_data_clear($3);
 $4 = $2;
 $5 = $1;
 $6 = (($5) + 97|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 $9 = $8&1;
 $10 = $1;
 $11 = (($10) + 96|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $1;
 $15 = (($14) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($17) + 88|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = (($20) + 98|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 $24 = $23&1;
 $25 = $1;
 $26 = (($25) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $vararg_buffer;
 $29 = $28;
 HEAP32[$29>>2] = 112;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = 0;
 $vararg_ptr1 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr1>>2] = $9;
 $vararg_ptr2 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr2>>2] = $13;
 $vararg_ptr3 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr4>>2] = $19;
 $vararg_ptr5 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr5>>2] = $24;
 $vararg_ptr6 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr6>>2] = $27;
 $32 = (_pn_data_fill($4,14304,$vararg_buffer)|0);
 $err = $32;
 $33 = $err;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $1;
  $36 = (($35) + 80|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $err;
  $39 = $2;
  $40 = (_pn_data_error($39)|0);
  $41 = (_pn_error_text($40)|0);
  HEAP32[$vararg_buffer7>>2] = $41;
  $42 = (_pn_error_format($37,$38,14024,$vararg_buffer7)|0);
  $0 = $42;
  $240 = $0;
  STACKTOP = sp;return ($240|0);
 }
 $43 = $1;
 $44 = (($43) + 60|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_pn_data_size($45)|0);
 $47 = ($46|0)!=(0);
 do {
  if ($47) {
   $48 = $2;
   (_pn_data_put_described($48)|0);
   $49 = $2;
   (_pn_data_enter($49)|0);
   $50 = $2;
   (_pn_data_put_ulong($50,113,0)|0);
   $51 = $1;
   $52 = (($51) + 60|0);
   $53 = HEAP32[$52>>2]|0;
   _pn_data_rewind($53);
   $54 = $2;
   $55 = $1;
   $56 = (($55) + 60|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_pn_data_append($54,$57)|0);
   $err = $58;
   $59 = $err;
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $69 = $2;
    (_pn_data_exit($69)|0);
    break;
   }
   $61 = $1;
   $62 = (($61) + 80|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $err;
   $65 = $2;
   $66 = (_pn_data_error($65)|0);
   $67 = (_pn_error_text($66)|0);
   HEAP32[$vararg_buffer10>>2] = $67;
   $68 = (_pn_error_format($63,$64,14024,$vararg_buffer10)|0);
   $0 = $68;
   $240 = $0;
   STACKTOP = sp;return ($240|0);
  }
 } while(0);
 $70 = $1;
 $71 = (($70) + 64|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (_pn_data_size($72)|0);
 $74 = ($73|0)!=(0);
 do {
  if ($74) {
   $75 = $2;
   (_pn_data_put_described($75)|0);
   $76 = $2;
   (_pn_data_enter($76)|0);
   $77 = $2;
   (_pn_data_put_ulong($77,114,0)|0);
   $78 = $1;
   $79 = (($78) + 64|0);
   $80 = HEAP32[$79>>2]|0;
   _pn_data_rewind($80);
   $81 = $2;
   $82 = $1;
   $83 = (($82) + 64|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_pn_data_append($81,$84)|0);
   $err = $85;
   $86 = $err;
   $87 = ($86|0)!=(0);
   if (!($87)) {
    $96 = $2;
    (_pn_data_exit($96)|0);
    break;
   }
   $88 = $1;
   $89 = (($88) + 80|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $err;
   $92 = $2;
   $93 = (_pn_data_error($92)|0);
   $94 = (_pn_error_text($93)|0);
   HEAP32[$vararg_buffer13>>2] = $94;
   $95 = (_pn_error_format($90,$91,14024,$vararg_buffer13)|0);
   $0 = $95;
   $240 = $0;
   STACKTOP = sp;return ($240|0);
  }
 } while(0);
 $97 = $2;
 $98 = $1;
 $99 = (($98) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $1;
 $102 = (($101) + 20|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (_pn_string_size($103)|0);
 $105 = $1;
 $106 = (($105) + 20|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (_pn_string_get($107)|0);
 $109 = $1;
 $110 = (($109) + 24|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (_pn_string_get($111)|0);
 $113 = $1;
 $114 = (($113) + 28|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (_pn_string_get($115)|0);
 $117 = $1;
 $118 = (($117) + 32|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (_pn_string_get($119)|0);
 $121 = $1;
 $122 = (($121) + 36|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $1;
 $125 = (($124) + 40|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (_pn_string_get($126)|0);
 $128 = $1;
 $129 = (($128) + 44|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (_pn_string_get($130)|0);
 $132 = $1;
 $133 = $132;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = $1;
 $140 = (($139) + 8|0);
 $141 = $140;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = (($141) + 4)|0;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = $1;
 $148 = (($147) + 48|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (_pn_string_get($149)|0);
 $151 = $1;
 $152 = (($151) + 84|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $1;
 $155 = (($154) + 52|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (_pn_string_get($156)|0);
 $158 = $vararg_buffer16;
 $159 = $158;
 HEAP32[$159>>2] = 115;
 $160 = (($158) + 4)|0;
 $161 = $160;
 HEAP32[$161>>2] = 0;
 $vararg_ptr19 = (($vararg_buffer16) + 8|0);
 HEAP32[$vararg_ptr19>>2] = $100;
 $vararg_ptr20 = (($vararg_buffer16) + 12|0);
 HEAP32[$vararg_ptr20>>2] = $104;
 $vararg_ptr21 = (($vararg_buffer16) + 16|0);
 HEAP32[$vararg_ptr21>>2] = $108;
 $vararg_ptr22 = (($vararg_buffer16) + 20|0);
 HEAP32[$vararg_ptr22>>2] = $112;
 $vararg_ptr23 = (($vararg_buffer16) + 24|0);
 HEAP32[$vararg_ptr23>>2] = $116;
 $vararg_ptr24 = (($vararg_buffer16) + 28|0);
 HEAP32[$vararg_ptr24>>2] = $120;
 $vararg_ptr25 = (($vararg_buffer16) + 32|0);
 HEAP32[$vararg_ptr25>>2] = $123;
 $vararg_ptr26 = (($vararg_buffer16) + 36|0);
 HEAP32[$vararg_ptr26>>2] = $127;
 $vararg_ptr27 = (($vararg_buffer16) + 40|0);
 HEAP32[$vararg_ptr27>>2] = $131;
 $vararg_ptr28 = (($vararg_buffer16) + 44|0);
 $162 = $vararg_ptr28;
 $163 = $162;
 HEAP32[$163>>2] = $135;
 $164 = (($162) + 4)|0;
 $165 = $164;
 HEAP32[$165>>2] = $138;
 $vararg_ptr29 = (($vararg_buffer16) + 52|0);
 $166 = $vararg_ptr29;
 $167 = $166;
 HEAP32[$167>>2] = $143;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP32[$169>>2] = $146;
 $vararg_ptr30 = (($vararg_buffer16) + 60|0);
 HEAP32[$vararg_ptr30>>2] = $150;
 $vararg_ptr31 = (($vararg_buffer16) + 64|0);
 HEAP32[$vararg_ptr31>>2] = $153;
 $vararg_ptr32 = (($vararg_buffer16) + 68|0);
 HEAP32[$vararg_ptr32>>2] = $157;
 $170 = (_pn_data_fill($97,14320,$vararg_buffer16)|0);
 $err = $170;
 $171 = $err;
 $172 = ($171|0)!=(0);
 if ($172) {
  $173 = $1;
  $174 = (($173) + 80|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $err;
  $177 = $2;
  $178 = (_pn_data_error($177)|0);
  $179 = (_pn_error_text($178)|0);
  HEAP32[$vararg_buffer33>>2] = $179;
  $180 = (_pn_error_format($175,$176,14024,$vararg_buffer33)|0);
  $0 = $180;
  $240 = $0;
  STACKTOP = sp;return ($240|0);
 }
 $181 = $1;
 $182 = (($181) + 68|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (_pn_data_size($183)|0);
 $185 = ($184|0)!=(0);
 do {
  if ($185) {
   $186 = $2;
   (_pn_data_put_described($186)|0);
   $187 = $2;
   (_pn_data_enter($187)|0);
   $188 = $2;
   (_pn_data_put_ulong($188,116,0)|0);
   $189 = $1;
   $190 = (($189) + 68|0);
   $191 = HEAP32[$190>>2]|0;
   _pn_data_rewind($191);
   $192 = $2;
   $193 = $1;
   $194 = (($193) + 68|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (_pn_data_append($192,$195)|0);
   $err = $196;
   $197 = $err;
   $198 = ($197|0)!=(0);
   if (!($198)) {
    $206 = $2;
    (_pn_data_exit($206)|0);
    break;
   }
   $199 = $1;
   $200 = (($199) + 80|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $err;
   $203 = $2;
   $204 = (_pn_data_error($203)|0);
   HEAP32[$vararg_buffer36>>2] = $204;
   $205 = (_pn_error_format($201,$202,14024,$vararg_buffer36)|0);
   $0 = $205;
   $240 = $0;
   STACKTOP = sp;return ($240|0);
  }
 } while(0);
 $207 = $1;
 $208 = (($207) + 72|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = (_pn_data_size($209)|0);
 $211 = ($210|0)!=(0);
 if ($211) {
  $212 = $1;
  $213 = (($212) + 72|0);
  $214 = HEAP32[$213>>2]|0;
  _pn_data_rewind($214);
  $215 = $1;
  $216 = (($215) + 72|0);
  $217 = HEAP32[$216>>2]|0;
  (_pn_data_next($217)|0);
  $218 = $1;
  $219 = (($218) + 72|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (_pn_data_type($220)|0);
  $body_type = $221;
  $222 = $1;
  $223 = (($222) + 72|0);
  $224 = HEAP32[$223>>2]|0;
  _pn_data_rewind($224);
  $225 = $2;
  (_pn_data_put_described($225)|0);
  $226 = $2;
  (_pn_data_enter($226)|0);
  $227 = $1;
  $228 = (($227) + 99|0);
  $229 = HEAP8[$228>>0]|0;
  $230 = $229&1;
  if ($230) {
   $231 = $body_type;
   if ((($231|0) == 19)) {
    $232 = $2;
    (_pn_data_put_ulong($232,117,0)|0);
   } else if ((($231|0) == 24)) {
    $233 = $2;
    (_pn_data_put_ulong($233,118,0)|0);
   } else {
    $234 = $2;
    (_pn_data_put_ulong($234,119,0)|0);
   }
  } else {
   $235 = $2;
   (_pn_data_put_ulong($235,119,0)|0);
  }
  $236 = $2;
  $237 = $1;
  $238 = (($237) + 72|0);
  $239 = HEAP32[$238>>2]|0;
  (_pn_data_append($236,$239)|0);
 }
 $0 = 0;
 $240 = $0;
 STACKTOP = sp;return ($240|0);
}
function _pn_message_body($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 72|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = 0;
 }
 STACKTOP = sp;return ($6|0);
}
function _pni_included_mech($included_mech_list,$s) {
 $included_mech_list = $included_mech_list|0;
 $s = $s|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $end_list = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $included_mech_list;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $$expand_i1_val = 1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 $4 = $1;
 $5 = $1;
 $6 = (_strlen(($5|0))|0);
 $7 = (($4) + ($6)|0);
 $end_list = $7;
 $8 = HEAP32[$s>>2]|0;
 $len = $8;
 $9 = $1;
 $c = $9;
 while(1) {
  $10 = $c;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 15;
   break;
  }
  $12 = $len;
  $13 = $end_list;
  $14 = $c;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = ($12|0)>($17|0);
  if ($18) {
   label = 6;
   break;
  }
  $19 = $c;
  $20 = (($s) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $len;
  $23 = (_pn_strncasecmp($19,$21,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = $len;
   $26 = $c;
   $27 = (($26) + ($25)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)==(32);
   if ($30) {
    label = 10;
    break;
   }
   $31 = $len;
   $32 = $c;
   $33 = (($32) + ($31)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)==(0);
   if ($36) {
    label = 10;
    break;
   }
  }
  $37 = $c;
  $38 = (_strchr($37,32)|0);
  $c = $38;
  $39 = $c;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $c;
   $42 = (($41) + 1|0);
   $43 = $42;
  } else {
   $43 = 0;
  }
  $c = $43;
 }
 if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 10) {
  $$expand_i1_val4 = 1;
  $0 = $$expand_i1_val4;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 15) {
  $$expand_i1_val6 = 0;
  $0 = $$expand_i1_val6;
  $$pre_trunc = $0;
  $44 = $$pre_trunc&1;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _pni_split_mechs($mechlist,$included_mechs,$mechs,$count) {
 $mechlist = $mechlist|0;
 $included_mechs = $included_mechs|0;
 $mechs = $mechs|0;
 $count = $count|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $start = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $4 = sp + 8|0;
 $5 = sp;
 $0 = $mechlist;
 $1 = $included_mechs;
 $2 = $mechs;
 $3 = $count;
 $6 = $0;
 $start = $6;
 $7 = $start;
 $end = $7;
 while(1) {
  $8 = $end;
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $end;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(32);
  if ($14) {
   $15 = $start;
   $16 = $end;
   $17 = ($15|0)!=($16|0);
   if ($17) {
    $18 = $end;
    HEAP8[$18>>0] = 0;
    $19 = $1;
    $20 = $end;
    $21 = $start;
    $22 = $20;
    $23 = $21;
    $24 = (($22) - ($23))|0;
    $25 = $start;
    _pn_bytes($4,$24,$25);
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
    $26 = (_pni_included_mech($19,$$byval_copy)|0);
    if ($26) {
     $27 = $start;
     $28 = $3;
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + 1)|0;
     HEAP32[$28>>2] = $30;
     $31 = $2;
     $32 = (($31) + ($29<<2)|0);
     HEAP32[$32>>2] = $27;
    }
   }
   $33 = $end;
   $34 = (($33) + 1|0);
   $end = $34;
   $35 = $end;
   $start = $35;
  } else {
   $36 = $end;
   $37 = (($36) + 1|0);
   $end = $37;
  }
 }
 $38 = $start;
 $39 = $end;
 $40 = ($38|0)!=($39|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $1;
 $42 = $end;
 $43 = $start;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = $start;
 _pn_bytes($5,$46,$47);
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;
 $48 = (_pni_included_mech($41,$$byval_copy1)|0);
 if ($48) {
  $49 = $start;
  $50 = $3;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 1)|0;
  HEAP32[$50>>2] = $52;
  $53 = $2;
  $54 = (($53) + ($51<<2)|0);
  HEAP32[$54>>2] = $49;
 }
 STACKTOP = sp;return;
}
function _pni_sasl_set_desired_state($transport,$desired_state) {
 $transport = $transport|0;
 $desired_state = $desired_state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sasl = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $desired_state;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $sasl = $4;
 $5 = $sasl;
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $10 = $0;
  $11 = $1;
  $12 = $sasl;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _pn_transport_logf($10,14408,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $15 = $sasl;
 $16 = (($15) + 52|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  $19 = $1;
  $20 = (_pni_sasl_is_client_state($19)|0);
  if ($20) {
   label = 6;
  } else {
   $21 = $0;
   $22 = $1;
   HEAP32[$vararg_buffer2>>2] = $22;
   _pn_transport_logf($21,14488,$vararg_buffer2);
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $23 = $sasl;
  $24 = (($23) + 52|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&1;
  if ($26) {
   label = 9;
  } else {
   $27 = $1;
   $28 = (_pni_sasl_is_server_state($27)|0);
   if ($28) {
    label = 9;
   } else {
    $29 = $0;
    $30 = $1;
    HEAP32[$vararg_buffer5>>2] = $30;
    _pn_transport_logf($29,14544,$vararg_buffer5);
   }
  }
  if ((label|0) == 9) {
   $31 = $sasl;
   $32 = (($31) + 48|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = ($33|0)==($34|0);
   if ($35) {
    $36 = $1;
    $37 = ($36|0)==(3);
    if ($37) {
     $38 = $sasl;
     $39 = (($38) + 48|0);
     HEAP32[$39>>2] = 1;
    }
   }
   $40 = $sasl;
   $41 = (($40) + 48|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = ($42|0)==($43|0);
   if ($44) {
    $45 = $1;
    $46 = ($45|0)==(4);
    if ($46) {
     $47 = $sasl;
     $48 = (($47) + 48|0);
     HEAP32[$48>>2] = 2;
    }
   }
   $49 = $1;
   $50 = $sasl;
   $51 = (($50) + 44|0);
   HEAP32[$51>>2] = $49;
   $52 = $0;
   _pni_emit($52);
  }
 }
 STACKTOP = sp;return;
}
function _pn_sasl($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sasl = 0, $sasl_config_path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $5 = (_malloc(56)|0);
 $sasl = $5;
 $6 = (_getenv((14600|0))|0);
 $sasl_config_path = $6;
 $7 = $sasl;
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 245|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 $12 = $11 ^ 1;
 $13 = $sasl;
 $14 = (($13) + 52|0);
 $15 = $12&1;
 HEAP8[$14>>0] = $15;
 $16 = $sasl;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = $sasl;
 $19 = (($18) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = $sasl;
 $21 = (($20) + 12|0);
 HEAP32[$21>>2] = 0;
 $22 = $sasl;
 $23 = (($22) + 16|0);
 HEAP32[$23>>2] = 0;
 $24 = $sasl;
 $25 = (($24) + 52|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 $28 = $27 ? 14624 : 14640;
 $29 = $sasl;
 $30 = (($29) + 20|0);
 HEAP32[$30>>2] = $28;
 $31 = $sasl_config_path;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $sasl_config_path;
  $34 = (_pn_strdup($33)|0);
  $37 = $34;
 } else {
  $37 = 0;
 }
 $35 = $sasl;
 $36 = (($35) + 24|0);
 HEAP32[$36>>2] = $37;
 $38 = $sasl;
 $39 = (($38) + 28|0);
 HEAP32[$39>>2] = 0;
 $40 = $sasl;
 $41 = (($40) + 32|0);
 HEAP32[$41>>2] = -1;
 $42 = $sasl;
 HEAP32[$42>>2] = 0;
 $43 = $sasl;
 $44 = (($43) + 36|0);
 HEAP32[$44>>2] = 0;
 $45 = $sasl;
 $46 = (($45) + 36|0);
 $47 = (($46) + 4|0);
 HEAP32[$47>>2] = 0;
 $48 = $sasl;
 $49 = (($48) + 44|0);
 HEAP32[$49>>2] = 0;
 $50 = $sasl;
 $51 = (($50) + 48|0);
 HEAP32[$51>>2] = 0;
 $52 = $sasl;
 $53 = (($52) + 53|0);
 HEAP8[$53>>0] = 0;
 $54 = $sasl;
 $55 = (($54) + 54|0);
 HEAP8[$55>>0] = 0;
 $56 = $sasl;
 $57 = $0;
 $58 = (($57) + 4|0);
 HEAP32[$58>>2] = $56;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _pni_sasl_set_remote_hostname($transport,$fqdn) {
 $transport = $transport|0;
 $fqdn = $fqdn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $sasl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $fqdn;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $sasl = $4;
 $5 = $1;
 $6 = $sasl;
 $7 = (($6) + 28|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _pni_sasl_set_user_password($transport,$user,$password) {
 $transport = $transport|0;
 $user = $user|0;
 $password = $password|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sasl = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $user;
 $2 = $password;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $sasl = $5;
 $6 = $1;
 $7 = $sasl;
 $8 = (($7) + 12|0);
 HEAP32[$8>>2] = $6;
 $9 = $sasl;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 $12 = $2;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $2;
  $15 = (_pn_strdup($14)|0);
  $18 = $15;
 } else {
  $18 = 0;
 }
 $16 = $sasl;
 $17 = (($16) + 16|0);
 HEAP32[$17>>2] = $18;
 STACKTOP = sp;return;
}
function _pn_sasl_free($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sasl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $sasl = $5;
 $6 = $sasl;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $sasl;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $sasl;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $sasl;
  $15 = (($14) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $sasl;
  $18 = (($17) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
  $20 = $sasl;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $0;
   _pni_sasl_impl_free($23);
  }
  $24 = $sasl;
  _free($24);
 }
 STACKTOP = sp;return;
}
function _pn_do_init($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $mech = 0, $recv = 0, $sasl = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mech = sp + 24|0;
 $recv = sp + 16|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $sasl = $8;
 $9 = $4;
 HEAP32[$vararg_buffer>>2] = $mech;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $recv;
 $10 = (_pn_data_scan($9,14656,$vararg_buffer)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $err;
  $0 = $13;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $14 = (($mech) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$mech>>2]|0;
  $17 = (_pn_strndup($15,$16)|0);
  $18 = $sasl;
  $19 = (($18) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $1;
  $21 = $sasl;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  _pni_process_init($20,$23,$recv);
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _pn_do_mechanisms($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $mechs = 0, $s = 0, $s$byval_copy = 0, $sasl = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s$byval_copy = sp + 56|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s = sp + 16|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $sasl = $8;
 $9 = $sasl;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(5);
 if ($12) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $13 = $4;
 $14 = (_pn_data_scan($13,14664,$vararg_buffer)|0);
 $err = $14;
 $15 = $err;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $err;
  $0 = $17;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $18 = (_pn_string(14672)|0);
 $mechs = $18;
 while(1) {
  $19 = $4;
  $20 = (_pn_data_next($19)|0);
  if (!($20)) {
   break;
  }
  $21 = $4;
  _pn_data_get_symbol($s,$21);
  $22 = $1;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  ;HEAP32[$s$byval_copy+0>>2]=HEAP32[$s+0>>2]|0;HEAP32[$s$byval_copy+4>>2]=HEAP32[$s+4>>2]|0;
  $27 = (_pni_included_mech($26,$s$byval_copy)|0);
  if ($27) {
   $28 = $mechs;
   $29 = HEAP32[$s>>2]|0;
   $30 = (($s) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $29;
   $vararg_ptr3 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $31;
   (_pn_string_addf($28,14680,$vararg_buffer1)|0);
  }
 }
 $32 = $mechs;
 $33 = (_pn_string_size($32)|0);
 $34 = (($33) - 1)|0;
 $35 = $mechs;
 $36 = (_pn_string_buffer($35)|0);
 $37 = (($36) + ($34)|0);
 HEAP8[$37>>0] = 0;
 $38 = $1;
 $39 = (_pni_init_client($38)|0);
 if ($39) {
  $40 = $1;
  $41 = $mechs;
  $42 = (_pn_string_get($41)|0);
  $43 = (_pni_process_mechanisms($40,$42)|0);
  if ($43) {
   $44 = $1;
   _pni_sasl_set_desired_state($44,1);
  } else {
   label = 13;
  }
 } else {
  label = 13;
 }
 if ((label|0) == 13) {
  $45 = $sasl;
  $46 = (($45) + 32|0);
  HEAP32[$46>>2] = 3;
  $47 = $1;
  _pni_sasl_set_desired_state($47,6);
 }
 $48 = $mechs;
 _pn_free($48);
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _pn_do_challenge($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $recv = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $recv = sp + 8|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $recv;
 $7 = (_pn_data_scan($6,14688,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = $1;
  _pni_process_challenge($11,$recv);
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_do_response($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $recv = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $recv = sp + 8|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $recv;
 $7 = (_pn_data_scan($6,14688,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = $1;
  _pni_process_response($11,$recv);
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_do_outcome($transport,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $err = 0, $outcome = 0, $sasl = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $outcome = sp + 30|0;
 $1 = $transport;
 $2 = $frame_type;
 $3 = $channel;
 $4 = $args;
 $5 = $payload;
 $6 = $4;
 HEAP32[$vararg_buffer>>2] = $outcome;
 $7 = (_pn_data_scan($6,14696,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = $1;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $sasl = $13;
  $14 = HEAP8[$outcome>>0]|0;
  $15 = $14&255;
  $16 = $sasl;
  $17 = (($16) + 32|0);
  HEAP32[$17>>2] = $15;
  $18 = $1;
  _pni_sasl_set_desired_state($18,6);
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _pni_init_server($transport) {
 $transport = $transport|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 STACKTOP = sp;return 1;
}
function _pni_init_client($transport) {
 $transport = $transport|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 STACKTOP = sp;return 1;
}
function _pni_sasl_impl_free($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _pni_process_mechanisms($transport,$mechs) {
 $transport = $transport|0;
 $mechs = $mechs|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found = 0, $iresp = 0, $iresp2 = 0, $psize = 0, $size = 0, $size1 = 0, $usize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $3 = sp + 32|0;
 $4 = sp + 8|0;
 $1 = $transport;
 $2 = $mechs;
 $5 = $2;
 $6 = (_strstr($5,15016)|0);
 $found = $6;
 $7 = $found;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = $found;
   $10 = $2;
   $11 = ($9|0)==($10|0);
   if (!($11)) {
    $12 = $found;
    $13 = (($12) + -1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)==(32);
    if (!($16)) {
     break;
    }
   }
   $17 = $found;
   $18 = (($17) + 5|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $22 = $found;
    $23 = (($22) + 5|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(32);
    if (!($26)) {
     break;
    }
   }
   $27 = $1;
   $28 = (($27) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $found;
   _pn_bytes($3,5,$32);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
   $33 = (_pni_included_mech($31,$$byval_copy)|0);
   if ($33) {
    $34 = $1;
    $35 = (($34) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)!=(0|0);
    if ($39) {
     $40 = $1;
     $41 = (($40) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($42) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)!=(0|0);
     if ($45) {
      $46 = (_pn_strdup(15016)|0);
      $47 = $1;
      $48 = (($47) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (($49) + 4|0);
      HEAP32[$50>>2] = $46;
      $51 = $1;
      $52 = (($51) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + 12|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (_strlen(($55|0))|0);
      $usize = $56;
      $57 = $1;
      $58 = (($57) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + 16|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (_strlen(($61|0))|0);
      $psize = $62;
      $63 = $usize;
      $64 = $psize;
      $65 = (($63) + ($64))|0;
      $66 = (($65) + 2)|0;
      $size = $66;
      $67 = $size;
      $68 = (_malloc($67)|0);
      $iresp = $68;
      $69 = $iresp;
      $70 = ($69|0)!=(0|0);
      if ($70) {
       $71 = $iresp;
       $72 = $1;
       $73 = (($72) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       HEAP32[$74>>2] = $71;
       $75 = $iresp;
       HEAP8[$75>>0] = 0;
       $76 = $iresp;
       $77 = (($76) + 1|0);
       $78 = $1;
       $79 = (($78) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($80) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $usize;
       _memmove(($77|0),($82|0),($83|0))|0;
       $84 = $usize;
       $85 = (($84) + 1)|0;
       $86 = $iresp;
       $87 = (($86) + ($85)|0);
       HEAP8[$87>>0] = 0;
       $88 = $iresp;
       $89 = $usize;
       $90 = (($88) + ($89)|0);
       $91 = (($90) + 2|0);
       $92 = $1;
       $93 = (($92) + 4|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (($94) + 16|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = $psize;
       _memmove(($91|0),($96|0),($97|0))|0;
       $98 = $iresp;
       $99 = $1;
       $100 = (($99) + 4|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($101) + 36|0);
       $103 = (($102) + 4|0);
       HEAP32[$103>>2] = $98;
       $104 = $size;
       $105 = $1;
       $106 = (($105) + 4|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($107) + 36|0);
       HEAP32[$108>>2] = $104;
       $109 = $1;
       $110 = (($109) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = (($111) + 16|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $psize;
       _memset(($113|0),0,($114|0))|0;
       _free($113);
       $115 = $1;
       $116 = (($115) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = (($117) + 16|0);
       HEAP32[$118>>2] = 0;
       $$expand_i1_val3 = 1;
       $0 = $$expand_i1_val3;
       $$pre_trunc = $0;
       $200 = $$pre_trunc&1;
       STACKTOP = sp;return ($200|0);
      } else {
       $$expand_i1_val = 0;
       $0 = $$expand_i1_val;
       $$pre_trunc = $0;
       $200 = $$pre_trunc&1;
       STACKTOP = sp;return ($200|0);
      }
     }
    }
   }
  }
 } while(0);
 $119 = $2;
 $120 = (_strstr($119,15024)|0);
 $found = $120;
 $121 = $found;
 $122 = ($121|0)!=(0|0);
 do {
  if ($122) {
   $123 = $found;
   $124 = $2;
   $125 = ($123|0)==($124|0);
   if (!($125)) {
    $126 = $found;
    $127 = (($126) + -1|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128 << 24 >> 24;
    $130 = ($129|0)==(32);
    if (!($130)) {
     break;
    }
   }
   $131 = $found;
   $132 = (($131) + 9|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = $found;
    $137 = (($136) + 9|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138 << 24 >> 24;
    $140 = ($139|0)==(32);
    if (!($140)) {
     break;
    }
   }
   $141 = $1;
   $142 = (($141) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $found;
   _pn_bytes($4,9,$146);
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$4+4>>2]|0;
   $147 = (_pni_included_mech($145,$$byval_copy1)|0);
   if ($147) {
    $148 = (_pn_strdup(15024)|0);
    $149 = $1;
    $150 = (($149) + 4|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($151) + 4|0);
    HEAP32[$152>>2] = $148;
    $153 = $1;
    $154 = (($153) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)!=(0|0);
    do {
     if ($158) {
      $159 = $1;
      $160 = (($159) + 4|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = (($161) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = (_strlen(($163|0))|0);
      $size1 = $164;
      $165 = $size1;
      $166 = (_malloc($165)|0);
      $iresp2 = $166;
      $167 = $iresp2;
      $168 = ($167|0)!=(0|0);
      if ($168) {
       $169 = $iresp2;
       $170 = $1;
       $171 = (($170) + 4|0);
       $172 = HEAP32[$171>>2]|0;
       HEAP32[$172>>2] = $169;
       $173 = $iresp2;
       $174 = $1;
       $175 = (($174) + 4|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = (($176) + 12|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $size1;
       _memmove(($173|0),($178|0),($179|0))|0;
       $180 = $iresp2;
       $181 = $1;
       $182 = (($181) + 4|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (($183) + 36|0);
       $185 = (($184) + 4|0);
       HEAP32[$185>>2] = $180;
       $186 = $size1;
       $187 = $1;
       $188 = (($187) + 4|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = (($189) + 36|0);
       HEAP32[$190>>2] = $186;
       break;
      }
      $$expand_i1_val5 = 0;
      $0 = $$expand_i1_val5;
      $$pre_trunc = $0;
      $200 = $$pre_trunc&1;
      STACKTOP = sp;return ($200|0);
     } else {
      $191 = $1;
      $192 = (($191) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + 36|0);
      $195 = (($194) + 4|0);
      HEAP32[$195>>2] = 15040;
      $196 = $1;
      $197 = (($196) + 4|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (($198) + 36|0);
      HEAP32[$199>>2] = 9;
     }
    } while(0);
    $$expand_i1_val7 = 1;
    $0 = $$expand_i1_val7;
    $$pre_trunc = $0;
    $200 = $$pre_trunc&1;
    STACKTOP = sp;return ($200|0);
   }
  }
 } while(0);
 $$expand_i1_val9 = 0;
 $0 = $$expand_i1_val9;
 $$pre_trunc = $0;
 $200 = $$pre_trunc&1;
 STACKTOP = sp;return ($200|0);
}
function _pni_sasl_impl_list_mechs($transport,$mechlist) {
 $transport = $transport|0;
 $mechlist = $mechlist|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $mechlist;
 $2 = (_pn_strdup(15056)|0);
 $3 = $1;
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return 1;
}
function _pni_process_init($transport,$mechanism,$recv) {
 $transport = $transport|0;
 $mechanism = $mechanism|0;
 $recv = $recv|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $3 = sp;
 $0 = $transport;
 $1 = $mechanism;
 $2 = $recv;
 $4 = $1;
 $5 = (_strcmp($4,15056)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _pn_bytes($3,9,15024);
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
  $12 = (_pni_included_mech($11,$$byval_copy)|0);
  if ($12) {
   $13 = $0;
   $14 = (($13) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 12|0);
   HEAP32[$16>>2] = 15072;
   $17 = $0;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 32|0);
   HEAP32[$20>>2] = 0;
   $21 = $0;
   _pni_sasl_set_desired_state($21,7);
   STACKTOP = sp;return;
  }
 }
 $22 = $0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 32|0);
 HEAP32[$25>>2] = 1;
 $26 = $0;
 _pni_sasl_set_desired_state($26,7);
 STACKTOP = sp;return;
}
function _pni_process_challenge($transport,$recv) {
 $transport = $transport|0;
 $recv = $recv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $recv;
 STACKTOP = sp;return;
}
function _pni_process_response($transport,$recv) {
 $transport = $transport|0;
 $recv = $recv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $recv;
 STACKTOP = sp;return;
}
function _pn_ssl($transport) {
 $transport = $transport|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 STACKTOP = sp;return (0|0);
}
function _pn_ssl_free($ssl) {
 $ssl = $ssl|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssl;
 STACKTOP = sp;return;
}
function _pn_ssl_input($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $bytes;
 $3 = $available;
 STACKTOP = sp;return -1;
}
function _pn_ssl_output($transport,$layer,$buffer,$max_size) {
 $transport = $transport|0;
 $layer = $layer|0;
 $buffer = $buffer|0;
 $max_size = $max_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $buffer;
 $3 = $max_size;
 STACKTOP = sp;return -1;
}
function _pn_ssl_allow_unsecured($ssl) {
 $ssl = $ssl|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssl;
 STACKTOP = sp;return 1;
}
function _pn_ssl_set_peer_hostname($ssl,$hostname) {
 $ssl = $ssl|0;
 $hostname = $hostname|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssl;
 $1 = $hostname;
 STACKTOP = sp;return -1;
}
function _pn_void_new($clazz,$size) {
 $clazz = $clazz|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $clazz;
 $1 = $size;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pn_void_incref($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return;
}
function _pn_void_decref($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return;
}
function _pn_void_refcount($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return -1;
}
function _pn_void_free($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _pn_void_reify($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[160>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _pn_weakref_incref($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return;
}
function _pn_weakref_decref($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return;
}
function _pn_weakref_refcount($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return -1;
}
function _pn_weakref_reify($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[608>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _pn_weakref_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = (_pn_hashcode($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _pn_weakref_compare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_compare($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_weakref_inspect($object,$dst) {
 $object = $object|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $dst;
 $2 = $0;
 $3 = $1;
 $4 = (_pn_inspect($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _pn_list_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((992|0),(624|0),202,(1024|0));
  // unreachable;
 }
 $3 = $0;
 $list = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $list;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $list;
  $10 = HEAP32[$9>>2]|0;
  $11 = $list;
  $12 = $i;
  $13 = (_pn_list_get($11,$12)|0);
  (_pn_class_decref($10,$13)|0);
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 $16 = $list;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 STACKTOP = sp;return;
}
function _pn_list_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0;
 var $i = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((992|0),(624|0),212,(1000|0));
  // unreachable;
 }
 $3 = $0;
 $list = $3;
 $hash = 1;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $list;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $hash;
  $10 = ($9*31)|0;
  $11 = $list;
  $12 = $i;
  $13 = (_pn_list_get($11,$12)|0);
  $14 = (_pn_hashcode($13)|0);
  $15 = (($10) + ($14))|0;
  $hash = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = $hash;
 STACKTOP = sp;return ($18|0);
}
function _pn_list_compare($oa,$ob) {
 $oa = $oa|0;
 $ob = $ob|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $delta = 0, $i = 0, $na = 0;
 var $nb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oa;
 $2 = $ob;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((960|0),(624|0),225,(968|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((984|0),(624|0),225,(968|0));
  // unreachable;
 }
 $7 = $1;
 $a = $7;
 $8 = $2;
 $b = $8;
 $9 = $a;
 $10 = (_pn_list_size($9)|0);
 $na = $10;
 $11 = $b;
 $12 = (_pn_list_size($11)|0);
 $nb = $12;
 $13 = $na;
 $14 = $nb;
 $15 = ($13|0)!=($14|0);
 if ($15) {
  $16 = $nb;
  $17 = $na;
  $18 = (($16) - ($17))|0;
  $0 = $18;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = $na;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $a;
  $23 = $i;
  $24 = (_pn_list_get($22,$23)|0);
  $25 = $b;
  $26 = $i;
  $27 = (_pn_list_get($25,$26)|0);
  $28 = (_pn_compare($24,$27)|0);
  $delta = $28;
  $29 = $delta;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 10;
   break;
  }
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 if ((label|0) == 10) {
  $31 = $delta;
  $0 = $31;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $0 = 0;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _pn_list_inspect($obj,$dst) {
 $obj = $obj|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $i = 0;
 var $list = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $obj;
 $2 = $dst;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((912|0),(624|0),245,(920|0));
  // unreachable;
 }
 $5 = $1;
 $list = $5;
 $6 = $2;
 $7 = (_pn_string_addf($6,936,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $11 = $list;
 $12 = (_pn_list_size($11)|0);
 $n = $12;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $n;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   label = 15;
   break;
  }
  $16 = $i;
  $17 = ($16>>>0)>(0);
  if ($17) {
   $18 = $2;
   $19 = (_pn_string_addf($18,944,$vararg_buffer1)|0);
   $err = $19;
   $20 = $err;
   $21 = ($20|0)!=(0);
   if ($21) {
    label = 9;
    break;
   }
  }
  $23 = $list;
  $24 = HEAP32[$23>>2]|0;
  $25 = $list;
  $26 = $i;
  $27 = (_pn_list_get($25,$26)|0);
  $28 = $2;
  $29 = (_pn_class_inspect($24,$27,$28)|0);
  $err = $29;
  $30 = $err;
  $31 = ($30|0)!=(0);
  if ($31) {
   label = 12;
   break;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 if ((label|0) == 9) {
  $22 = $err;
  $0 = $22;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 12) {
  $32 = $err;
  $0 = $32;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 15) {
  $35 = $2;
  $36 = (_pn_string_addf($35,952,$vararg_buffer3)|0);
  $0 = $36;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _pn_map_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $map = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $map = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $map;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $map;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7<<4)|0);
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $map;
   $17 = HEAP32[$16>>2]|0;
   $18 = $i;
   $19 = $map;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($18<<4)|0);
   $23 = HEAP32[$22>>2]|0;
   (_pn_class_decref($17,$23)|0);
   $24 = $map;
   $25 = (($24) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $i;
   $28 = $map;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<4)|0);
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   (_pn_class_decref($26,$33)|0);
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = $map;
 $37 = (($36) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 _free($38);
 STACKTOP = sp;return;
}
function _pn_map_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hashcode = 0;
 var $i = 0, $key = 0, $map = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $map = $1;
 $hashcode = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $map;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $map;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($7<<4)|0);
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $i;
   $17 = $map;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($16<<4)|0);
   $21 = HEAP32[$20>>2]|0;
   $key = $21;
   $22 = $i;
   $23 = $map;
   $24 = (($23) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22<<4)|0);
   $27 = (($26) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $value = $28;
   $29 = $key;
   $30 = (_pn_hashcode($29)|0);
   $31 = $value;
   $32 = (_pn_hashcode($31)|0);
   $33 = $30 ^ $32;
   $34 = $hashcode;
   $35 = (($34) + ($33))|0;
   $hashcode = $35;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $hashcode;
 STACKTOP = sp;return ($38|0);
}
function _pn_map_inspect($obj,$dst) {
 $obj = $obj|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, $err = 0, $first = 0, $map = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $obj;
 $2 = $dst;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((1480|0),(1120|0),96,(1488|0));
  // unreachable;
 }
 $5 = $1;
 $map = $5;
 $6 = $2;
 $7 = (_pn_string_addf($6,1504,$vararg_buffer)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $0 = $10;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $11 = $map;
 $12 = (_pn_map_head($11)|0);
 $entry = $12;
 $first = 1;
 while(1) {
  $13 = $entry;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 19;
   break;
  }
  $15 = $first;
  $16 = $15&1;
  if ($16) {
   $first = 0;
  } else {
   $17 = $2;
   $18 = (_pn_string_addf($17,1512,$vararg_buffer1)|0);
   $err = $18;
   $19 = $err;
   $20 = ($19|0)!=(0);
   if ($20) {
    label = 10;
    break;
   }
  }
  $22 = $map;
  $23 = HEAP32[$22>>2]|0;
  $24 = $map;
  $25 = $entry;
  $26 = (_pn_map_key($24,$25)|0);
  $27 = $2;
  $28 = (_pn_class_inspect($23,$26,$27)|0);
  $err = $28;
  $29 = $err;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 13;
   break;
  }
  $32 = $2;
  $33 = (_pn_string_addf($32,1520,$vararg_buffer3)|0);
  $err = $33;
  $34 = $err;
  $35 = ($34|0)!=(0);
  if ($35) {
   label = 15;
   break;
  }
  $37 = $map;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $map;
  $41 = $entry;
  $42 = (_pn_map_value($40,$41)|0);
  $43 = $2;
  $44 = (_pn_class_inspect($39,$42,$43)|0);
  $err = $44;
  $45 = $err;
  $46 = ($45|0)!=(0);
  if ($46) {
   label = 17;
   break;
  }
  $48 = $map;
  $49 = $entry;
  $50 = (_pn_map_next($48,$49)|0);
  $entry = $50;
 }
 if ((label|0) == 10) {
  $21 = $err;
  $0 = $21;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 13) {
  $31 = $err;
  $0 = $31;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 15) {
  $36 = $err;
  $0 = $36;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 17) {
  $47 = $err;
  $0 = $47;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 19) {
  $51 = $2;
  $52 = (_pn_string_addf($51,1528,$vararg_buffer5)|0);
  $0 = $52;
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _pni_uintptr_incref($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return;
}
function _pni_uintptr_decref($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return;
}
function _pni_uintptr_refcount($object) {
 $object = $object|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 STACKTOP = sp;return -1;
}
function _pni_uintptr_reify($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = HEAP32[1472>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _pn_string_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $string = $1;
 $2 = $string;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _pn_string_hashcode($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hashcode = 0, $i = 0, $string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $object;
 $2 = $1;
 $string = $2;
 $3 = $string;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $hashcode = 1;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $string;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $hashcode;
  $13 = ($12*31)|0;
  $14 = $i;
  $15 = $string;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = (($13) + ($19))|0;
  $hashcode = $20;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $23 = $hashcode;
 $0 = $23;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _pn_string_compare($oa,$ob) {
 $oa = $oa|0;
 $ob = $ob|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oa;
 $2 = $ob;
 $3 = $1;
 $a = $3;
 $4 = $2;
 $b = $4;
 $5 = $a;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $b;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=($10|0);
 if ($11) {
  $12 = $b;
  $13 = (($12) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $a;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($14) - ($17))|0;
  $0 = $18;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $19 = $a;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(-1);
 if ($22) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $23 = $a;
  $24 = HEAP32[$23>>2]|0;
  $25 = $b;
  $26 = HEAP32[$25>>2]|0;
  $27 = $a;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_memcmp($24,$26,$29)|0);
  $0 = $30;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _pn_string_inspect($obj,$dst) {
 $obj = $obj|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $err = 0, $i = 0, $str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $obj;
 $2 = $dst;
 $3 = $1;
 $str = $3;
 $4 = $str;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $2;
  $9 = (_pn_string_addf($8,1792,$vararg_buffer)|0);
  $0 = $9;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $10 = $2;
 $11 = (_pn_string_addf($10,1800,$vararg_buffer1)|0);
 $err = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $str;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   label = 14;
   break;
  }
  $17 = $i;
  $18 = $str;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $c = $21;
  $22 = $c;
  $23 = $22&255;
  $24 = (_isprint($23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $2;
   $27 = $c;
   $28 = $27&255;
   HEAP32[$vararg_buffer3>>2] = $28;
   $29 = (_pn_string_addf($26,1808,$vararg_buffer3)|0);
   $err = $29;
   $30 = $err;
   $31 = ($30|0)!=(0);
   if ($31) {
    label = 7;
    break;
   }
  } else {
   $33 = $2;
   $34 = $c;
   $35 = $34&255;
   HEAP32[$vararg_buffer5>>2] = $35;
   $36 = (_pn_string_addf($33,1816,$vararg_buffer5)|0);
   $err = $36;
   $37 = $err;
   $38 = ($37|0)!=(0);
   if ($38) {
    label = 10;
    break;
   }
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 7) {
  $32 = $err;
  $0 = $32;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 10) {
  $39 = $err;
  $0 = $39;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 14) {
  $42 = $2;
  $43 = (_pn_string_addf($42,1800,$vararg_buffer8)|0);
  $0 = $43;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _pn_record_initialize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $record = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $record = $1;
 $2 = $record;
 HEAP32[$2>>2] = 0;
 $3 = $record;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $record;
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _pn_record_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $record = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $record = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $record;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $record;
  $8 = (($7) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + (($6*12)|0)|0);
  $v = $10;
  $11 = $v;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $v;
  $15 = (($14) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  (_pn_class_decref($13,$16)|0);
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $19 = $record;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 STACKTOP = sp;return;
}
function _pn_data_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $data = $1;
 $2 = $data;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $data;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _pn_buffer_free($6);
 $7 = $data;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 _pn_free($9);
 $10 = $data;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 _pn_error_free($12);
 $13 = $data;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 _pn_free($15);
 $16 = $data;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 _pn_free($18);
 STACKTOP = sp;return;
}
function _pn_data_inspect($obj,$dst) {
 $obj = $obj|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $dst;
 $2 = $0;
 $data = $2;
 $3 = $data;
 $4 = $1;
 $5 = (_pni_data_traverse($3,106,107,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pn_decoder_initialize($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $decoder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $decoder = $1;
 $2 = $decoder;
 HEAP32[$2>>2] = 0;
 $3 = $decoder;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $decoder;
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (_pn_error()|0);
 $8 = $decoder;
 $9 = (($8) + 12|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _pn_decoder_finalize($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $decoder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $decoder = $1;
 $2 = $decoder;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 _pn_error_free($4);
 STACKTOP = sp;return;
}
function _pn_encoder_initialize($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encoder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $encoder = $1;
 $2 = $encoder;
 HEAP32[$2>>2] = 0;
 $3 = $encoder;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $encoder;
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (_pn_error()|0);
 $8 = $encoder;
 $9 = (($8) + 12|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return;
}
function _pn_encoder_finalize($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $encoder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $encoder = $1;
 $2 = $encoder;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 _pn_error_free($4);
 STACKTOP = sp;return;
}
function _pn_connection_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $endpoint = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $conn = $1;
 $2 = $conn;
 $endpoint = $2;
 $3 = $conn;
 $4 = (($3) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $conn;
   $8 = (($7) + 84|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 251|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&1;
   if ($12) {
    ___assert_fail((8168|0),(6256|0),462,(8200|0));
    // unreachable;
   } else {
    $13 = $conn;
    $14 = (($13) + 84|0);
    $15 = HEAP32[$14>>2]|0;
    _pn_free($15);
    break;
   }
  }
 } while(0);
 $16 = $conn;
 $17 = (_pn_refcount($16)|0);
 $18 = ($17|0)>(0);
 if ($18) {
  STACKTOP = sp;return;
 } else {
  $19 = $conn;
  $20 = (($19) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $conn;
  $23 = (($22) + 80|0);
  $24 = HEAP32[$23>>2]|0;
  _pni_free_children($21,$24);
  $25 = $conn;
  $26 = (($25) + 136|0);
  $27 = HEAP32[$26>>2]|0;
  _pn_free($27);
  $28 = $conn;
  $29 = (($28) + 132|0);
  $30 = HEAP32[$29>>2]|0;
  (_pn_decref($30)|0);
  $31 = $conn;
  $32 = (($31) + 104|0);
  $33 = HEAP32[$32>>2]|0;
  _pn_free($33);
  $34 = $conn;
  $35 = (($34) + 108|0);
  $36 = HEAP32[$35>>2]|0;
  _pn_free($36);
  $37 = $conn;
  $38 = (($37) + 112|0);
  $39 = HEAP32[$38>>2]|0;
  _pn_free($39);
  $40 = $conn;
  $41 = (($40) + 116|0);
  $42 = HEAP32[$41>>2]|0;
  _pn_free($42);
  $43 = $conn;
  $44 = (($43) + 120|0);
  $45 = HEAP32[$44>>2]|0;
  _pn_free($45);
  $46 = $conn;
  $47 = (($46) + 124|0);
  $48 = HEAP32[$47>>2]|0;
  _pn_free($48);
  $49 = $conn;
  $50 = (($49) + 128|0);
  $51 = HEAP32[$50>>2]|0;
  _pn_free($51);
  $52 = $endpoint;
  _pn_endpoint_tini($52);
  $53 = $conn;
  $54 = (($53) + 140|0);
  $55 = HEAP32[$54>>2]|0;
  _pn_free($55);
  STACKTOP = sp;return;
 }
}
function _pn_session_incref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $session = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $session = $1;
 $2 = $session;
 $3 = (($2) + 58|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $11 = $0;
  _pn_object_incref($11);
  STACKTOP = sp;return;
 } else {
  $6 = $session;
  $7 = (($6) + 58|0);
  HEAP8[$7>>0] = 1;
  $8 = $session;
  $9 = (($8) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  (_pn_incref($10)|0);
  STACKTOP = sp;return;
 }
}
function _pn_session_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $endpoint = 0, $session = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $session = $1;
 $2 = $session;
 $endpoint = $2;
 $3 = $endpoint;
 $4 = (_pni_preserve_child($3)|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $session;
 $6 = (($5) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 _pn_free($7);
 $8 = $session;
 $9 = (($8) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $session;
 $12 = (($11) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 _pni_free_children($10,$13);
 $14 = $endpoint;
 _pn_endpoint_tini($14);
 $15 = $session;
 $16 = (($15) + 96|0);
 $17 = (($16) + 8|0);
 _pn_delivery_map_free($17);
 $18 = $session;
 $19 = (($18) + 96|0);
 $20 = (($19) + 16|0);
 _pn_delivery_map_free($20);
 $21 = $session;
 $22 = (($21) + 96|0);
 $23 = (($22) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 _pn_free($24);
 $25 = $session;
 $26 = (($25) + 96|0);
 $27 = (($26) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 _pn_free($28);
 $29 = $session;
 $30 = (($29) + 60|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $session;
 _pn_remove_session($31,$32);
 $33 = $session;
 $34 = (($33) + 60|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 80|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $session;
 (_pn_list_remove($37,$38)|0);
 $39 = $session;
 $40 = (($39) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 84|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $session;
  $46 = (($45) + 60|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 84|0);
  $49 = HEAP32[$48>>2]|0;
  $transport = $49;
  $50 = $transport;
  $51 = (($50) + 128|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $session;
  $54 = (($53) + 96|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  _pn_hash_del($52,$56);
  $57 = $transport;
  $58 = (($57) + 132|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $session;
  $61 = (($60) + 96|0);
  $62 = (($61) + 2|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63&65535;
  _pn_hash_del($59,$64);
 }
 $65 = $endpoint;
 $66 = (($65) + 58|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&1;
 if (!($68)) {
  STACKTOP = sp;return;
 }
 $69 = $session;
 $70 = (($69) + 60|0);
 $71 = HEAP32[$70>>2]|0;
 (_pn_decref($71)|0);
 STACKTOP = sp;return;
}
function _pn_link_incref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $link = $1;
 $2 = $link;
 $3 = (($2) + 58|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $11 = $0;
  _pn_object_incref($11);
  STACKTOP = sp;return;
 } else {
  $6 = $link;
  $7 = (($6) + 58|0);
  HEAP8[$7>>0] = 1;
  $8 = $link;
  $9 = (($8) + 256|0);
  $10 = HEAP32[$9>>2]|0;
  (_pn_incref($10)|0);
  STACKTOP = sp;return;
 }
}
function _pn_link_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $endpoint = 0, $link = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $link = $1;
 $2 = $link;
 $endpoint = $2;
 $3 = $endpoint;
 $4 = (_pni_preserve_child($3)|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $link;
  $6 = (($5) + 260|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $link;
  $10 = (($9) + 260|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 149|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&1;
  if ($14) {
   label = 6;
   break;
  }
  $15 = $link;
  $16 = (($15) + 260|0);
  $17 = HEAP32[$16>>2]|0;
  _pn_free($17);
 }
 if ((label|0) == 6) {
  ___assert_fail((8000|0),(6256|0),1077,(8040|0));
  // unreachable;
 }
 $18 = $link;
 $19 = (($18) + 272|0);
 $20 = HEAP32[$19>>2]|0;
 _pn_free($20);
 $21 = $link;
 $22 = (($21) + 60|0);
 _pn_terminus_free($22);
 $23 = $link;
 $24 = (($23) + 104|0);
 _pn_terminus_free($24);
 $25 = $link;
 $26 = (($25) + 148|0);
 _pn_terminus_free($26);
 $27 = $link;
 $28 = (($27) + 192|0);
 _pn_terminus_free($28);
 $29 = $link;
 $30 = (($29) + 252|0);
 $31 = HEAP32[$30>>2]|0;
 _pn_free($31);
 $32 = $endpoint;
 _pn_endpoint_tini($32);
 $33 = $link;
 $34 = (($33) + 256|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $link;
 _pn_remove_link($35,$36);
 $37 = $link;
 $38 = (($37) + 256|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 96|0);
 $41 = (($40) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $link;
 $44 = (($43) + 236|0);
 $45 = HEAP32[$44>>2]|0;
 _pn_hash_del($42,$45);
 $46 = $link;
 $47 = (($46) + 256|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 96|0);
 $50 = (($49) + 48|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $link;
 $53 = (($52) + 236|0);
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 _pn_hash_del($51,$55);
 $56 = $link;
 $57 = (($56) + 256|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 68|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $link;
 (_pn_list_remove($60,$61)|0);
 $62 = $endpoint;
 $63 = (($62) + 58|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&1;
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $link;
 $67 = (($66) + 256|0);
 $68 = HEAP32[$67>>2]|0;
 (_pn_decref($68)|0);
 STACKTOP = sp;return;
}
function _pn_delivery_incref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delivery = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $delivery = $1;
 $2 = $delivery;
 $3 = (($2) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $delivery;
  $7 = (($6) + 149|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&1;
  if (!($9)) {
   $10 = $delivery;
   $11 = (($10) + 149|0);
   HEAP8[$11>>0] = 1;
   $12 = $delivery;
   $13 = (($12) + 96|0);
   $14 = HEAP32[$13>>2]|0;
   (_pn_incref($14)|0);
   STACKTOP = sp;return;
  }
 }
 $15 = $0;
 _pn_object_incref($15);
 STACKTOP = sp;return;
}
function _pn_delivery_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $conn = 0, $delivery = 0, $link = 0, $pool = 0, $pooled = 0, $referenced = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $delivery = $1;
 $2 = $delivery;
 $3 = (($2) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $link = $4;
 $pooled = 0;
 $referenced = 1;
 $5 = $link;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $link;
  $8 = (_pni_link_live($7)|0);
  if ($8) {
   $9 = $delivery;
   $10 = (_pni_preserve_delivery($9)|0);
   if ($10) {
    $11 = $delivery;
    $12 = (($11) + 149|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&1;
    if ($14) {
     $15 = $delivery;
     $16 = (($15) + 149|0);
     HEAP8[$16>>0] = 0;
     $17 = $delivery;
     _pn_object_incref($17);
     $18 = $link;
     (_pn_decref($18)|0);
     STACKTOP = sp;return;
    }
   }
  }
  $19 = $delivery;
  $20 = (($19) + 149|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&1;
  $23 = $22&1;
  $referenced = $23;
  $24 = $delivery;
  _pn_clear_tpwork($24);
  $25 = $delivery;
  $26 = (($25) + 108|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $delivery;
   $30 = (($29) + 104|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $delivery;
   $33 = (($32) + 108|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 104|0);
   HEAP32[$35>>2] = $31;
  }
  $36 = $delivery;
  $37 = (($36) + 104|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $delivery;
   $41 = (($40) + 108|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $delivery;
   $44 = (($43) + 104|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 108|0);
   HEAP32[$46>>2] = $42;
  }
  $47 = $delivery;
  $48 = $link;
  $49 = (($48) + 260|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)==($50|0);
  if ($51) {
   $52 = $delivery;
   $53 = (($52) + 104|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $link;
   $56 = (($55) + 260|0);
   HEAP32[$56>>2] = $54;
  }
  $57 = $delivery;
  $58 = $link;
  $59 = (($58) + 264|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($57|0)==($60|0);
  if ($61) {
   $62 = $delivery;
   $63 = (($62) + 108|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $link;
   $66 = (($65) + 264|0);
   HEAP32[$66>>2] = $64;
  }
  $67 = $link;
  $68 = (_pn_link_is_sender($67)|0);
  if ($68) {
   $69 = $link;
   $70 = (($69) + 256|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 96|0);
   $73 = (($72) + 16|0);
   $80 = $73;
  } else {
   $74 = $link;
   $75 = (($74) + 256|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 96|0);
   $78 = (($77) + 8|0);
   $80 = $78;
  }
  $79 = $delivery;
  _pn_delivery_map_del($80,$79);
  $81 = $delivery;
  $82 = (($81) + 100|0);
  $83 = HEAP32[$82>>2]|0;
  _pn_buffer_clear($83);
  $84 = $delivery;
  $85 = (($84) + 136|0);
  $86 = HEAP32[$85>>2]|0;
  _pn_buffer_clear($86);
  $87 = $delivery;
  $88 = (($87) + 140|0);
  $89 = HEAP32[$88>>2]|0;
  _pn_record_clear($89);
  $90 = $delivery;
  $91 = (($90) + 145|0);
  HEAP8[$91>>0] = 1;
  $92 = $link;
  $93 = (($92) + 256|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 60|0);
  $96 = HEAP32[$95>>2]|0;
  $conn = $96;
  $97 = $delivery;
  $98 = (_pn_refcount($97)|0);
  $99 = ($98|0)==(0);
  if (!($99)) {
   ___assert_fail((7912|0),(6256|0),1409,(7944|0));
   // unreachable;
  }
  $100 = $conn;
  $101 = (_pni_connection_live($100)|0);
  do {
   if ($101) {
    $102 = $link;
    $103 = (($102) + 256|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 60|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + 140|0);
    $108 = HEAP32[$107>>2]|0;
    $pool = $108;
    $109 = $delivery;
    $110 = (($109) + 96|0);
    HEAP32[$110>>2] = 0;
    $111 = $pool;
    $112 = $delivery;
    (_pn_list_add($111,$112)|0);
    $pooled = 1;
    $113 = $delivery;
    $114 = (_pn_refcount($113)|0);
    $115 = ($114|0)==(1);
    if ($115) {
     break;
    } else {
     ___assert_fail((7968|0),(6256|0),1415,(7944|0));
     // unreachable;
    }
   }
  } while(0);
 }
 $116 = $pooled;
 $117 = $116&1;
 if (!($117)) {
  $118 = $delivery;
  $119 = (($118) + 140|0);
  $120 = HEAP32[$119>>2]|0;
  _pn_free($120);
  $121 = $delivery;
  $122 = (($121) + 100|0);
  $123 = HEAP32[$122>>2]|0;
  _pn_buffer_free($123);
  $124 = $delivery;
  $125 = (($124) + 136|0);
  $126 = HEAP32[$125>>2]|0;
  _pn_buffer_free($126);
  $127 = $delivery;
  _pn_disposition_finalize($127);
  $128 = $delivery;
  $129 = (($128) + 48|0);
  _pn_disposition_finalize($129);
 }
 $130 = $referenced;
 $131 = $130&1;
 if (!($131)) {
  STACKTOP = sp;return;
 }
 $132 = $link;
 (_pn_decref($132)|0);
 STACKTOP = sp;return;
}
function _pn_collector_initialize_cast($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 _pn_collector_initialize($1);
 STACKTOP = sp;return;
}
function _pn_collector_finalize_cast($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 _pn_collector_finalize($1);
 STACKTOP = sp;return;
}
function _pn_collector_hashcode_cast($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $object;
 $fp = 0;
 $2 = $fp;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $fp;
  $5 = $1;
  $6 = (FUNCTION_TABLE_ii[$4 & 127]($5)|0);
  $0 = $6;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $7;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _pn_collector_compare_cast($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $fp = 0;
 $3 = $fp;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $fp;
  $6 = $1;
  $7 = $2;
  $8 = (FUNCTION_TABLE_iii[$5 & 127]($6,$7)|0);
  $0 = $8;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $1;
  $10 = $9;
  $11 = $2;
  $12 = $11;
  $13 = (($10) - ($12))|0;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pn_collector_inspect_cast($object,$str) {
 $object = $object|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $object;
 $2 = $str;
 $fp = 108;
 $3 = $fp;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $fp;
  $6 = $1;
  $7 = $2;
  $8 = (FUNCTION_TABLE_iii[$5 & 127]($6,$7)|0);
  $0 = $8;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $2;
  $10 = $1;
  HEAP32[$vararg_buffer>>2] = 8312;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  $11 = (_pn_string_addf($9,9624,$vararg_buffer)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_event_initialize_cast($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 _pn_event_initialize($1);
 STACKTOP = sp;return;
}
function _pn_event_finalize_cast($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 _pn_event_finalize($1);
 STACKTOP = sp;return;
}
function _pn_event_hashcode_cast($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $object;
 $fp = 0;
 $2 = $fp;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $fp;
  $5 = $1;
  $6 = (FUNCTION_TABLE_ii[$4 & 127]($5)|0);
  $0 = $6;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $7;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _pn_event_compare_cast($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $fp = 0;
 $3 = $fp;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $fp;
  $6 = $1;
  $7 = $2;
  $8 = (FUNCTION_TABLE_iii[$5 & 127]($6,$7)|0);
  $0 = $8;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $1;
  $10 = $9;
  $11 = $2;
  $12 = $11;
  $13 = (($10) - ($12))|0;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _pn_event_inspect_cast($object,$str) {
 $object = $object|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $object;
 $2 = $str;
 $fp = 109;
 $3 = $fp;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $fp;
  $6 = $1;
  $7 = $2;
  $8 = (FUNCTION_TABLE_iii[$5 & 127]($6,$7)|0);
  $0 = $8;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $2;
  $10 = $1;
  HEAP32[$vararg_buffer>>2] = 8568;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  $11 = (_pn_string_addf($9,9624,$vararg_buffer)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _pn_input_read_amqp_header($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eos = 0, $protocol = 0, $quoted = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $quoted = sp + 48|0;
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (_pn_transport_capacity($5)|0);
 $7 = ($6|0)==(-1);
 $8 = $7&1;
 $eos = $8;
 $9 = $3;
 $10 = $4;
 $11 = (_pni_sniff_header($9,$10)|0);
 $protocol = $11;
 $12 = $protocol;
 do {
  if ((($12|0) == 5)) {
   $13 = $2;
   $14 = $1;
   $15 = (($14) + 76|0);
   $16 = (($15) + ($13<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(10064|0);
   if ($18) {
    $19 = $2;
    $20 = $1;
    $21 = (($20) + 76|0);
    $22 = (($21) + ($19<<2)|0);
    HEAP32[$22>>2] = 10080;
   } else {
    $23 = $2;
    $24 = $1;
    $25 = (($24) + 76|0);
    $26 = (($25) + ($23<<2)|0);
    HEAP32[$26>>2] = 10048;
   }
   $27 = $1;
   $28 = (($27) + 228|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 2;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $1;
    HEAP32[$vararg_buffer>>2] = 11904;
    _pn_transport_logf($32,12240,$vararg_buffer);
   }
   $0 = 8;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  } else if ((($12|0) == 0)) {
   $33 = $eos;
   $34 = $33&1;
   if ($34) {
    break;
   }
   $0 = 0;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  }
 } while(0);
 $35 = $3;
 $36 = $4;
 (_pn_quote_data($quoted,1024,$35,$36)|0);
 $37 = $1;
 $38 = $protocol;
 $39 = (_pni_protocol_name($38)|0);
 $40 = $eos;
 $41 = $40&1;
 $42 = $41 ^ 1;
 $43 = $42 ? 10584 : 12280;
 HEAP32[$vararg_buffer1>>2] = 11904;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $39;
 $vararg_ptr5 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $quoted;
 $vararg_ptr6 = (($vararg_buffer1) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $43;
 (_pn_do_error($37,12160,12248,$vararg_buffer1)|0);
 $0 = -1;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _pn_output_write_amqp_header($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $layer;
 $2 = $bytes;
 $3 = $available;
 $4 = $0;
 $5 = (($4) + 228|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  HEAP32[$vararg_buffer>>2] = 11904;
  _pn_transport_logf($9,11896,$vararg_buffer);
 }
 $10 = $3;
 $11 = ($10>>>0)>=(8);
 if (!($11)) {
  ___assert_fail((11912|0),(10248|0),2412,(11928|0));
  // unreachable;
 }
 $12 = $2;
 _memmove(($12|0),(11960|0),8)|0;
 $13 = $1;
 $14 = $0;
 $15 = (($14) + 76|0);
 $16 = (($15) + ($13<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(10048|0);
 if ($18) {
  $19 = $1;
  $20 = $0;
  $21 = (($20) + 76|0);
  $22 = (($21) + ($19<<2)|0);
  HEAP32[$22>>2] = 10080;
  STACKTOP = sp;return 8;
 } else {
  $23 = $1;
  $24 = $0;
  $25 = (($24) + 76|0);
  $26 = (($25) + ($23<<2)|0);
  HEAP32[$26>>2] = 10064;
  STACKTOP = sp;return 8;
 }
 return (0)|0;
}
function _pn_tick_amqp($transport,$layer,$0,$1) {
 $transport = $transport|0;
 $layer = $layer|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $timeout = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $4 = sp + 8|0;
 $timeout = sp;
 $2 = $transport;
 $3 = $layer;
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = $timeout;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = $2;
 $14 = (($13) + 88|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $2;
  $18 = (($17) + 96|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)==(0);
  $26 = ($24|0)==(0);
  $27 = $25 & $26;
  if ($27) {
   label = 4;
  } else {
   $28 = $2;
   $29 = (($28) + 104|0);
   $30 = $29;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = $2;
   $37 = (($36) + 168|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = ($32|0)!=($40|0);
   $45 = ($35|0)!=($43|0);
   $46 = $44 | $45;
   if ($46) {
    label = 4;
   } else {
    $78 = $2;
    $79 = (($78) + 96|0);
    $80 = $79;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = $4;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = (($86) + 4)|0;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = ($85|0)<($91|0);
    $93 = ($82>>>0)<=($88>>>0);
    $94 = ($85|0)==($91|0);
    $95 = $94 & $93;
    $96 = $92 | $95;
    if ($96) {
     $97 = $4;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (($97) + 4)|0;
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = $2;
     $104 = (($103) + 88|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (_i64Add(($99|0),($102|0),($105|0),0)|0);
     $107 = tempRet0;
     $108 = $2;
     $109 = (($108) + 96|0);
     $110 = $109;
     $111 = $110;
     HEAP32[$111>>2] = $106;
     $112 = (($110) + 4)|0;
     $113 = $112;
     HEAP32[$113>>2] = $107;
     $114 = $2;
     $115 = (($114) + 244|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&1;
     if (!($117)) {
      $118 = $2;
      $119 = (($118) + 244|0);
      HEAP8[$119>>0] = 1;
      $120 = $2;
      (_pn_do_error($120,12096,12128,$vararg_buffer)|0);
     }
    }
   }
  }
  if ((label|0) == 4) {
   $47 = $4;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + 4)|0;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = $2;
   $54 = (($53) + 88|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (_i64Add(($49|0),($52|0),($55|0),0)|0);
   $57 = tempRet0;
   $58 = $2;
   $59 = (($58) + 96|0);
   $60 = $59;
   $61 = $60;
   HEAP32[$61>>2] = $56;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = $57;
   $64 = $2;
   $65 = (($64) + 168|0);
   $66 = $65;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($66) + 4)|0;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = $2;
   $73 = (($72) + 104|0);
   $74 = $73;
   $75 = $74;
   HEAP32[$75>>2] = $68;
   $76 = (($74) + 4)|0;
   $77 = $76;
   HEAP32[$77>>2] = $71;
  }
  $121 = $2;
  $122 = (($121) + 96|0);
  $123 = $122;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $timeout;
  $130 = $129;
  HEAP32[$130>>2] = $125;
  $131 = (($129) + 4)|0;
  $132 = $131;
  HEAP32[$132>>2] = $128;
 }
 $133 = $2;
 $134 = (($133) + 92|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0);
 if (!($136)) {
  $288 = $timeout;
  $289 = $288;
  $290 = HEAP32[$289>>2]|0;
  $291 = (($288) + 4)|0;
  $292 = $291;
  $293 = HEAP32[$292>>2]|0;
  tempRet0 = $293;
  STACKTOP = sp;return ($290|0);
 }
 $137 = $2;
 $138 = (($137) + 239|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&1;
 if ($140) {
  $288 = $timeout;
  $289 = $288;
  $290 = HEAP32[$289>>2]|0;
  $291 = (($288) + 4)|0;
  $292 = $291;
  $293 = HEAP32[$292>>2]|0;
  tempRet0 = $293;
  STACKTOP = sp;return ($290|0);
 }
 $141 = $2;
 $142 = (($141) + 112|0);
 $143 = $142;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = ($145|0)==(0);
 $150 = ($148|0)==(0);
 $151 = $149 & $150;
 if ($151) {
  label = 15;
 } else {
  $152 = $2;
  $153 = (($152) + 120|0);
  $154 = $153;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($154) + 4)|0;
  $158 = $157;
  $159 = HEAP32[$158>>2]|0;
  $160 = $2;
  $161 = (($160) + 176|0);
  $162 = $161;
  $163 = $162;
  $164 = HEAP32[$163>>2]|0;
  $165 = (($162) + 4)|0;
  $166 = $165;
  $167 = HEAP32[$166>>2]|0;
  $168 = ($156|0)!=($164|0);
  $169 = ($159|0)!=($167|0);
  $170 = $168 | $169;
  if ($170) {
   label = 15;
  } else {
   $206 = $2;
   $207 = (($206) + 112|0);
   $208 = $207;
   $209 = $208;
   $210 = HEAP32[$209>>2]|0;
   $211 = (($208) + 4)|0;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = $4;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + 4)|0;
   $218 = $217;
   $219 = HEAP32[$218>>2]|0;
   $220 = ($213|0)<($219|0);
   $221 = ($210>>>0)<=($216>>>0);
   $222 = ($213|0)==($219|0);
   $223 = $222 & $221;
   $224 = $220 | $223;
   if ($224) {
    $225 = $4;
    $226 = $225;
    $227 = HEAP32[$226>>2]|0;
    $228 = (($225) + 4)|0;
    $229 = $228;
    $230 = HEAP32[$229>>2]|0;
    $231 = $2;
    $232 = (($231) + 92|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (+($233>>>0));
    $235 = $234 / 2.0;
    $236 = (~~$235)>>>0;
    $237 = +Math_abs($235) >= 1.0 ? $235 > 0.0 ? (Math_min(+Math_floor($235 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($235 - +(~~$235 >>> 0)) / 4294967296.0) >>> 0 : 0;
    $238 = (_i64Add(($227|0),($230|0),($236|0),($237|0))|0);
    $239 = tempRet0;
    $240 = $2;
    $241 = (($240) + 112|0);
    $242 = $241;
    $243 = $242;
    HEAP32[$243>>2] = $238;
    $244 = (($242) + 4)|0;
    $245 = $244;
    HEAP32[$245>>2] = $239;
    $246 = $2;
    $247 = (($246) + 156|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $250 = $2;
     (_pn_post_frame($250,0,0,10584,$vararg_buffer1)|0);
     $251 = $2;
     $252 = (($251) + 156|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = $2;
     $255 = (($254) + 120|0);
     $256 = $255;
     $257 = $256;
     $258 = HEAP32[$257>>2]|0;
     $259 = (($256) + 4)|0;
     $260 = $259;
     $261 = HEAP32[$260>>2]|0;
     $262 = (_i64Add(($258|0),($261|0),($253|0),0)|0);
     $263 = tempRet0;
     $264 = $255;
     $265 = $264;
     HEAP32[$265>>2] = $262;
     $266 = (($264) + 4)|0;
     $267 = $266;
     HEAP32[$267>>2] = $263;
    }
   }
  }
 }
 if ((label|0) == 15) {
  $171 = $4;
  $172 = $171;
  $173 = HEAP32[$172>>2]|0;
  $174 = (($171) + 4)|0;
  $175 = $174;
  $176 = HEAP32[$175>>2]|0;
  $177 = $2;
  $178 = (($177) + 92|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (+($179>>>0));
  $181 = $180 / 2.0;
  $182 = (~~$181)>>>0;
  $183 = +Math_abs($181) >= 1.0 ? $181 > 0.0 ? (Math_min(+Math_floor($181 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($181 - +(~~$181 >>> 0)) / 4294967296.0) >>> 0 : 0;
  $184 = (_i64Add(($173|0),($176|0),($182|0),($183|0))|0);
  $185 = tempRet0;
  $186 = $2;
  $187 = (($186) + 112|0);
  $188 = $187;
  $189 = $188;
  HEAP32[$189>>2] = $184;
  $190 = (($188) + 4)|0;
  $191 = $190;
  HEAP32[$191>>2] = $185;
  $192 = $2;
  $193 = (($192) + 176|0);
  $194 = $193;
  $195 = $194;
  $196 = HEAP32[$195>>2]|0;
  $197 = (($194) + 4)|0;
  $198 = $197;
  $199 = HEAP32[$198>>2]|0;
  $200 = $2;
  $201 = (($200) + 120|0);
  $202 = $201;
  $203 = $202;
  HEAP32[$203>>2] = $196;
  $204 = (($202) + 4)|0;
  $205 = $204;
  HEAP32[$205>>2] = $199;
 }
 $268 = $timeout;
 $269 = $268;
 $270 = HEAP32[$269>>2]|0;
 $271 = (($268) + 4)|0;
 $272 = $271;
 $273 = HEAP32[$272>>2]|0;
 $274 = $2;
 $275 = (($274) + 112|0);
 $276 = $275;
 $277 = $276;
 $278 = HEAP32[$277>>2]|0;
 $279 = (($276) + 4)|0;
 $280 = $279;
 $281 = HEAP32[$280>>2]|0;
 $282 = (_pn_timestamp_min($270,$273,$278,$281)|0);
 $283 = tempRet0;
 $284 = $timeout;
 $285 = $284;
 HEAP32[$285>>2] = $282;
 $286 = (($284) + 4)|0;
 $287 = $286;
 HEAP32[$287>>2] = $283;
 $288 = $timeout;
 $289 = $288;
 $290 = HEAP32[$289>>2]|0;
 $291 = (($288) + 4)|0;
 $292 = $291;
 $293 = HEAP32[$292>>2]|0;
 tempRet0 = $293;
 STACKTOP = sp;return ($290|0);
}
function _pn_input_read_amqp($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (($5) + 240|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 do {
  if ($8) {
   $9 = $4;
   $10 = ($9>>>0)>(0);
   if ($10) {
    $11 = $1;
    (_pn_do_error($11,12160,12192,$vararg_buffer)|0);
    $0 = -1;
    break;
   } else {
    label = 5;
    break;
   }
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $12 = $1;
   $13 = (($12) + 240|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&1;
   if (!($15)) {
    $16 = $4;
    $17 = ($16|0)!=(0);
    if (!($17)) {
     $18 = $1;
     (_pn_do_error($18,12160,12216,$vararg_buffer1)|0);
     $0 = -1;
     break;
    }
   }
   $19 = $1;
   $20 = $3;
   $21 = $4;
   $22 = $1;
   $23 = (($22) + 246|0);
   $24 = (_pn_dispatcher_input($19,$20,$21,1,$23)|0);
   $n = $24;
   $25 = $n;
   $26 = ($25|0)<(0);
   if ($26) {
    $0 = -1;
    break;
   }
   $27 = $1;
   $28 = (($27) + 240|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&1;
   if ($30) {
    $0 = -1;
    break;
   } else {
    $31 = $n;
    $0 = $31;
    break;
   }
  }
 } while(0);
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _pn_output_write_amqp($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 243|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&1;
  if (!($12)) {
   $13 = $1;
   $14 = (_pn_process($13)|0);
   $err = $14;
   $15 = $err;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $1;
    $18 = $err;
    HEAP32[$vararg_buffer>>2] = $18;
    _pn_transport_logf($17,11872,$vararg_buffer);
    $19 = $1;
    $20 = (($19) + 243|0);
    HEAP8[$20>>0] = 1;
   }
  }
 }
 $21 = $1;
 $22 = (($21) + 156|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = $1;
  $26 = (($25) + 239|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&1;
  if ($28) {
   $0 = -1;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $29 = $1;
 $30 = $3;
 $31 = $4;
 $32 = (_pn_dispatcher_output($29,$30,$31)|0);
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _pn_io_layer_input_setup($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $bytes;
 $3 = $available;
 $4 = $0;
 $5 = $1;
 _pn_io_layer_setup($4,$5);
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 76|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = (FUNCTION_TABLE_iiiii[$11 & 127]($12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _pn_io_layer_output_setup($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $bytes;
 $3 = $available;
 $4 = $0;
 $5 = $1;
 _pn_io_layer_setup($4,$5);
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 76|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = (FUNCTION_TABLE_iiiii[$12 & 127]($13,$14,$15,$16)|0);
 STACKTOP = sp;return ($17|0);
}
function _pn_io_layer_input_autodetect($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eos = 0, $error = 0, $protocol = 0, $quoted = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $quoted = sp + 80|0;
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (_pn_transport_capacity($5)|0);
 $7 = ($6|0)==(-1);
 $8 = $7&1;
 $eos = $8;
 $9 = $eos;
 $10 = $9&1;
 if ($10) {
  $11 = $4;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $1;
   (_pn_do_error($13,12160,12440,$vararg_buffer)|0);
   $14 = $1;
   _pn_set_error_layer($14);
   $0 = -1;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 }
 $15 = $3;
 $16 = $4;
 $17 = (_pni_sniff_header($15,$16)|0);
 $protocol = $17;
 $18 = $1;
 $19 = (($18) + 228|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 4;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $1;
  $24 = $protocol;
  $25 = (_pni_protocol_name($24)|0);
  HEAP32[$vararg_buffer1>>2] = $25;
  _pn_transport_logf($23,12472,$vararg_buffer1);
 }
 $26 = $protocol;
 L9: do {
  switch ($26|0) {
  case 1:  {
   label = 29;
   break;
  }
  case 0:  {
   $101 = $eos;
   $102 = $101&1;
   if ($102) {
    $error = 12576;
    break L9;
   }
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
   break;
  }
  case 2:  {
   $27 = $1;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if (!($30)) {
    $31 = $1;
    (_pn_ssl($31)|0);
   }
   $32 = $2;
   $33 = $1;
   $34 = (($33) + 76|0);
   $35 = (($34) + ($32<<2)|0);
   HEAP32[$35>>2] = 15088;
   $36 = $2;
   $37 = (($36) + 1)|0;
   $38 = $1;
   $39 = (($38) + 76|0);
   $40 = (($39) + ($37<<2)|0);
   HEAP32[$40>>2] = 10112;
   $41 = HEAP32[15088>>2]|0;
   $42 = $1;
   $43 = $2;
   $44 = $3;
   $45 = $4;
   $46 = (FUNCTION_TABLE_iiiii[$41 & 127]($42,$43,$44,$45)|0);
   $0 = $46;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
   break;
  }
  case 5:  {
   $81 = $1;
   $82 = (($81) + 248|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&1;
   if (!($84)) {
    $85 = $1;
    $86 = (($85) + 247|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&1;
    if ($88) {
     $89 = $1;
     (_pn_do_error($89,12496,12528,$vararg_buffer6)|0);
     $90 = $1;
     _pn_set_error_layer($90);
     $0 = 8;
     $112 = $0;
     STACKTOP = sp;return ($112|0);
    }
   }
   $91 = $2;
   $92 = $1;
   $93 = (($92) + 76|0);
   $94 = (($93) + ($91<<2)|0);
   HEAP32[$94>>2] = 10048;
   $95 = $1;
   $96 = (($95) + 228|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & 2;
   $99 = ($98|0)!=(0);
   if ($99) {
    $100 = $1;
    HEAP32[$vararg_buffer8>>2] = 11904;
    _pn_transport_logf($100,12240,$vararg_buffer8);
   }
   $0 = 8;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
   break;
  }
  case 6:  {
   $error = 12624;
   break;
  }
  case 4:  {
   $61 = $1;
   $62 = (($61) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0|0);
   if (!($64)) {
    $65 = $1;
    (_pn_sasl($65)|0);
   }
   $66 = $2;
   $67 = $1;
   $68 = (($67) + 76|0);
   $69 = (($68) + ($66<<2)|0);
   HEAP32[$69>>2] = 14360;
   $70 = $2;
   $71 = (($70) + 1)|0;
   $72 = $1;
   $73 = (($72) + 76|0);
   $74 = (($73) + ($71<<2)|0);
   HEAP32[$74>>2] = 10112;
   $75 = $1;
   $76 = (($75) + 228|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & 2;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $1;
    HEAP32[$vararg_buffer3>>2] = 12488;
    _pn_transport_logf($80,12240,$vararg_buffer3);
   }
   $0 = 8;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
   break;
  }
  case 3:  {
   $47 = $1;
   $48 = (($47) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0|0);
   if (!($50)) {
    $51 = $1;
    (_pn_ssl($51)|0);
   }
   $52 = $2;
   $53 = $1;
   $54 = (($53) + 76|0);
   $55 = (($54) + ($52<<2)|0);
   HEAP32[$55>>2] = 15088;
   $56 = $2;
   $57 = (($56) + 1)|0;
   $58 = $1;
   $59 = (($58) + 76|0);
   $60 = (($59) + ($57<<2)|0);
   HEAP32[$60>>2] = 10112;
   $0 = 8;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
   break;
  }
  default: {
   label = 29;
  }
  }
 } while(0);
 if ((label|0) == 29) {
  $error = 12664;
 }
 $103 = $3;
 $104 = $4;
 (_pn_quote_data($quoted,1024,$103,$104)|0);
 $105 = $1;
 $106 = $error;
 $107 = $eos;
 $108 = $107&1;
 $109 = $108 ^ 1;
 $110 = $109 ? 10584 : 12280;
 HEAP32[$vararg_buffer11>>2] = $106;
 $vararg_ptr14 = (($vararg_buffer11) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $quoted;
 $vararg_ptr15 = (($vararg_buffer11) + 8|0);
 HEAP32[$vararg_ptr15>>2] = $110;
 (_pn_do_error($105,12160,12696,$vararg_buffer11)|0);
 $111 = $1;
 _pn_set_error_layer($111);
 $0 = 0;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function _pn_io_layer_output_null($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $bytes;
 $3 = $available;
 STACKTOP = sp;return 0;
}
function _pn_io_layer_input_passthru($transport,$layer,$data,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $data = $data|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $layer;
 $3 = $data;
 $4 = $available;
 $5 = $2;
 $6 = (($5) + 1)|0;
 $7 = ($6>>>0)<(3);
 if ($7) {
  $8 = $2;
  $9 = (($8) + 1)|0;
  $10 = $1;
  $11 = (($10) + 76|0);
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = $2;
  $17 = (($16) + 1)|0;
  $18 = $3;
  $19 = $4;
  $20 = (FUNCTION_TABLE_iiiii[$14 & 127]($15,$17,$18,$19)|0);
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _pn_io_layer_output_passthru($transport,$layer,$data,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $data = $data|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $layer;
 $3 = $data;
 $4 = $available;
 $5 = $2;
 $6 = (($5) + 1)|0;
 $7 = ($6>>>0)<(3);
 if ($7) {
  $8 = $2;
  $9 = (($8) + 1)|0;
  $10 = $1;
  $11 = (($10) + 76|0);
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = $2;
  $18 = (($17) + 1)|0;
  $19 = $3;
  $20 = $4;
  $21 = (FUNCTION_TABLE_iiiii[$15 & 127]($16,$18,$19,$20)|0);
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pn_io_layer_input_error($transport,$layer,$data,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $data = $data|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $data;
 $3 = $available;
 STACKTOP = sp;return -1;
}
function _pn_io_layer_output_error($transport,$layer,$data,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $data = $data|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $data;
 $3 = $available;
 STACKTOP = sp;return -1;
}
function _pn_transport_initialize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $layer = 0;
 var $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $transport = $1;
 $2 = $transport;
 $3 = (($2) + 236|0);
 HEAP8[$3>>0] = 0;
 $4 = $transport;
 $5 = (($4) + 208|0);
 HEAP32[$5>>2] = 0;
 $6 = $transport;
 $7 = (($6) + 200|0);
 HEAP32[$7>>2] = 16384;
 $8 = $transport;
 $9 = (($8) + 220|0);
 HEAP32[$9>>2] = 0;
 $10 = $transport;
 $11 = (($10) + 212|0);
 HEAP32[$11>>2] = 16384;
 $12 = $transport;
 HEAP32[$12>>2] = 110;
 $13 = $transport;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = $transport;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = (_pn_string(0)|0);
 $18 = $transport;
 $19 = (($18) + 136|0);
 HEAP32[$19>>2] = $17;
 $20 = (_pn_data(16)|0);
 $21 = $transport;
 $22 = (($21) + 140|0);
 HEAP32[$22>>2] = $20;
 $23 = (_pn_data(16)|0);
 $24 = $transport;
 $25 = (($24) + 144|0);
 HEAP32[$25>>2] = $23;
 $26 = (_pn_buffer(512)|0);
 $27 = $transport;
 $28 = (($27) + 148|0);
 HEAP32[$28>>2] = $26;
 $29 = $transport;
 $30 = (($29) + 192|0);
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = 0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $35 = $transport;
 $36 = (($35) + 184|0);
 $37 = $36;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = 0;
 $41 = $transport;
 $42 = (($41) + 12|0);
 HEAP32[$42>>2] = 0;
 $43 = (_pn_record()|0);
 $44 = $transport;
 $45 = (($44) + 224|0);
 HEAP32[$45>>2] = $43;
 $layer = 0;
 while(1) {
  $46 = $layer;
  $47 = ($46|0)<(3);
  if (!($47)) {
   break;
  }
  $48 = $layer;
  $49 = $transport;
  $50 = (($49) + 76|0);
  $51 = (($50) + ($48<<2)|0);
  HEAP32[$51>>2] = 0;
  $52 = $layer;
  $53 = (($52) + 1)|0;
  $layer = $53;
 }
 $54 = $transport;
 $55 = (($54) + 76|0);
 HEAP32[$55>>2] = 10096;
 $56 = $transport;
 $57 = (($56) + 237|0);
 HEAP8[$57>>0] = 0;
 $58 = $transport;
 $59 = (($58) + 238|0);
 HEAP8[$59>>0] = 0;
 $60 = $transport;
 $61 = (($60) + 239|0);
 HEAP8[$61>>0] = 0;
 $62 = $transport;
 $63 = (($62) + 240|0);
 HEAP8[$63>>0] = 0;
 $64 = $transport;
 $65 = (($64) + 241|0);
 HEAP8[$65>>0] = 0;
 $66 = $transport;
 $67 = (($66) + 242|0);
 HEAP8[$67>>0] = 0;
 $68 = $transport;
 $69 = (($68) + 16|0);
 HEAP32[$69>>2] = 0;
 $70 = $transport;
 $71 = (($70) + 20|0);
 HEAP32[$71>>2] = 0;
 $72 = $transport;
 $73 = (($72) + 40|0);
 HEAP32[$73>>2] = 0;
 $74 = $transport;
 $75 = (($74) + 44|0);
 HEAP32[$75>>2] = 0;
 $76 = $transport;
 $77 = (($76) + 232|0);
 HEAP16[$77>>1] = 0;
 $78 = $transport;
 $79 = (($78) + 234|0);
 HEAP16[$79>>1] = 0;
 $80 = $transport;
 $81 = (($80) + 88|0);
 HEAP32[$81>>2] = 0;
 $82 = $transport;
 $83 = (($82) + 96|0);
 $84 = $83;
 $85 = $84;
 HEAP32[$85>>2] = 0;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = 0;
 $88 = $transport;
 $89 = (($88) + 104|0);
 $90 = $89;
 $91 = $90;
 HEAP32[$91>>2] = 0;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = 0;
 $94 = $transport;
 $95 = (($94) + 92|0);
 HEAP32[$95>>2] = 0;
 $96 = $transport;
 $97 = (($96) + 112|0);
 $98 = $97;
 $99 = $98;
 HEAP32[$99>>2] = 0;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = 0;
 $102 = $transport;
 $103 = (($102) + 120|0);
 $104 = $103;
 $105 = $104;
 HEAP32[$105>>2] = 0;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = 0;
 $108 = (_pn_data(0)|0);
 $109 = $transport;
 $110 = (($109) + 24|0);
 HEAP32[$110>>2] = $108;
 $111 = (_pn_data(0)|0);
 $112 = $transport;
 $113 = (($112) + 28|0);
 HEAP32[$113>>2] = $111;
 $114 = (_pn_data(0)|0);
 $115 = $transport;
 $116 = (($115) + 32|0);
 HEAP32[$116>>2] = $114;
 $117 = (_pn_data(0)|0);
 $118 = $transport;
 $119 = (($118) + 36|0);
 HEAP32[$119>>2] = $117;
 $120 = $transport;
 $121 = (($120) + 48|0);
 _pn_condition_init($121);
 $122 = $transport;
 $123 = (($122) + 60|0);
 _pn_condition_init($123);
 $124 = (_pn_error()|0);
 $125 = $transport;
 $126 = (($125) + 72|0);
 HEAP32[$126>>2] = $124;
 $127 = HEAP32[608>>2]|0;
 $128 = (_pn_hash($127,0,0.75)|0);
 $129 = $transport;
 $130 = (($129) + 128|0);
 HEAP32[$130>>2] = $128;
 $131 = HEAP32[608>>2]|0;
 $132 = (_pn_hash($131,0,0.75)|0);
 $133 = $transport;
 $134 = (($133) + 132|0);
 HEAP32[$134>>2] = $132;
 $135 = $transport;
 $136 = (($135) + 168|0);
 $137 = $136;
 $138 = $137;
 HEAP32[$138>>2] = 0;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = 0;
 $141 = $transport;
 $142 = (($141) + 176|0);
 $143 = $142;
 $144 = $143;
 HEAP32[$144>>2] = 0;
 $145 = (($143) + 4)|0;
 $146 = $145;
 HEAP32[$146>>2] = 0;
 $147 = $transport;
 $148 = (($147) + 216|0);
 HEAP32[$148>>2] = 0;
 $149 = $transport;
 $150 = (($149) + 204|0);
 HEAP32[$150>>2] = 0;
 $151 = $transport;
 $152 = (($151) + 243|0);
 HEAP8[$152>>0] = 0;
 $153 = $transport;
 $154 = (($153) + 244|0);
 HEAP8[$154>>0] = 0;
 $155 = $transport;
 $156 = (($155) + 245|0);
 HEAP8[$156>>0] = 0;
 $157 = $transport;
 $158 = (($157) + 246|0);
 HEAP8[$158>>0] = 0;
 $159 = $transport;
 $160 = (($159) + 247|0);
 HEAP8[$160>>0] = 0;
 $161 = $transport;
 $162 = (($161) + 248|0);
 HEAP8[$162>>0] = 0;
 $163 = $transport;
 $164 = (($163) + 249|0);
 HEAP8[$164>>0] = 0;
 $165 = $transport;
 $166 = (($165) + 250|0);
 HEAP8[$166>>0] = 0;
 $167 = $transport;
 $168 = (($167) + 251|0);
 HEAP8[$168>>0] = 1;
 $169 = (_pn_env_bool(12376)|0);
 $170 = $169 ? 1 : 0;
 $171 = (_pn_env_bool(12392)|0);
 $172 = $171 ? 2 : 0;
 $173 = $170 | $172;
 $174 = (_pn_env_bool(12408)|0);
 $175 = $174 ? 4 : 0;
 $176 = $173 | $175;
 $177 = $transport;
 $178 = (($177) + 228|0);
 HEAP32[$178>>2] = $176;
 STACKTOP = sp;return;
}
function _pn_transport_incref($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $transport = $1;
 $2 = $transport;
 $3 = (($2) + 251|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $16 = $0;
  _pn_object_incref($16);
  STACKTOP = sp;return;
 }
 $6 = $transport;
 $7 = (($6) + 251|0);
 HEAP8[$7>>0] = 1;
 $8 = $transport;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $transport;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  (_pn_incref($14)|0);
 } else {
  $15 = $0;
  _pn_object_incref($15);
 }
 STACKTOP = sp;return;
}
function _pn_transport_finalize($object) {
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $object;
 $1 = $0;
 $transport = $1;
 $2 = $transport;
 $3 = (($2) + 251|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = $transport;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $transport;
   $11 = (($10) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_pn_refcount($12)|0);
   $14 = ($13|0)>(1);
   if ($14) {
    $15 = $transport;
    _pn_object_incref($15);
    $16 = $transport;
    $17 = (($16) + 251|0);
    HEAP8[$17>>0] = 0;
    $18 = $transport;
    $19 = (($18) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    (_pn_decref($20)|0);
    STACKTOP = sp;return;
   }
  }
 }
 $21 = $transport;
 (_pn_transport_unbind($21)|0);
 $22 = $transport;
 $23 = (_pn_refcount($22)|0);
 $24 = ($23|0)>(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = $transport;
 $26 = (($25) + 224|0);
 $27 = HEAP32[$26>>2]|0;
 _pn_free($27);
 $28 = $transport;
 _pn_ssl_free($28);
 $29 = $transport;
 _pn_sasl_free($29);
 $30 = $transport;
 $31 = (($30) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 _free($32);
 $33 = $transport;
 $34 = (($33) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 _free($35);
 $36 = $transport;
 $37 = (($36) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 _pn_free($38);
 $39 = $transport;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 _pn_free($41);
 $42 = $transport;
 $43 = (($42) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 _pn_free($44);
 $45 = $transport;
 $46 = (($45) + 36|0);
 $47 = HEAP32[$46>>2]|0;
 _pn_free($47);
 $48 = $transport;
 $49 = (($48) + 48|0);
 _pn_condition_tini($49);
 $50 = $transport;
 $51 = (($50) + 60|0);
 _pn_condition_tini($51);
 $52 = $transport;
 $53 = (($52) + 72|0);
 $54 = HEAP32[$53>>2]|0;
 _pn_error_free($54);
 $55 = $transport;
 $56 = (($55) + 128|0);
 $57 = HEAP32[$56>>2]|0;
 _pn_free($57);
 $58 = $transport;
 $59 = (($58) + 132|0);
 $60 = HEAP32[$59>>2]|0;
 _pn_free($60);
 $61 = $transport;
 $62 = (($61) + 220|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = $transport;
  $66 = (($65) + 220|0);
  $67 = HEAP32[$66>>2]|0;
  _free($67);
 }
 $68 = $transport;
 $69 = (($68) + 208|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $72 = $transport;
  $73 = (($72) + 208|0);
  $74 = HEAP32[$73>>2]|0;
  _free($74);
 }
 $75 = $transport;
 $76 = (($75) + 136|0);
 $77 = HEAP32[$76>>2]|0;
 _pn_free($77);
 $78 = $transport;
 $79 = (($78) + 140|0);
 $80 = HEAP32[$79>>2]|0;
 _pn_data_free($80);
 $81 = $transport;
 $82 = (($81) + 144|0);
 $83 = HEAP32[$82>>2]|0;
 _pn_data_free($83);
 $84 = $transport;
 $85 = (($84) + 148|0);
 $86 = HEAP32[$85>>2]|0;
 _pn_buffer_free($86);
 $87 = $transport;
 $88 = (($87) + 160|0);
 $89 = HEAP32[$88>>2]|0;
 _free($89);
 STACKTOP = sp;return;
}
function _pn_input_read_sasl_header($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eos = 0, $protocol = 0, $quoted = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $quoted = sp + 48|0;
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (_pn_transport_capacity($5)|0);
 $7 = ($6|0)==(-1);
 $8 = $7&1;
 $eos = $8;
 $9 = $3;
 $10 = $4;
 $11 = (_pni_sniff_header($9,$10)|0);
 $protocol = $11;
 $12 = $protocol;
 do {
  if ((($12|0) == 0)) {
   $33 = $eos;
   $34 = $33&1;
   if ($34) {
    break;
   }
   $0 = 0;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else if ((($12|0) == 4)) {
   $13 = $2;
   $14 = $1;
   $15 = (($14) + 76|0);
   $16 = (($15) + ($13<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(14376|0);
   if ($18) {
    $19 = $2;
    $20 = $1;
    $21 = (($20) + 76|0);
    $22 = (($21) + ($19<<2)|0);
    HEAP32[$22>>2] = 14392;
   } else {
    $23 = $2;
    $24 = $1;
    $25 = (($24) + 76|0);
    $26 = (($25) + ($23<<2)|0);
    HEAP32[$26>>2] = 14360;
   }
   $27 = $1;
   $28 = (($27) + 228|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 2;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $1;
    HEAP32[$vararg_buffer>>2] = 14752;
    _pn_transport_logf($32,14952,$vararg_buffer);
   }
   $0 = 8;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $35 = $1;
 $36 = (($35) + 239|0);
 HEAP8[$36>>0] = 1;
 $37 = $3;
 $38 = $4;
 (_pn_quote_data($quoted,1024,$37,$38)|0);
 $39 = $1;
 $40 = $protocol;
 $41 = (_pni_protocol_name($40)|0);
 $42 = $eos;
 $43 = $42&1;
 $44 = $43 ^ 1;
 $45 = $44 ? 14672 : 14992;
 HEAP32[$vararg_buffer1>>2] = 14752;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $41;
 $vararg_ptr5 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $quoted;
 $vararg_ptr6 = (($vararg_buffer1) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $45;
 (_pn_do_error($39,14896,14960,$vararg_buffer1)|0);
 $46 = $1;
 _pn_set_error_layer($46);
 $0 = -1;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _pn_output_write_sasl_header($transport,$layer,$bytes,$size) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $layer;
 $2 = $bytes;
 $3 = $size;
 $4 = $0;
 $5 = (($4) + 228|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  HEAP32[$vararg_buffer>>2] = 14752;
  _pn_transport_logf($9,14744,$vararg_buffer);
 }
 $10 = $3;
 $11 = ($10>>>0)>=(8);
 if (!($11)) {
  ___assert_fail((14760|0),(14784|0),132,(14848|0));
  // unreachable;
 }
 $12 = $2;
 _memmove(($12|0),(14880|0),8)|0;
 $13 = $1;
 $14 = $0;
 $15 = (($14) + 76|0);
 $16 = (($15) + ($13<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(14360|0);
 if ($18) {
  $19 = $1;
  $20 = $0;
  $21 = (($20) + 76|0);
  $22 = (($21) + ($19<<2)|0);
  HEAP32[$22>>2] = 14392;
  STACKTOP = sp;return 8;
 } else {
  $23 = $1;
  $24 = $0;
  $25 = (($24) + 76|0);
  $26 = (($25) + ($23<<2)|0);
  HEAP32[$26>>2] = 14376;
  STACKTOP = sp;return 8;
 }
 return (0)|0;
}
function _pn_input_read_sasl($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eos = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (_pn_transport_capacity($5)|0);
 $7 = ($6|0)==(-1);
 $8 = $7&1;
 $eos = $8;
 $9 = $eos;
 $10 = $9&1;
 if ($10) {
  $11 = $1;
  $12 = (($11) + 239|0);
  HEAP8[$12>>0] = 1;
  $13 = $1;
  (_pn_do_error($13,14896,14928,$vararg_buffer)|0);
  $14 = $1;
  _pn_set_error_layer($14);
  $0 = -1;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 $15 = $1;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&1;
 if (!($20)) {
  $21 = $1;
  $22 = $3;
  $23 = $4;
  $24 = (_pn_sasl_input($21,$22,$23)|0);
  $n = $24;
  $25 = $n;
  $26 = ($25|0)!=(-1);
  if ($26) {
   $27 = $n;
   $0 = $27;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
  $28 = $1;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 53|0);
  HEAP8[$31>>0] = 1;
  $32 = $1;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 54|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&1;
  if ($37) {
   $38 = $2;
   $39 = $1;
   $40 = (($39) + 76|0);
   $41 = (($40) + ($38<<2)|0);
   HEAP32[$41>>2] = 10128;
  }
 }
 $42 = HEAP32[10128>>2]|0;
 $43 = $1;
 $44 = $2;
 $45 = $3;
 $46 = $4;
 $47 = (FUNCTION_TABLE_iiiii[$42 & 127]($43,$44,$45,$46)|0);
 $0 = $47;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _pn_output_write_sasl($transport,$layer,$bytes,$available) {
 $transport = $transport|0;
 $layer = $layer|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $layer;
 $3 = $bytes;
 $4 = $available;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 54|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 if (!($10)) {
  $11 = $1;
  $12 = (($11) + 239|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&1;
  if ($14) {
   $n = -1;
  } else {
   $15 = $1;
   $16 = $3;
   $17 = $4;
   $18 = (_pn_sasl_output($15,$16,$17)|0);
   $n = $18;
  }
  $19 = $n;
  $20 = ($19|0)!=(-1);
  if ($20) {
   $21 = $n;
   $0 = $21;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
  $22 = $1;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 54|0);
  HEAP8[$25>>0] = 1;
  $26 = $1;
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 53|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&1;
  if ($31) {
   $32 = $2;
   $33 = $1;
   $34 = (($33) + 76|0);
   $35 = (($34) + ($32<<2)|0);
   HEAP32[$35>>2] = 10128;
  }
 }
 $36 = HEAP32[((10128 + 4|0))>>2]|0;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 $40 = $4;
 $41 = (FUNCTION_TABLE_iiiii[$36 & 127]($37,$38,$39,$40)|0);
 $0 = $41;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _pni_map_allocate($map) {
 $map = $map|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3<<4;
 $5 = (_malloc($4)|0);
 $6 = $0;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $42 = $0;
  $43 = (($42) + 20|0);
  HEAP32[$43>>2] = 0;
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $0;
  $19 = (($18) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<4)|0);
  HEAP32[$21>>2] = 0;
  $22 = $i;
  $23 = $0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<4)|0);
  $27 = (($26) + 4|0);
  HEAP32[$27>>2] = 0;
  $28 = $i;
  $29 = $0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<4)|0);
  $33 = (($32) + 8|0);
  HEAP32[$33>>2] = 0;
  $34 = $i;
  $35 = $0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<4)|0);
  $39 = (($38) + 12|0);
  HEAP8[$39>>0] = 0;
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $42 = $0;
 $43 = (($42) + 20|0);
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function _pni_map_entry($map,$key,$pprev,$create) {
 $map = $map|0;
 $key = $key|0;
 $pprev = $pprev|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $empty = 0, $entry = 0, $hashcode = 0, $i = 0, $idx = 0;
 var $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $map;
 $2 = $key;
 $3 = $pprev;
 $5 = $create&1;
 $4 = $5;
 $6 = $1;
 $7 = (($6) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (FUNCTION_TABLE_ii[$8 & 127]($9)|0);
 $hashcode = $10;
 $11 = $hashcode;
 $12 = $1;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11>>>0) % ($14>>>0))&-1;
 $16 = $1;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($15<<4)|0);
 $entry = $19;
 $prev = 0;
 $20 = $entry;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $4;
  $26 = $25&1;
  if ($26) {
   $27 = $entry;
   $28 = (($27) + 12|0);
   HEAP8[$28>>0] = 2;
   $29 = $2;
   $30 = $entry;
   HEAP32[$30>>2] = $29;
   $31 = $1;
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   (_pn_class_incref($32,$33)|0);
   $34 = $1;
   $35 = (($34) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$35>>2] = $37;
   $38 = $entry;
   $0 = $38;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  } else {
   $0 = 0;
   $134 = $0;
   STACKTOP = sp;return ($134|0);
  }
 }
 while(1) {
  $39 = $1;
  $40 = (($39) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $entry;
  $43 = HEAP32[$42>>2]|0;
  $44 = $2;
  $45 = (FUNCTION_TABLE_iii[$41 & 127]($43,$44)|0);
  if ($45) {
   label = 7;
   break;
  }
  $51 = $entry;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(2);
  if ($55) {
   break;
  }
  $56 = $entry;
  $prev = $56;
  $57 = $entry;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = (($60) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59<<4)|0);
  $entry = $63;
 }
 if ((label|0) == 7) {
  $46 = $3;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   $48 = $prev;
   $49 = $3;
   HEAP32[$49>>2] = $48;
  }
  $50 = $entry;
  $0 = $50;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $64 = $4;
 $65 = $64&1;
 if (!($65)) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $66 = $1;
 $67 = $1;
 $68 = (($67) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 1)|0;
 $71 = (_pni_map_ensure($66,$70)|0);
 if ($71) {
  $72 = $1;
  $73 = $2;
  $74 = $3;
  $75 = $4;
  $76 = $75&1;
  $77 = (_pni_map_entry($72,$73,$74,$76)|0);
  $0 = $77;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $empty = 0;
 $i = 0;
 while(1) {
  $78 = $i;
  $79 = $1;
  $80 = (($79) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($78>>>0)<($81>>>0);
  if (!($82)) {
   break;
  }
  $83 = $1;
  $84 = (($83) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $i;
  $87 = (($85) - ($86))|0;
  $88 = (($87) - 1)|0;
  $idx = $88;
  $89 = $idx;
  $90 = $1;
  $91 = (($90) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($89<<4)|0);
  $94 = (($93) + 12|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = ($96|0)==(0);
  if ($97) {
   label = 20;
   break;
  }
  $99 = $i;
  $100 = (($99) + 1)|0;
  $i = $100;
 }
 if ((label|0) == 20) {
  $98 = $idx;
  $empty = $98;
 }
 $101 = $empty;
 $102 = $entry;
 $103 = (($102) + 8|0);
 HEAP32[$103>>2] = $101;
 $104 = $entry;
 $105 = (($104) + 12|0);
 HEAP8[$105>>0] = 1;
 $106 = $empty;
 $107 = $1;
 $108 = (($107) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) + ($106<<4)|0);
 $111 = (($110) + 12|0);
 HEAP8[$111>>0] = 2;
 $112 = $2;
 $113 = $empty;
 $114 = $1;
 $115 = (($114) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + ($113<<4)|0);
 HEAP32[$117>>2] = $112;
 $118 = $1;
 $119 = HEAP32[$118>>2]|0;
 $120 = $2;
 (_pn_class_incref($119,$120)|0);
 $121 = $3;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = $entry;
  $124 = $3;
  HEAP32[$124>>2] = $123;
 }
 $125 = $1;
 $126 = (($125) + 20|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + 1)|0;
 HEAP32[$126>>2] = $128;
 $129 = $empty;
 $130 = $1;
 $131 = (($130) + 8|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + ($129<<4)|0);
 $0 = $133;
 $134 = $0;
 STACKTOP = sp;return ($134|0);
}
function _pni_identity_hashcode($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _pni_identity_equals($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function _pni_record_find($record,$key) {
 $record = $record|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $field = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $record;
 $2 = $key;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3>>>0)<($5>>>0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + (($7*12)|0)|0);
  $field = $11;
  $12 = $field;
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  if ($15) {
   label = 4;
   break;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 if ((label|0) == 4) {
  $16 = $field;
  $0 = $16;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _pni_record_create($record) {
 $record = $record|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $field = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $record;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)>($8>>>0);
 if ($9) {
  $10 = $0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14*12)|0;
  $16 = (_realloc($12,$15)|0);
  $17 = $0;
  $18 = (($17) + 8|0);
  HEAP32[$18>>2] = $16;
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = (($21) + 4|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 $26 = $0;
 $27 = (($26) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + (($25*12)|0)|0);
 $field = $29;
 $30 = $field;
 HEAP32[$30>>2] = 0;
 $31 = $field;
 $32 = (($31) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = $field;
 $34 = (($33) + 8|0);
 HEAP32[$34>>2] = 0;
 $35 = $field;
 STACKTOP = sp;return ($35|0);
}
function _pn_buffer_rotate($buf,$sz) {
 $buf = $buf|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $t = 0, $tmp = 0, $tp = 0;
 var $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $sz;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $c = 0;
 $v = 0;
 while(1) {
  $4 = $c;
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $v;
  $t = $8;
  $9 = $v;
  $10 = $1;
  $11 = (($9) + ($10))|0;
  $tp = $11;
  $12 = $v;
  $13 = $0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  $17 = HEAP8[$16>>0]|0;
  $tmp = $17;
  $18 = $c;
  $19 = (($18) + 1)|0;
  $c = $19;
  while(1) {
   $20 = $tp;
   $21 = $v;
   $22 = ($20|0)!=($21|0);
   if (!($22)) {
    break;
   }
   $23 = $tp;
   $24 = $0;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($23)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $t;
   $30 = $0;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29)|0);
   HEAP8[$33>>0] = $28;
   $34 = $tp;
   $t = $34;
   $35 = $1;
   $36 = $tp;
   $37 = (($36) + ($35))|0;
   $tp = $37;
   $38 = $tp;
   $39 = $0;
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38>>>0)>=($40>>>0);
   if ($41) {
    $42 = $0;
    $43 = HEAP32[$42>>2]|0;
    $44 = $tp;
    $45 = (($44) - ($43))|0;
    $tp = $45;
   }
   $46 = $c;
   $47 = (($46) + 1)|0;
   $c = $47;
  }
  $48 = $tmp;
  $49 = $t;
  $50 = $0;
  $51 = (($50) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($49)|0);
  HEAP8[$53>>0] = $48;
  $54 = $v;
  $55 = (($54) + 1)|0;
  $v = $55;
 }
 STACKTOP = sp;return;
}
function _pn_i_read32($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (($4) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = (($8) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $0;
 $13 = (($12) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $d = $15;
 $16 = $a;
 $17 = $16 << 24;
 $18 = $b;
 $19 = $18 << 16;
 $20 = $17 | $19;
 $21 = $c;
 $22 = $21 << 8;
 $23 = $20 | $22;
 $24 = $d;
 $25 = $23 | $24;
 $r = $25;
 $26 = $r;
 STACKTOP = sp;return ($26|0);
}
function _pn_i_read16($bytes) {
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $r = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (($4) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $a;
 $9 = $8&65535;
 $10 = $9 << 8;
 $11 = $b;
 $12 = $11&65535;
 $13 = $10 | $12;
 $14 = $13&65535;
 $r = $14;
 $15 = $r;
 STACKTOP = sp;return ($15|0);
}
function _pn_i_write32($bytes,$value) {
 $bytes = $bytes|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $value;
 $2 = $1;
 $3 = $2 >>> 24;
 $4 = 255 & $3;
 $5 = $4&255;
 $6 = $0;
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = $7 >>> 16;
 $9 = 255 & $8;
 $10 = $9&255;
 $11 = $0;
 $12 = (($11) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 >>> 8;
 $15 = 255 & $14;
 $16 = $15&255;
 $17 = $0;
 $18 = (($17) + 2|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = 255 & $19;
 $21 = $20&255;
 $22 = $0;
 $23 = (($22) + 3|0);
 HEAP8[$23>>0] = $21;
 STACKTOP = sp;return;
}
function _pn_i_write16($bytes,$value) {
 $bytes = $bytes|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bytes;
 $1 = $value;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 >> 8;
 $5 = 255 & $4;
 $6 = $5&255;
 $7 = $0;
 HEAP8[$7>>0] = $6;
 $8 = $1;
 $9 = $8&65535;
 $10 = 255 & $9;
 $11 = $10&255;
 $12 = $0;
 $13 = (($12) + 1|0);
 HEAP8[$13>>0] = $11;
 STACKTOP = sp;return;
}
function _pn_data_node($data,$nd) {
 $data = $data|0;
 $nd = $nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $nd;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = $7&65535;
  $9 = (($6) + ($8<<6)|0);
  $10 = (($9) + -64|0);
  $11 = $10;
  STACKTOP = sp;return ($11|0);
 } else {
  $11 = 0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _pni_node_fields($data,$node) {
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $descriptor = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $node;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $5 = $2;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(22);
 if ($8) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $9 = $1;
 $10 = $2;
 $11 = (($10) + 48|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (_pn_data_node($9,$12)|0);
 $descriptor = $13;
 $14 = $descriptor;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $descriptor;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(10);
  if (!($19)) {
   $20 = $descriptor;
   $21 = (($20) + 16|0);
   $22 = (($21) + 8|0);
   $23 = $22;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28>>>0)>(0);
   $30 = ($25>>>0)>=(16);
   $31 = ($28|0)==(0);
   $32 = $31 & $30;
   $33 = $29 | $32;
   if ($33) {
    $34 = $descriptor;
    $35 = (($34) + 16|0);
    $36 = (($35) + 8|0);
    $37 = $36;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42>>>0)<(0);
    $44 = ($39>>>0)<=(120);
    $45 = ($42|0)==(0);
    $46 = $45 & $44;
    $47 = $43 | $46;
    if ($47) {
     $48 = $descriptor;
     $49 = (($48) + 16|0);
     $50 = (($49) + 8|0);
     $51 = $50;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $54 = (($51) + 4)|0;
     $55 = $54;
     $56 = HEAP32[$55>>2]|0;
     $57 = (_i64Subtract(($53|0),($56|0),16,0)|0);
     $58 = tempRet0;
     $59 = (4232 + (($57*3)|0)|0);
     $f = $59;
     $60 = $f;
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62|0)!=(0);
     if ($63) {
      $64 = $f;
      $65 = $64;
     } else {
      $65 = 0;
     }
     $0 = $65;
     $66 = $0;
     STACKTOP = sp;return ($66|0);
    }
   }
   $0 = 0;
   $66 = $0;
   STACKTOP = sp;return ($66|0);
  }
 }
 $0 = 0;
 $66 = $0;
 STACKTOP = sp;return ($66|0);
}
function _pni_node_index($data,$node) {
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $node;
 $count = 0;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $1;
  $6 = (($5) + 46|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = (_pn_data_node($4,$7)|0);
  $1 = $8;
  $9 = $count;
  $10 = (($9) + 1)|0;
  $count = $10;
 }
 $11 = $count;
 $12 = (($11) - 1)|0;
 STACKTOP = sp;return ($12|0);
}
function _pni_atom_init($atom,$type) {
 $atom = $atom|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $atom;
 $1 = $type;
 $2 = $0;
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 $3 = $1;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function _pn_scan_next($data,$type,$suspend) {
 $data = $data|0;
 $type = $type|0;
 $suspend = $suspend|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $found = 0;
 var $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $type;
 $4 = $suspend&1;
 $3 = $4;
 $5 = $3;
 $6 = $5&1;
 do {
  if ($6) {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
  } else {
   $7 = $1;
   $8 = (_pn_data_next($7)|0);
   $9 = $8&1;
   $found = $9;
   $10 = $found;
   $11 = $10&1;
   if ($11) {
    $12 = $1;
    $13 = (_pn_data_type($12)|0);
    $14 = $2;
    HEAP32[$14>>2] = $13;
    $$expand_i1_val2 = 1;
    $0 = $$expand_i1_val2;
    break;
   }
   $15 = $1;
   $16 = $1;
   $17 = (($16) + 28|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = (_pn_data_node($15,$18)|0);
   $parent = $19;
   $20 = $parent;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $parent;
    $23 = (($22) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(22);
    if ($25) {
     $26 = $1;
     (_pn_data_exit($26)|0);
     $27 = $1;
     $28 = $2;
     $29 = $3;
     $30 = $29&1;
     $31 = (_pn_scan_next($27,$28,$30)|0);
     $$expand_i1_val4 = $31&1;
     $0 = $$expand_i1_val4;
     break;
    }
   }
   $32 = $2;
   HEAP32[$32>>2] = -1;
   $$expand_i1_val6 = 0;
   $0 = $$expand_i1_val6;
  }
 } while(0);
 $$pre_trunc = $0;
 $33 = $$pre_trunc&1;
 STACKTOP = sp;return ($33|0);
}
function _pn_decoder_remaining($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $decoder;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _pn_decoder_readf8($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $decoder;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $r = $4;
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1|0);
 HEAP32[$6>>2] = $8;
 $9 = $r;
 STACKTOP = sp;return ($9|0);
}
function _pn_decoder_readf16($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $decoder;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $a = $5;
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $b = $11;
 $12 = $a;
 $13 = $12&65535;
 $14 = $13 << 8;
 $15 = $b;
 $16 = $15&65535;
 $17 = $14 | $16;
 $18 = $17&65535;
 $r = $18;
 $19 = $0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 2|0);
 HEAP32[$20>>2] = $22;
 $23 = $r;
 STACKTOP = sp;return ($23|0);
}
function _pn_decoder_readf32($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, $d = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $decoder;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $a = $5;
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $b = $11;
 $12 = $0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $c = $17;
 $18 = $0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $d = $23;
 $24 = $a;
 $25 = $24 << 24;
 $26 = $b;
 $27 = $26 << 16;
 $28 = $25 | $27;
 $29 = $c;
 $30 = $29 << 8;
 $31 = $28 | $30;
 $32 = $d;
 $33 = $31 | $32;
 $r = $33;
 $34 = $0;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 4|0);
 HEAP32[$35>>2] = $37;
 $38 = $r;
 STACKTOP = sp;return ($38|0);
}
function _pn_decoder_readf64($decoder) {
 $decoder = $decoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 8|0;
 $b = sp;
 $0 = $decoder;
 $1 = $0;
 $2 = (_pn_decoder_readf32($1)|0);
 $3 = $a;
 $4 = $3;
 HEAP32[$4>>2] = $2;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = (_pn_decoder_readf32($7)|0);
 $9 = $b;
 $10 = $9;
 HEAP32[$10>>2] = $8;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = $a;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $b;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $15 | $24;
 tempRet0 = $25;
 STACKTOP = sp;return ($21|0);
}
function _pn_decoder_readf128($decoder,$dst) {
 $decoder = $decoder|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $decoder;
 $1 = $dst;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _memmove(($2|0),($5|0),16)|0;
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 16|0);
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function _pn_code2type($code) {
 $code = $code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $code;
 $2 = $1;
 $3 = $2&255;
 do {
  switch ($3|0) {
  case 0:  {
   $0 = -6;
   break;
  }
  case 148:  {
   $0 = 17;
   break;
  }
  case 132:  {
   $0 = 16;
   break;
  }
  case 152:  {
   $0 = 18;
   break;
  }
  case 208: case 192: case 69:  {
   $0 = 24;
   break;
  }
  case 96:  {
   $0 = 5;
   break;
  }
  case 179: case 163:  {
   $0 = 21;
   break;
  }
  case 97:  {
   $0 = 6;
   break;
  }
  case 114:  {
   $0 = 13;
   break;
  }
  case 177: case 161:  {
   $0 = 20;
   break;
  }
  case 115:  {
   $0 = 9;
   break;
  }
  case 112: case 82: case 67:  {
   $0 = 7;
   break;
  }
  case 80:  {
   $0 = 3;
   break;
  }
  case 85: case 129:  {
   $0 = 11;
   break;
  }
  case 116:  {
   $0 = 15;
   break;
  }
  case 240: case 224:  {
   $0 = 23;
   break;
  }
  case 113: case 84:  {
   $0 = 8;
   break;
  }
  case 176: case 160:  {
   $0 = 19;
   break;
  }
  case 81:  {
   $0 = 4;
   break;
  }
  case 64:  {
   $0 = 1;
   break;
  }
  case 130:  {
   $0 = 14;
   break;
  }
  case 128: case 83: case 68:  {
   $0 = 10;
   break;
  }
  case 131:  {
   $0 = 12;
   break;
  }
  case 209: case 193:  {
   $0 = 25;
   break;
  }
  case 86: case 66: case 65:  {
   $0 = 2;
   break;
  }
  default: {
   $0 = -6;
  }
  }
 } while(0);
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _pni_encoder_enter($ctx,$data,$node) {
 $ctx = $ctx|0;
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $atom = 0, $c = 0, $code = 0, $encoder = 0, $parent = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $c = sp;
 $1 = $ctx;
 $2 = $data;
 $3 = $node;
 $4 = $1;
 $encoder = $4;
 $5 = $2;
 $6 = $3;
 $7 = (($6) + 50|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (_pn_data_node234($5,$8)|0);
 $parent = $9;
 $10 = $3;
 $11 = (($10) + 16|0);
 $atom = $11;
 $12 = $2;
 $13 = $parent;
 $14 = $3;
 $15 = (_pn_is_in_array($12,$13,$14)|0);
 if ($15) {
  $16 = $encoder;
  $17 = $parent;
  $18 = (($17) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_pn_type2code($16,$19)|0);
  $code = $20;
  $21 = $2;
  $22 = $parent;
  $23 = $3;
  $24 = (_pn_is_first_in_array($21,$22,$23)|0);
  if ($24) {
   $25 = $encoder;
   $26 = $code;
   _pn_encoder_writef8($25,$26);
  }
 } else {
  $27 = $encoder;
  $28 = $3;
  $29 = (_pn_node2code($27,$28)|0);
  $code = $29;
  $30 = $encoder;
  $31 = $code;
  _pn_encoder_writef8($30,$31);
 }
 $32 = $code;
 $33 = $32&255;
 do {
  switch ($33|0) {
  case 161:  {
   $165 = $encoder;
   $166 = $atom;
   $167 = (($166) + 8|0);
   _pn_encoder_writev8($165,$167);
   $0 = 0;
   break;
  }
  case 148:  {
   $153 = $encoder;
   $154 = $atom;
   $155 = (($154) + 8|0);
   _pn_encoder_writef128($153,$155);
   $0 = 0;
   break;
  }
  case 67:  {
   $0 = 0;
   break;
  }
  case 176:  {
   $162 = $encoder;
   $163 = $atom;
   $164 = (($163) + 8|0);
   _pn_encoder_writev32($162,$164);
   $0 = 0;
   break;
  }
  case 163:  {
   $171 = $encoder;
   $172 = $atom;
   $173 = (($172) + 8|0);
   _pn_encoder_writev8($171,$173);
   $0 = 0;
   break;
  }
  case 128:  {
   $78 = $encoder;
   $79 = $atom;
   $80 = (($79) + 8|0);
   $81 = $80;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   _pn_encoder_writef64($78,$83,$86);
   $0 = 0;
   break;
  }
  case 112:  {
   $61 = $encoder;
   $62 = $atom;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   _pn_encoder_writef32($61,$64);
   $0 = 0;
   break;
  }
  case 209: case 208:  {
   $207 = $encoder;
   $208 = (($207) + 8|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $3;
   HEAP32[$210>>2] = $209;
   $211 = $3;
   $212 = (($211) + 56|0);
   HEAP8[$212>>0] = 0;
   $213 = $encoder;
   $214 = (($213) + 8|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + 4|0);
   HEAP32[$214>>2] = $216;
   $217 = $encoder;
   $218 = $3;
   $219 = (($218) + 52|0);
   $220 = HEAP16[$219>>1]|0;
   $221 = $220&65535;
   _pn_encoder_writef32($217,$221);
   $0 = 0;
   break;
  }
  case 66: case 65: case 64: case 0:  {
   $0 = 0;
   break;
  }
  case 113:  {
   $70 = $encoder;
   $71 = $atom;
   $72 = (($71) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   _pn_encoder_writef32($70,$73);
   $0 = 0;
   break;
  }
  case 160:  {
   $159 = $encoder;
   $160 = $atom;
   $161 = (($160) + 8|0);
   _pn_encoder_writev8($159,$161);
   $0 = 0;
   break;
  }
  case 132:  {
   $144 = $encoder;
   $145 = $atom;
   $146 = (($145) + 8|0);
   $147 = $146;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   _pn_encoder_writef64($144,$149,$152);
   $0 = 0;
   break;
  }
  case 240:  {
   $177 = $encoder;
   $178 = (($177) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $3;
   HEAP32[$180>>2] = $179;
   $181 = $3;
   $182 = (($181) + 56|0);
   HEAP8[$182>>0] = 0;
   $183 = $encoder;
   $184 = (($183) + 8|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + 4|0);
   HEAP32[$184>>2] = $186;
   $187 = $encoder;
   $188 = $3;
   $189 = (($188) + 54|0);
   $190 = HEAP8[$189>>0]|0;
   $191 = $190&1;
   if ($191) {
    $192 = $3;
    $193 = (($192) + 52|0);
    $194 = HEAP16[$193>>1]|0;
    $195 = $194&65535;
    $196 = (($195) - 1)|0;
    $201 = $196;
   } else {
    $197 = $3;
    $198 = (($197) + 52|0);
    $199 = HEAP16[$198>>1]|0;
    $200 = $199&65535;
    $201 = $200;
   }
   _pn_encoder_writef32($187,$201);
   $202 = $3;
   $203 = (($202) + 54|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&1;
   if ($205) {
    $206 = $encoder;
    _pn_encoder_writef8($206,0);
   }
   $0 = 0;
   break;
  }
  case 129:  {
   $97 = $encoder;
   $98 = $atom;
   $99 = (($98) + 8|0);
   $100 = $99;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   _pn_encoder_writef64($97,$102,$105);
   $0 = 0;
   break;
  }
  case 152:  {
   $156 = $encoder;
   $157 = $atom;
   $158 = (($157) + 8|0);
   _pn_encoder_writef128($156,$158);
   $0 = 0;
   break;
  }
  case 86:  {
   $34 = $encoder;
   $35 = $atom;
   $36 = (($35) + 8|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&1;
   $39 = $38&1;
   _pn_encoder_writef8($34,$39);
   $0 = 0;
   break;
  }
  case 115:  {
   $74 = $encoder;
   $75 = $atom;
   $76 = (($75) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   _pn_encoder_writef32($74,$77);
   $0 = 0;
   break;
  }
  case 177:  {
   $168 = $encoder;
   $169 = $atom;
   $170 = (($169) + 8|0);
   _pn_encoder_writev32($168,$170);
   $0 = 0;
   break;
  }
  case 179:  {
   $174 = $encoder;
   $175 = $atom;
   $176 = (($175) + 8|0);
   _pn_encoder_writev32($174,$176);
   $0 = 0;
   break;
  }
  case 83:  {
   $87 = $encoder;
   $88 = $atom;
   $89 = (($88) + 8|0);
   $90 = $89;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = (($90) + 4)|0;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = $92&255;
   _pn_encoder_writef8($87,$96);
   $0 = 0;
   break;
  }
  case 82:  {
   $56 = $encoder;
   $57 = $atom;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59&255;
   _pn_encoder_writef8($56,$60);
   $0 = 0;
   break;
  }
  case 130:  {
   $130 = $atom;
   $131 = (($130) + 8|0);
   $132 = +HEAPF64[$131>>3];
   HEAPF64[$c>>3] = $132;
   $133 = $encoder;
   $134 = $c;
   $135 = $134;
   $136 = HEAP32[$135>>2]|0;
   $137 = (($134) + 4)|0;
   $138 = $137;
   $139 = HEAP32[$138>>2]|0;
   _pn_encoder_writef64($133,$136,$139);
   $0 = 0;
   break;
  }
  case 131:  {
   $116 = $encoder;
   $117 = $atom;
   $118 = (($117) + 8|0);
   $119 = $118;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($119) + 4)|0;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   _pn_encoder_writef64($116,$121,$124);
   $0 = 0;
   break;
  }
  case 81:  {
   $44 = $encoder;
   $45 = $atom;
   $46 = (($45) + 8|0);
   $47 = HEAP8[$46>>0]|0;
   _pn_encoder_writef8($44,$47);
   $0 = 0;
   break;
  }
  case 80:  {
   $40 = $encoder;
   $41 = $atom;
   $42 = (($41) + 8|0);
   $43 = HEAP8[$42>>0]|0;
   _pn_encoder_writef8($40,$43);
   $0 = 0;
   break;
  }
  case 114:  {
   $125 = $atom;
   $126 = (($125) + 8|0);
   $127 = +HEAPF32[$126>>2];
   HEAPF32[$c>>2] = $127;
   $128 = $encoder;
   $129 = HEAP32[$c>>2]|0;
   _pn_encoder_writef32($128,$129);
   $0 = 0;
   break;
  }
  case 96:  {
   $48 = $encoder;
   $49 = $atom;
   $50 = (($49) + 8|0);
   $51 = HEAP16[$50>>1]|0;
   _pn_encoder_writef16($48,$51);
   $0 = 0;
   break;
  }
  case 116:  {
   $140 = $encoder;
   $141 = $atom;
   $142 = (($141) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   _pn_encoder_writef32($140,$143);
   $0 = 0;
   break;
  }
  case 97:  {
   $52 = $encoder;
   $53 = $atom;
   $54 = (($53) + 8|0);
   $55 = HEAP16[$54>>1]|0;
   _pn_encoder_writef16($52,$55);
   $0 = 0;
   break;
  }
  case 84:  {
   $65 = $encoder;
   $66 = $atom;
   $67 = (($66) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68&255;
   _pn_encoder_writef8($65,$69);
   $0 = 0;
   break;
  }
  case 85:  {
   $106 = $encoder;
   $107 = $atom;
   $108 = (($107) + 8|0);
   $109 = $108;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($109) + 4)|0;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = $111&255;
   _pn_encoder_writef8($106,$115);
   $0 = 0;
   break;
  }
  default: {
   $222 = $2;
   $223 = (($222) + 16|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $code;
   $226 = $225&255;
   HEAP32[$vararg_buffer>>2] = $226;
   $227 = (_pn_error_format($224,-2,6000,$vararg_buffer)|0);
   $0 = $227;
  }
  }
 } while(0);
 $228 = $0;
 STACKTOP = sp;return ($228|0);
}
function _pni_encoder_exit($ctx,$data,$node) {
 $ctx = $ctx|0;
 $data = $data|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $encoder = 0, $pos = 0, $size = 0, $size1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $data;
 $3 = $node;
 $4 = $1;
 $encoder = $4;
 $5 = $3;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ((($7|0) == 23)) {
  label = 2;
 } else if (!((($7|0) == 25) | (($7|0) == 24))) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 if ((label|0) == 2) {
  $8 = $3;
  $9 = (($8) + 54|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&1;
  if ($11) {
   $12 = $3;
   $13 = (($12) + 52|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = ($15|0)==(1);
   if ($16) {
    label = 6;
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
  if ((label|0) == 4) {
   $17 = $3;
   $18 = (($17) + 54|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&1;
   if (!($20)) {
    $21 = $3;
    $22 = (($21) + 52|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    $25 = ($24|0)==(0);
    if ($25) {
     label = 6;
    }
   }
  }
  if ((label|0) == 6) {
   $26 = $encoder;
   $27 = $encoder;
   $28 = $3;
   $29 = (($28) + 40|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_pn_type2code($27,$30)|0);
   _pn_encoder_writef8($26,$31);
  }
 }
 $32 = $encoder;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $pos = $34;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = $encoder;
 $38 = (($37) + 8|0);
 HEAP32[$38>>2] = $36;
 $39 = $3;
 $40 = (($39) + 56|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = $pos;
  $44 = $3;
  $45 = HEAP32[$44>>2]|0;
  $46 = $43;
  $47 = $45;
  $48 = (($46) - ($47))|0;
  $49 = (($48) - 1)|0;
  $size = $49;
  $50 = $encoder;
  $51 = $size;
  $52 = $51&255;
  _pn_encoder_writef8($50,$52);
 } else {
  $53 = $pos;
  $54 = $3;
  $55 = HEAP32[$54>>2]|0;
  $56 = $53;
  $57 = $55;
  $58 = (($56) - ($57))|0;
  $59 = (($58) - 4)|0;
  $size1 = $59;
  $60 = $encoder;
  $61 = $size1;
  _pn_encoder_writef32($60,$61);
 }
 $62 = $pos;
 $63 = $encoder;
 $64 = (($63) + 8|0);
 HEAP32[$64>>2] = $62;
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _pni_dispatch_frame($transport,$args,$frame) {
 $transport = $transport|0;
 $args = $args|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $channel = 0, $dsize = 0, $e = 0, $err = 0, $frame_type = 0, $lcode = 0, $payload = 0, $payload_mem = 0, $payload_size = 0, $scanned = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $lcode = sp;
 $scanned = sp + 78|0;
 $payload = sp + 40|0;
 $1 = $transport;
 $2 = $args;
 $3 = (($frame) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 228|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $1;
   $12 = (($frame) + 2|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   HEAP32[$vararg_buffer>>2] = $14;
   _pn_transport_logf($11,6136,$vararg_buffer);
  }
  $0 = 0;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $15 = $2;
 $16 = (($frame) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($frame) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_pn_data_decode($15,$17,$19)|0);
 $dsize = $20;
 $21 = $dsize;
 $22 = ($21|0)<(0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 136|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $dsize;
  $27 = (_pn_code($26)|0);
  $28 = $2;
  $29 = (_pn_data_error($28)|0);
  $30 = (_pn_error_text($29)|0);
  HEAP32[$vararg_buffer1>>2] = $27;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $30;
  (_pn_string_format($25,6160,$vararg_buffer1)|0);
  $31 = $1;
  $32 = (($31) + 136|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($frame) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($frame) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  (_pn_quote($33,$35,$37)|0);
  $38 = $1;
  $39 = $1;
  $40 = (($39) + 136|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_pn_string_get($41)|0);
  _pn_transport_log($38,$42);
  $43 = $dsize;
  $0 = $43;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $44 = HEAP8[$frame>>0]|0;
 $frame_type = $44;
 $45 = (($frame) + 2|0);
 $46 = HEAP16[$45>>1]|0;
 $channel = $46;
 $47 = $2;
 HEAP32[$vararg_buffer5>>2] = $scanned;
 $vararg_ptr8 = (($vararg_buffer5) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $lcode;
 $48 = (_pn_data_scan($47,6192,$vararg_buffer5)|0);
 $e = $48;
 $49 = $e;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $1;
  _pn_transport_log($51,6200);
  $52 = $e;
  $0 = $52;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $53 = HEAP8[$scanned>>0]|0;
 $54 = $53&1;
 if (!($54)) {
  $55 = $1;
  _pn_transport_log($55,6216);
  $0 = -2;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $56 = (($frame) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $dsize;
 $59 = (($57) - ($58))|0;
 $payload_size = $59;
 $60 = $payload_size;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = (($frame) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $dsize;
  $65 = (($63) + ($64)|0);
  $66 = $65;
 } else {
  $66 = 0;
 }
 $payload_mem = $66;
 $67 = $payload_size;
 HEAP32[$payload>>2] = $67;
 $68 = (($payload) + 4|0);
 $69 = $payload_mem;
 HEAP32[$68>>2] = $69;
 $70 = $1;
 $71 = $channel;
 $72 = $2;
 $73 = $payload_mem;
 $74 = $payload_size;
 _pn_do_trace($70,$71,0,$72,$73,$74);
 $75 = $1;
 $76 = $lcode;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = $frame_type;
 $83 = $channel;
 $84 = $2;
 $85 = (_pni_dispatch_action($75,$78,$81,$82,$83,$84,$payload)|0);
 $err = $85;
 $86 = $2;
 _pn_data_clear($86);
 $87 = $err;
 $0 = $87;
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _pn_endpoint_open($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $endpoint;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 56;
 $10 = $9 | 2;
 $11 = $0;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (_pn_ep_get_connection($13)|0);
 $conn = $14;
 $15 = $conn;
 $16 = (($15) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[80>>2]|0;
 $19 = $0;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_endpoint_event($21,1)|0);
 (_pn_collector_put($17,$18,$19,$22)|0);
 $23 = $conn;
 $24 = $0;
 _pn_modified($23,$24,1);
 STACKTOP = sp;return;
}
function _pn_endpoint_close($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $endpoint;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 56;
 $10 = $9 | 4;
 $11 = $0;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (_pn_ep_get_connection($13)|0);
 $conn = $14;
 $15 = $conn;
 $16 = (($15) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[80>>2]|0;
 $19 = $0;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_endpoint_event($21,0)|0);
 (_pn_collector_put($17,$18,$19,$22)|0);
 $23 = $conn;
 $24 = $0;
 _pn_modified($23,$24,1);
 STACKTOP = sp;return;
}
function _pn_final_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 if ((($2|0) == 0)) {
  $0 = 12;
 } else if ((($2|0) == 1)) {
  $0 = 18;
 } else if ((($2|0) == 3) | (($2|0) == 2)) {
  $0 = 27;
 } else {
  ___assert_fail((6424|0),(6256|0),401,(8224|0));
  // unreachable;
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _pn_disposition_init($ds) {
 $ds = $ds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ds;
 $1 = (_pn_data(0)|0);
 $2 = $0;
 $3 = (($2) + 24|0);
 HEAP32[$3>>2] = $1;
 $4 = (_pn_data(0)|0);
 $5 = $0;
 $6 = (($5) + 28|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 _pn_condition_init($7);
 STACKTOP = sp;return;
}
function _pn_disposition_clear($ds) {
 $ds = $ds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ds;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = (($7) + 40|0);
 HEAP32[$8>>2] = 0;
 $9 = $0;
 $10 = (($9) + 32|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = (($15) + 44|0);
 HEAP8[$16>>0] = 0;
 $17 = $0;
 $18 = (($17) + 45|0);
 HEAP8[$18>>0] = 0;
 $19 = $0;
 $20 = (($19) + 46|0);
 HEAP8[$20>>0] = 0;
 $21 = $0;
 $22 = (($21) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 _pn_data_clear($23);
 $24 = $0;
 $25 = (($24) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 _pn_data_clear($26);
 $27 = $0;
 _pn_condition_clear($27);
 STACKTOP = sp;return;
}
function _pn_dtag($agg$result,$bytes,$size) {
 $agg$result = $agg$result|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $dtag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dtag = sp;
 $0 = $bytes;
 $1 = $size;
 $2 = $1;
 HEAP32[$dtag>>2] = $2;
 $3 = (($dtag) + 4|0);
 $4 = $0;
 HEAP32[$3>>2] = $4;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$dtag+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$dtag+4>>2]|0;
 STACKTOP = sp;return;
}
function _pn_collector_drain($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((8328|0),(8344|0),31,(9720|0));
  // unreachable;
 }
 while(1) {
  $3 = $0;
  $4 = (_pn_collector_peek($3)|0);
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  (_pn_collector_pop($6)|0);
 }
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  ___assert_fail((9744|0),(8344|0),37,(9720|0));
  // unreachable;
 }
 $11 = $0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  ___assert_fail((9768|0),(8344|0),38,(9720|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _pn_collector_shrink($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  _pn_list_clear($4);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((8328|0),(8344|0),43,(9696|0));
  // unreachable;
 }
}
function _pn_delivery_state_init($ds,$delivery,$id) {
 $ds = $ds|0;
 $delivery = $delivery|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ds;
 $1 = $delivery;
 $2 = $id;
 $3 = $2;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $0;
 $6 = (($5) + 4|0);
 HEAP8[$6>>0] = 0;
 $7 = $0;
 $8 = (($7) + 5|0);
 HEAP8[$8>>0] = 1;
 STACKTOP = sp;return;
}
function _pni_post_remote_open_events($transport,$connection) {
 $transport = $transport|0;
 $connection = $connection|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $connection;
 $2 = $1;
 $3 = (($2) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[80>>2]|0;
 $6 = $1;
 (_pn_collector_put($4,$5,$6,9)|0);
 $7 = $0;
 $8 = (($7) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = (($11) + 132|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[80>>2]|0;
 $15 = $0;
 (_pn_collector_put($13,$14,$15,29)|0);
 STACKTOP = sp;return;
}
function _transport_consume($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $consumed = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $transport;
 $2 = $1;
 $3 = (($2) + 168|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)!=(0);
 $11 = ($9|0)!=(0);
 $12 = $10 | $11;
 if (!($12)) {
  $13 = $1;
  $14 = (($13) + 241|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&1;
  if ($16) {
   $17 = $1;
   $18 = (($17) + 60|0);
   $19 = (_pn_condition_is_set($18)|0);
   if ($19) {
    $20 = $1;
    (_pn_do_error($20,0,0,$vararg_buffer)|0);
    $0 = -1;
    $84 = $0;
    STACKTOP = sp;return ($84|0);
   }
  }
 }
 $consumed = 0;
 while(1) {
  $21 = $1;
  $22 = (($21) + 216|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  if ($24) {
   $85 = 1;
  } else {
   $25 = $1;
   $26 = (($25) + 241|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&1;
   $85 = $28;
  }
  if (!($85)) {
   break;
  }
  $29 = $1;
  $30 = (($29) + 76|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = $1;
  $35 = (($34) + 220|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $consumed;
  $38 = (($36) + ($37)|0);
  $39 = $1;
  $40 = (($39) + 216|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiiii[$32 & 127]($33,0,$38,$41)|0);
  $n = $42;
  $43 = $n;
  $44 = ($43|0)>(0);
  if (!($44)) {
   label = 11;
   break;
  }
  $45 = $n;
  $46 = $consumed;
  $47 = (($46) + ($45))|0;
  $consumed = $47;
  $48 = $n;
  $49 = $1;
  $50 = (($49) + 216|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) - ($48))|0;
  HEAP32[$50>>2] = $52;
 }
 do {
  if ((label|0) == 11) {
   $53 = $n;
   $54 = ($53|0)==(0);
   if ($54) {
    break;
   }
   $55 = $n;
   $56 = ($55|0)==(-1);
   if (!($56)) {
    ___assert_fail((12304|0),(10248|0),1661,(12320|0));
    // unreachable;
   }
   $57 = $1;
   $58 = (($57) + 228|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 3;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $1;
    _pn_transport_log($62,12344);
   }
   $63 = $1;
   $64 = (($63) + 216|0);
   HEAP32[$64>>2] = 0;
   $65 = $n;
   $0 = $65;
   $84 = $0;
   STACKTOP = sp;return ($84|0);
  }
 } while(0);
 $66 = $1;
 $67 = (($66) + 216|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $consumed;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $1;
   $73 = (($72) + 220|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $consumed;
   $76 = $1;
   $77 = (($76) + 220|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + ($75)|0);
   $80 = $1;
   $81 = (($80) + 216|0);
   $82 = HEAP32[$81>>2]|0;
   _memmove(($74|0),($79|0),($82|0))|0;
  }
 }
 $83 = $consumed;
 $0 = $83;
 $84 = $0;
 STACKTOP = sp;return ($84|0);
}
function _pni_transport_collector($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 132|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $1;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 132|0);
   $16 = HEAP32[$15>>2]|0;
   $0 = $16;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _pni_close_tail($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 241|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 241|0);
 HEAP8[$6>>0] = 1;
 $7 = $0;
 $8 = (_pni_transport_collector($7)|0);
 $collector = $8;
 $9 = $collector;
 $10 = HEAP32[80>>2]|0;
 $11 = $0;
 (_pn_collector_put($9,$10,$11,33)|0);
 $12 = $0;
 _pni_maybe_post_closed($12);
 STACKTOP = sp;return;
}
function _pn_bytes_strdup($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($str) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$str>>2]|0;
 $3 = (_pn_strndup($1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _pni_map_remote_channel($session,$channel) {
 $session = $session|0;
 $channel = $channel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $transport = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $session;
 $1 = $channel;
 $2 = $0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $transport = $6;
 $7 = $transport;
 $8 = (($7) + 132|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = $10&65535;
 $12 = $0;
 (_pn_hash_put($9,$11,$12)|0);
 $13 = $1;
 $14 = $0;
 $15 = (($14) + 96|0);
 $16 = (($15) + 2|0);
 HEAP16[$16>>1] = $13;
 $17 = $0;
 _pn_ep_incref($17);
 STACKTOP = sp;return;
}
function _pni_map_remote_handle($link,$handle) {
 $link = $link|0;
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $handle;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 236|0);
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = $0;
 $7 = (($6) + 256|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 96|0);
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $0;
 (_pn_hash_put($11,$12,$13)|0);
 $14 = $0;
 _pn_ep_incref($14);
 STACKTOP = sp;return;
}
function _symbol2policy($symbol) {
 $symbol = $symbol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (($symbol) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = (($symbol) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = HEAP32[$symbol>>2]|0;
   $7 = (_strncmp($5,12024,$6)|0);
   $8 = ($7|0)!=(0);
   if (!($8)) {
    $0 = 0;
    break;
   }
   $9 = (($symbol) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$symbol>>2]|0;
   $12 = (_strncmp($10,12360,$11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    $0 = 1;
    break;
   }
   $14 = (($symbol) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$symbol>>2]|0;
   $17 = (_strncmp($15,12040,$16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $0 = 2;
    break;
   }
   $19 = (($symbol) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$symbol>>2]|0;
   $22 = (_strncmp($20,12064,$21)|0);
   $23 = ($22|0)!=(0);
   if ($23) {
    $0 = 1;
    break;
   } else {
    $0 = 3;
    break;
   }
  } else {
   $0 = 1;
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _symbol2dist_mode($symbol) {
 $symbol = $symbol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (($symbol) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = (($symbol) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = HEAP32[$symbol>>2]|0;
   $7 = (_strncmp($5,12016,$6)|0);
   $8 = ($7|0)!=(0);
   if (!($8)) {
    $0 = 2;
    break;
   }
   $9 = (($symbol) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$symbol>>2]|0;
   $12 = (_strncmp($10,12008,$11)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_dtag454($agg$result,$bytes,$size) {
 $agg$result = $agg$result|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $dtag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dtag = sp;
 $0 = $bytes;
 $1 = $size;
 $2 = $1;
 HEAP32[$dtag>>2] = $2;
 $3 = (($dtag) + 4|0);
 $4 = $0;
 HEAP32[$3>>2] = $4;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$dtag+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$dtag+4>>2]|0;
 STACKTOP = sp;return;
}
function _pn_scan_error($data,$condition,$fmt) {
 $data = $data|0;
 $condition = $condition|0;
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $desc = 0, $err = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cond = sp + 24|0;
 $desc = sp + 16|0;
 $1 = $data;
 $2 = $condition;
 $3 = $fmt;
 $4 = $2;
 _pn_condition_clear($4);
 $5 = $1;
 $6 = $3;
 $7 = $2;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$vararg_buffer>>2] = $cond;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $desc;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $10 = (_pn_data_scan($5,$6,$vararg_buffer)|0);
 $err = $10;
 $11 = $err;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $err;
  $0 = $13;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($cond) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$cond>>2]|0;
  (_pn_string_setn($15,$17,$18)|0);
  $19 = $2;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($desc) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$desc>>2]|0;
  (_pn_string_setn($21,$23,$24)|0);
  $25 = $2;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  _pn_data_rewind($27);
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _pni_unmap_remote_handle($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 236|0);
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $handle = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = -2;
 $8 = $0;
 $9 = (($8) + 256|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 96|0);
 $12 = (($11) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $handle;
 $15 = (_pn_hash_get($13,$14)|0);
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $0;
  _pn_ep_decref($17);
 }
 $18 = $0;
 $19 = (($18) + 256|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 96|0);
 $22 = (($21) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $handle;
 _pn_hash_del($23,$24);
 STACKTOP = sp;return;
}
function _pni_unmap_remote_channel($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $channel = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = (($2) + 8|0);
 _pn_delivery_map_clear($3);
 $4 = $0;
 $5 = (($4) + 96|0);
 $6 = (($5) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 _pni_transport_unbind_handles($7,0);
 $8 = $0;
 $9 = (($8) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $transport = $12;
 $13 = $0;
 $14 = (($13) + 96|0);
 $15 = (($14) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $channel = $16;
 $17 = $0;
 $18 = (($17) + 96|0);
 $19 = (($18) + 2|0);
 HEAP16[$19>>1] = -2;
 $20 = $transport;
 $21 = (($20) + 132|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $channel;
 $24 = $23&65535;
 $25 = (_pn_hash_get($22,$24)|0);
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $28 = $transport;
  $29 = (($28) + 132|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $channel;
  $32 = $31&65535;
  _pn_hash_del($30,$32);
  STACKTOP = sp;return;
 }
 $27 = $0;
 _pn_ep_decref($27);
 $28 = $transport;
 $29 = (($28) + 132|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $channel;
 $32 = $31&65535;
 _pn_hash_del($30,$32);
 STACKTOP = sp;return;
}
function _pni_map_local_channel($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $channel = 0, $state = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $transport = $5;
 $6 = $0;
 $7 = (($6) + 96|0);
 $state = $7;
 $8 = $transport;
 $9 = (($8) + 128|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_allocate_alias($10)|0);
 $channel = $11;
 $12 = $channel;
 $13 = $state;
 HEAP16[$13>>1] = $12;
 $14 = $transport;
 $15 = (($14) + 128|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $channel;
 $18 = $17&65535;
 $19 = $0;
 (_pn_hash_put($16,$18,$19)|0);
 $20 = $0;
 _pn_ep_incref($20);
 STACKTOP = sp;return;
}
function _pni_map_local_handle($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ssn_state = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 236|0);
 $state = $2;
 $3 = $0;
 $4 = (($3) + 256|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 96|0);
 $ssn_state = $6;
 $7 = $ssn_state;
 $8 = (($7) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_allocate_alias($9)|0);
 $11 = $10&65535;
 $12 = $state;
 HEAP32[$12>>2] = $11;
 $13 = $ssn_state;
 $14 = (($13) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $state;
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 (_pn_hash_put($15,$17,$18)|0);
 $19 = $0;
 _pn_ep_incref($19);
 STACKTOP = sp;return;
}
function _expiry_symbol($policy) {
 $policy = $policy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $policy;
 $2 = $1;
 if ((($2|0) == 1)) {
  $0 = 0;
 } else if ((($2|0) == 2)) {
  $0 = 12040;
 } else if ((($2|0) == 0)) {
  $0 = 12024;
 } else if ((($2|0) == 3)) {
  $0 = 12064;
 } else {
  $0 = 0;
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _dist_mode2symbol($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mode;
 $2 = $1;
 if ((($2|0) == 1)) {
  $0 = 12008;
 } else if ((($2|0) == 2)) {
  $0 = 12016;
 } else {
  $0 = 0;
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _pn_full_settle($db,$delivery) {
 $db = $db|0;
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $db;
 $1 = $delivery;
 $2 = $1;
 $3 = (($2) + 146|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  ___assert_fail((11976|0),(10248|0),1326,(11992|0));
  // unreachable;
 } else {
  $6 = $1;
  _pn_clear_tpwork($6);
  $7 = $0;
  $8 = $1;
  _pn_delivery_map_del($7,$8);
  $9 = $1;
  (_pn_incref($9)|0);
  $10 = $1;
  (_pn_decref($10)|0);
  STACKTOP = sp;return;
 }
}
function _pni_unmap_local_handle($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $handle = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 236|0);
 $state = $2;
 $3 = $state;
 $4 = HEAP32[$3>>2]|0;
 $handle = $4;
 $5 = $state;
 HEAP32[$5>>2] = -2;
 $6 = $0;
 $7 = (($6) + 256|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 96|0);
 $10 = (($9) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $handle;
 $13 = (_pn_hash_get($11,$12)|0);
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $0;
  _pn_ep_decref($15);
 }
 $16 = $0;
 $17 = (($16) + 256|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 96|0);
 $20 = (($19) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $handle;
 _pn_hash_del($21,$22);
 STACKTOP = sp;return;
}
function _pni_unmap_local_channel($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $channel = 0, $state = 0, $transport = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = (($2) + 16|0);
 _pn_delivery_map_clear($3);
 $4 = $0;
 $5 = (($4) + 96|0);
 $6 = (($5) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 _pni_transport_unbind_handles($7,0);
 $8 = $0;
 $9 = (($8) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $transport = $12;
 $13 = $0;
 $14 = (($13) + 96|0);
 $state = $14;
 $15 = $state;
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $channel = $17;
 $18 = $state;
 HEAP16[$18>>1] = -2;
 $19 = $transport;
 $20 = (($19) + 128|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $channel;
 $23 = (_pn_hash_get($21,$22)|0);
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $26 = $transport;
  $27 = (($26) + 128|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $channel;
  _pn_hash_del($28,$29);
  STACKTOP = sp;return;
 }
 $25 = $0;
 _pn_ep_decref($25);
 $26 = $transport;
 $27 = (($26) + 128|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $channel;
 _pn_hash_del($28,$29);
 STACKTOP = sp;return;
}
function _transport_produce($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $more = 0, $n = 0, $newbuf = 0, $space = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $1;
 $3 = (($2) + 242|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $0 = -1;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $6 = $1;
 $7 = (($6) + 200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 204|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) - ($11))|0;
 $space = $12;
 $13 = $space;
 $14 = ($13|0)<=(0);
 if ($14) {
  $more = 0;
  $15 = $1;
  $16 = (($15) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  if ($18) {
   $22 = $1;
   $23 = (($22) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 200|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($24>>>0)>($27>>>0);
   if ($28) {
    $29 = $1;
    $30 = (($29) + 200|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $1;
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $1;
    $36 = (($35) + 200|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($34) - ($37))|0;
    $39 = ($31>>>0)>($38>>>0);
    if ($39) {
     $40 = $1;
     $41 = (($40) + 44|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $1;
     $44 = (($43) + 200|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (($42) - ($45))|0;
     $50 = $46;
    } else {
     $47 = $1;
     $48 = (($47) + 200|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $49;
    }
    $more = $50;
   }
  } else {
   $19 = $1;
   $20 = (($19) + 200|0);
   $21 = HEAP32[$20>>2]|0;
   $more = $21;
  }
  $51 = $more;
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $1;
   $54 = (($53) + 208|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $1;
   $57 = (($56) + 200|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $more;
   $60 = (($58) + ($59))|0;
   $61 = (_realloc($55,$60)|0);
   $newbuf = $61;
   $62 = $newbuf;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    $64 = $newbuf;
    $65 = $1;
    $66 = (($65) + 208|0);
    HEAP32[$66>>2] = $64;
    $67 = $more;
    $68 = $1;
    $69 = (($68) + 200|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($67))|0;
    HEAP32[$69>>2] = $71;
    $72 = $more;
    $73 = $space;
    $74 = (($73) + ($72))|0;
    $space = $74;
   }
  }
 }
 while(1) {
  $75 = $space;
  $76 = ($75|0)>(0);
  if (!($76)) {
   break;
  }
  $77 = $1;
  $78 = (($77) + 76|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $1;
  $83 = $1;
  $84 = (($83) + 204|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $1;
  $87 = (($86) + 208|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + ($85)|0);
  $90 = $space;
  $91 = (FUNCTION_TABLE_iiiii[$81 & 127]($82,0,$89,$90)|0);
  $n = $91;
  $92 = $n;
  $93 = ($92|0)>(0);
  if (!($93)) {
   label = 21;
   break;
  }
  $94 = $n;
  $95 = $space;
  $96 = (($95) - ($94))|0;
  $space = $96;
  $97 = $n;
  $98 = $1;
  $99 = (($98) + 204|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($97))|0;
  HEAP32[$99>>2] = $101;
 }
 do {
  if ((label|0) == 21) {
   $102 = $n;
   $103 = ($102|0)==(0);
   if ($103) {
    break;
   }
   $104 = $1;
   $105 = (($104) + 204|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)!=(0);
   if ($107) {
    break;
   }
   $108 = $1;
   $109 = (($108) + 228|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & 3;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $1;
    _pn_transport_log($113,11856);
   }
   $114 = $1;
   _pni_close_head($114);
   $115 = $n;
   $0 = $115;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  }
 } while(0);
 $116 = $1;
 $117 = (($116) + 204|0);
 $118 = HEAP32[$117>>2]|0;
 $0 = $118;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _pni_close_head($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 242|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 242|0);
 HEAP8[$6>>0] = 1;
 $7 = $0;
 $8 = (_pni_transport_collector($7)|0);
 $collector = $8;
 $9 = $collector;
 $10 = HEAP32[80>>2]|0;
 $11 = $0;
 (_pn_collector_put($9,$10,$11,32)|0);
 $12 = $0;
 _pni_maybe_post_closed($12);
 STACKTOP = sp;return;
}
function _pn_string_set_bytes($string,$bytes) {
 $string = $string|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $0;
 $2 = (($bytes) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$bytes>>2]|0;
 $5 = (_pn_string_setn($1,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pni_sasl_is_client_state($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $0;
 $2 = ($1|0)==(0);
 if ($2) {
  $11 = 1;
 } else {
  $3 = $0;
  $4 = ($3|0)==(1);
  if ($4) {
   $11 = 1;
  } else {
   $5 = $0;
   $6 = ($5|0)==(3);
   if ($6) {
    $11 = 1;
   } else {
    $7 = $0;
    $8 = ($7|0)==(5);
    if ($8) {
     $11 = 1;
    } else {
     $9 = $0;
     $10 = ($9|0)==(6);
     $11 = $10;
    }
   }
  }
 }
 STACKTOP = sp;return ($11|0);
}
function _pni_sasl_is_server_state($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $0;
 $2 = ($1|0)==(0);
 if ($2) {
  $9 = 1;
 } else {
  $3 = $0;
  $4 = ($3|0)==(2);
  if ($4) {
   $9 = 1;
  } else {
   $5 = $0;
   $6 = ($5|0)==(4);
   if ($6) {
    $9 = 1;
   } else {
    $7 = $0;
    $8 = ($7|0)==(7);
    $9 = $8;
   }
  }
 }
 STACKTOP = sp;return ($9|0);
}
function _pni_emit($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collector = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 132|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 132|0);
 $15 = HEAP32[$14>>2]|0;
 $collector = $15;
 $16 = $collector;
 $17 = HEAP32[80>>2]|0;
 $18 = $0;
 (_pn_collector_put($16,$17,$18,29)|0);
 STACKTOP = sp;return;
}
function _pni_map_ensure($map,$capacity) {
 $map = $map|0;
 $capacity = $capacity|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $entries = 0, $i = 0, $i1 = 0, $key = 0, $key2 = 0, $load = 0.0, $oldcap = 0, $value = 0, $value3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $map;
 $2 = $capacity;
 $3 = $1;
 $4 = (+_pni_map_load($3));
 $load = $4;
 $5 = $2;
 $6 = $1;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)<=($8>>>0);
 if ($9) {
  $10 = $load;
  $11 = $1;
  $12 = (($11) + 32|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $10 <= $13;
  if ($14) {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
   $$pre_trunc = $0;
   $98 = $$pre_trunc&1;
   STACKTOP = sp;return ($98|0);
  }
 }
 $15 = $1;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $oldcap = $17;
 while(1) {
  $18 = $1;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ($20>>>0)<($21>>>0);
  if ($22) {
   $99 = 1;
  } else {
   $23 = $1;
   $24 = (+_pni_map_load($23));
   $25 = $1;
   $26 = (($25) + 32|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $24 > $27;
   $99 = $28;
  }
  if (!($99)) {
   break;
  }
  $29 = $1;
  $30 = (($29) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31<<1;
  HEAP32[$30>>2] = $32;
  $33 = $1;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (+($35>>>0));
  $37 = 0.85999999999999999 * $36;
  $38 = (~~(($37))>>>0);
  $39 = $1;
  $40 = (($39) + 16|0);
  HEAP32[$40>>2] = $38;
 }
 $41 = $1;
 $42 = (($41) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $entries = $43;
 $44 = $1;
 _pni_map_allocate($44);
 $i = 0;
 while(1) {
  $45 = $i;
  $46 = $oldcap;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $i;
  $49 = $entries;
  $50 = (($49) + ($48<<4)|0);
  $51 = (($50) + 12|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $i;
   $56 = $entries;
   $57 = (($56) + ($55<<4)|0);
   $58 = HEAP32[$57>>2]|0;
   $key = $58;
   $59 = $i;
   $60 = $entries;
   $61 = (($60) + ($59<<4)|0);
   $62 = (($61) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $value = $63;
   $64 = $1;
   $65 = $key;
   $66 = $value;
   (_pn_map_put($64,$65,$66)|0);
  }
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $i1 = 0;
 while(1) {
  $69 = $i1;
  $70 = $oldcap;
  $71 = ($69>>>0)<($70>>>0);
  if (!($71)) {
   break;
  }
  $72 = $i1;
  $73 = $entries;
  $74 = (($73) + ($72<<4)|0);
  $75 = (($74) + 12|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $i1;
   $80 = $entries;
   $81 = (($80) + ($79<<4)|0);
   $82 = HEAP32[$81>>2]|0;
   $key2 = $82;
   $83 = $i1;
   $84 = $entries;
   $85 = (($84) + ($83<<4)|0);
   $86 = (($85) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $value3 = $87;
   $88 = $1;
   $89 = HEAP32[$88>>2]|0;
   $90 = $key2;
   (_pn_class_decref($89,$90)|0);
   $91 = $1;
   $92 = (($91) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $value3;
   (_pn_class_decref($93,$94)|0);
  }
  $95 = $i1;
  $96 = (($95) + 1)|0;
  $i1 = $96;
 }
 $97 = $entries;
 _free($97);
 $$expand_i1_val2 = 1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $98 = $$pre_trunc&1;
 STACKTOP = sp;return ($98|0);
}
function _pni_map_load($map) {
 $map = $map|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $map;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3>>>0));
 $5 = $0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7>>>0));
 $9 = $4 / $8;
 STACKTOP = sp;return (+$9);
}
function _pn_encoder_writef32($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $encoder;
 $1 = $value;
 $2 = $0;
 $3 = (_pn_encoder_remaining($2)|0);
 $4 = ($3>>>0)>=(4);
 if (!($4)) {
  $35 = $0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 4|0);
  HEAP32[$36>>2] = $38;
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $5 >>> 24;
 $7 = 255 & $6;
 $8 = $7&255;
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP8[$11>>0] = $8;
 $12 = $1;
 $13 = $12 >>> 16;
 $14 = 255 & $13;
 $15 = $14&255;
 $16 = $0;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1|0);
 HEAP8[$19>>0] = $15;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = 255 & $21;
 $23 = $22&255;
 $24 = $0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 2|0);
 HEAP8[$27>>0] = $23;
 $28 = $1;
 $29 = 255 & $28;
 $30 = $29&255;
 $31 = $0;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 3|0);
 HEAP8[$34>>0] = $30;
 $35 = $0;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 4|0);
 HEAP32[$36>>2] = $38;
 STACKTOP = sp;return;
}
function _pn_encoder_remaining($encoder) {
 $encoder = $encoder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $encoder;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $end = $7;
 $8 = $end;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 if ($12) {
  $13 = $end;
  $14 = $1;
  $15 = (($14) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $13;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _pn_type2code($encoder,$type) {
 $encoder = $encoder|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $encoder;
 $2 = $type;
 $3 = $2;
 do {
  switch ($3|0) {
  case 16:  {
   $0 = -124;
   break;
  }
  case 6:  {
   $0 = 97;
   break;
  }
  case 4:  {
   $0 = 81;
   break;
  }
  case 21:  {
   $0 = -77;
   break;
  }
  case 12:  {
   $0 = -125;
   break;
  }
  case 1:  {
   $0 = 64;
   break;
  }
  case 18:  {
   $0 = -104;
   break;
  }
  case 25:  {
   $0 = -47;
   break;
  }
  case 15:  {
   $0 = 116;
   break;
  }
  case 22:  {
   $0 = 0;
   break;
  }
  case 3:  {
   $0 = 80;
   break;
  }
  case 24:  {
   $0 = -48;
   break;
  }
  case 20:  {
   $0 = -79;
   break;
  }
  case 2:  {
   $0 = 86;
   break;
  }
  case 11:  {
   $0 = -127;
   break;
  }
  case 5:  {
   $0 = 96;
   break;
  }
  case 8:  {
   $0 = 113;
   break;
  }
  case 7:  {
   $0 = 112;
   break;
  }
  case 14:  {
   $0 = -126;
   break;
  }
  case 13:  {
   $0 = 114;
   break;
  }
  case 19:  {
   $0 = -80;
   break;
  }
  case 17:  {
   $0 = -108;
   break;
  }
  case 10:  {
   $0 = -128;
   break;
  }
  case 23:  {
   $0 = -16;
   break;
  }
  case 9:  {
   $0 = 115;
   break;
  }
  default: {
   $4 = $1;
   $5 = (($4) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $2;
   HEAP32[$vararg_buffer>>2] = $7;
   $8 = (_pn_error_format($6,-2,5976,$vararg_buffer)|0);
   $9 = $8&255;
   $0 = $9;
  }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _pn_encoder_writef8($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $encoder;
 $1 = $value;
 $2 = $0;
 $3 = (_pn_encoder_remaining($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = $0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP8[$8>>0] = $5;
 }
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1|0);
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function _pn_encoder_writev32($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $encoder;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 _pn_encoder_writef32($2,$4);
 $5 = $0;
 $6 = (_pn_encoder_remaining($5)|0);
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>=($8>>>0);
 if ($9) {
  $10 = $0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  _memmove(($12|0),($15|0),($17|0))|0;
 }
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($19)|0);
 HEAP32[$21>>2] = $23;
 STACKTOP = sp;return;
}
function _pn_encoder_writev8($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $encoder;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4&255;
 _pn_encoder_writef8($2,$5);
 $6 = $0;
 $7 = (_pn_encoder_remaining($6)|0);
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>=($9>>>0);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  _memmove(($13|0),($16|0),($18|0))|0;
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20)|0);
 HEAP32[$22>>2] = $24;
 STACKTOP = sp;return;
}
function _pn_encoder_writef128($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $encoder;
 $1 = $value;
 $2 = $0;
 $3 = (_pn_encoder_remaining($2)|0);
 $4 = ($3>>>0)>=(16);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  _memmove(($7|0),($8|0),16)|0;
 }
 $9 = $0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 16|0);
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function _pn_encoder_writef64($encoder,$0,$1) {
 $encoder = $encoder|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $encoder;
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $2;
 $9 = (_pn_encoder_remaining($8)|0);
 $10 = ($9>>>0)>=(8);
 if (!($10)) {
  $118 = $2;
  $119 = (($118) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + 8|0);
  HEAP32[$119>>2] = $121;
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (_bitshift64Lshr(($13|0),($16|0),56)|0);
 $18 = tempRet0;
 $19 = 255 & $17;
 $20 = $19&255;
 $21 = $2;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP8[$23>>0] = $20;
 $24 = $3;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_bitshift64Lshr(($26|0),($29|0),48)|0);
 $31 = tempRet0;
 $32 = 255 & $30;
 $33 = $32&255;
 $34 = $2;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 1|0);
 HEAP8[$37>>0] = $33;
 $38 = $3;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (_bitshift64Lshr(($40|0),($43|0),40)|0);
 $45 = tempRet0;
 $46 = 255 & $44;
 $47 = $46&255;
 $48 = $2;
 $49 = (($48) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 2|0);
 HEAP8[$51>>0] = $47;
 $52 = $3;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = 255 & $57;
 $59 = $58&255;
 $60 = $2;
 $61 = (($60) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 3|0);
 HEAP8[$63>>0] = $59;
 $64 = $3;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (_bitshift64Lshr(($66|0),($69|0),24)|0);
 $71 = tempRet0;
 $72 = 255 & $70;
 $73 = $72&255;
 $74 = $2;
 $75 = (($74) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + 4|0);
 HEAP8[$77>>0] = $73;
 $78 = $3;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (_bitshift64Lshr(($80|0),($83|0),16)|0);
 $85 = tempRet0;
 $86 = 255 & $84;
 $87 = $86&255;
 $88 = $2;
 $89 = (($88) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + 5|0);
 HEAP8[$91>>0] = $87;
 $92 = $3;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + 4)|0;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (_bitshift64Lshr(($94|0),($97|0),8)|0);
 $99 = tempRet0;
 $100 = 255 & $98;
 $101 = $100&255;
 $102 = $2;
 $103 = (($102) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 6|0);
 HEAP8[$105>>0] = $101;
 $106 = $3;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($106) + 4)|0;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = 255 & $108;
 $113 = $112&255;
 $114 = $2;
 $115 = (($114) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 7|0);
 HEAP8[$117>>0] = $113;
 $118 = $2;
 $119 = (($118) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + 8|0);
 HEAP32[$119>>2] = $121;
 STACKTOP = sp;return;
}
function _pn_encoder_writef16($encoder,$value) {
 $encoder = $encoder|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $encoder;
 $1 = $value;
 $2 = $0;
 $3 = (_pn_encoder_remaining($2)|0);
 $4 = ($3>>>0)>=(2);
 if ($4) {
  $5 = $1;
  $6 = $5&65535;
  $7 = $6 >> 8;
  $8 = 255 & $7;
  $9 = $8&255;
  $10 = $0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP8[$12>>0] = $9;
  $13 = $1;
  $14 = $13&65535;
  $15 = 255 & $14;
  $16 = $15&255;
  $17 = $0;
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1|0);
  HEAP8[$20>>0] = $16;
 }
 $21 = $0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 2|0);
 HEAP32[$22>>2] = $24;
 STACKTOP = sp;return;
}
function _pn_node2code($encoder,$node) {
 $encoder = $encoder|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $encoder;
 $2 = $node;
 $3 = $2;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 L1: do {
  switch ($5|0) {
  case 19:  {
   $78 = $2;
   $79 = (($78) + 16|0);
   $80 = (($79) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81>>>0)<(256);
   if ($82) {
    $0 = -96;
    break L1;
   } else {
    $0 = -80;
    break L1;
   }
   break;
  }
  case 21:  {
   $73 = $2;
   $74 = (($73) + 16|0);
   $75 = (($74) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76>>>0)<(256);
   if ($77) {
    $0 = -93;
    break L1;
   } else {
    $0 = -77;
    break L1;
   }
   break;
  }
  case 10:  {
   $44 = $2;
   $45 = (($44) + 16|0);
   $46 = (($45) + 8|0);
   $47 = $46;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + 4)|0;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52>>>0)<(0);
   $54 = ($49>>>0)<(256);
   $55 = ($52|0)==(0);
   $56 = $55 & $54;
   $57 = $53 | $56;
   if ($57) {
    $0 = 83;
    break L1;
   } else {
    $0 = -128;
    break L1;
   }
   break;
  }
  case 11:  {
   $6 = $2;
   $7 = (($6) + 16|0);
   $8 = (($7) + 8|0);
   $9 = $8;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (-1)<($14|0);
   $16 = (4294967168)<=($11>>>0);
   $17 = (-1)==($14|0);
   $18 = $17 & $16;
   $19 = $15 | $18;
   if ($19) {
    $20 = $2;
    $21 = (($20) + 16|0);
    $22 = (($21) + 8|0);
    $23 = $22;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + 4)|0;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)<(0);
    $30 = ($25>>>0)<=(127);
    $31 = ($28|0)==(0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if ($33) {
     $0 = 85;
     break L1;
    }
   }
   $0 = -127;
   break;
  }
  case 20:  {
   $68 = $2;
   $69 = (($68) + 16|0);
   $70 = (($69) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71>>>0)<(256);
   if ($72) {
    $0 = -95;
    break L1;
   } else {
    $0 = -79;
    break L1;
   }
   break;
  }
  case 7:  {
   $58 = $2;
   $59 = (($58) + 16|0);
   $60 = (($59) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61>>>0)<(256);
   if ($62) {
    $0 = 82;
    break L1;
   } else {
    $0 = 112;
    break L1;
   }
   break;
  }
  case 8:  {
   $34 = $2;
   $35 = (($34) + 16|0);
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (-128)<=($37|0);
   if ($38) {
    $39 = $2;
    $40 = (($39) + 16|0);
    $41 = (($40) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)<=(127);
    if ($43) {
     $0 = 84;
     break L1;
    }
   }
   $0 = 113;
   break;
  }
  case 2:  {
   $63 = $2;
   $64 = (($63) + 16|0);
   $65 = (($64) + 8|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&1;
   if ($67) {
    $0 = 65;
    break L1;
   } else {
    $0 = 66;
    break L1;
   }
   break;
  }
  default: {
   $83 = $1;
   $84 = $2;
   $85 = (($84) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (_pn_type2code($83,$86)|0);
   $0 = $87;
  }
  }
 } while(0);
 $88 = $0;
 STACKTOP = sp;return ($88|0);
}
function _pn_is_first_in_array($data,$parent,$node) {
 $data = $data|0;
 $parent = $parent|0;
 $node = $node|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $parent;
 $3 = $node;
 $4 = $3;
 $5 = (($4) + 46|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)!=(0);
 if (!($7)) {
  $8 = $2;
  $9 = (($8) + 54|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&1;
  $12 = $11 ^ 1;
  $$expand_i1_val = $12&1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 $13 = $2;
 $14 = (($13) + 54|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&1;
 if ($16) {
  $17 = $1;
  $18 = $3;
  $19 = (($18) + 46|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = (_pn_data_node234($17,$20)|0);
  $22 = (($21) + 46|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = ($23<<16>>16)!=(0);
  $25 = $24 ^ 1;
  $26 = $25;
 } else {
  $26 = 0;
 }
 $$expand_i1_val2 = $26&1;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $27 = $$pre_trunc&1;
 STACKTOP = sp;return ($27|0);
}
function _pn_is_in_array($data,$parent,$node) {
 $data = $data|0;
 $parent = $parent|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $parent;
 $2 = $node;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $20 = 0;
  STACKTOP = sp;return ($20|0);
 }
 $5 = $1;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(23);
 if (!($8)) {
  $20 = 0;
  STACKTOP = sp;return ($20|0);
 }
 $9 = $1;
 $10 = (($9) + 54|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 if ($12) {
  $13 = $2;
  $14 = (($13) + 46|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)!=(0);
  $17 = $16 ^ 1;
  $19 = $17;
 } else {
  $19 = 0;
 }
 $18 = $19 ^ 1;
 $20 = $18;
 STACKTOP = sp;return ($20|0);
}
function _pn_data_node234($data,$nd) {
 $data = $data|0;
 $nd = $nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $nd;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = $7&65535;
  $9 = (($6) + ($8<<6)|0);
  $10 = (($9) + -64|0);
  $11 = $10;
  STACKTOP = sp;return ($11|0);
 } else {
  $11 = 0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _pni_dispatch_action($transport,$0,$1,$frame_type,$channel,$args,$payload) {
 $transport = $transport|0;
 $0 = $0|0;
 $1 = $1|0;
 $frame_type = $frame_type|0;
 $channel = $channel|0;
 $args = $args|0;
 $payload = $payload|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action = 0, $cond = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0;
 var $cond17 = 0, $cond18 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $2 = $transport;
 $8 = $3;
 $9 = $8;
 HEAP32[$9>>2] = $0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $4 = $frame_type;
 $5 = $channel;
 $6 = $args;
 $7 = $payload;
 $12 = $4;
 $13 = $12&255;
 if ((($13|0) == 0)) {
  $14 = $3;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  switch ($16|0) {
  case 24:  {
   $cond10 = ($19|0)==(0);
   if ($cond10) {
    $action = 119;
   } else {
    label = 21;
   }
   break;
  }
  case 21:  {
   $cond13 = ($19|0)==(0);
   if ($cond13) {
    $action = 116;
   } else {
    label = 21;
   }
   break;
  }
  case 18:  {
   $cond16 = ($19|0)==(0);
   if ($cond16) {
    $action = 113;
   } else {
    label = 21;
   }
   break;
  }
  case 17:  {
   $cond17 = ($19|0)==(0);
   if ($cond17) {
    $action = 112;
   } else {
    label = 21;
   }
   break;
  }
  case 20:  {
   $cond14 = ($19|0)==(0);
   if ($cond14) {
    $action = 115;
   } else {
    label = 21;
   }
   break;
  }
  case 19:  {
   $cond15 = ($19|0)==(0);
   if ($cond15) {
    $action = 114;
   } else {
    label = 21;
   }
   break;
  }
  case 22:  {
   $cond12 = ($19|0)==(0);
   if ($cond12) {
    $action = 117;
   } else {
    label = 21;
   }
   break;
  }
  case 23:  {
   $cond11 = ($19|0)==(0);
   if ($cond11) {
    $action = 118;
   } else {
    label = 21;
   }
   break;
  }
  case 16:  {
   $cond18 = ($19|0)==(0);
   if ($cond18) {
    $action = 111;
   } else {
    label = 21;
   }
   break;
  }
  default: {
   label = 21;
  }
  }
  if ((label|0) == 21) {
   $action = 120;
  }
 } else if ((($13|0) == 1)) {
  $20 = $3;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  switch ($22|0) {
  case 68:  {
   $cond = ($25|0)==(0);
   if ($cond) {
    $action = 125;
   } else {
    label = 34;
   }
   break;
  }
  case 65:  {
   $cond8 = ($25|0)==(0);
   if ($cond8) {
    $action = 122;
   } else {
    label = 34;
   }
   break;
  }
  case 64:  {
   $cond9 = ($25|0)==(0);
   if ($cond9) {
    $action = 121;
   } else {
    label = 34;
   }
   break;
  }
  case 66:  {
   $cond7 = ($25|0)==(0);
   if ($cond7) {
    $action = 123;
   } else {
    label = 34;
   }
   break;
  }
  case 67:  {
   $cond6 = ($25|0)==(0);
   if ($cond6) {
    $action = 124;
   } else {
    label = 34;
   }
   break;
  }
  default: {
   label = 34;
  }
  }
  if ((label|0) == 34) {
   $action = 120;
  }
 } else {
  $action = 126;
 }
 $26 = $action;
 $27 = $2;
 $28 = $4;
 $29 = $5;
 $30 = $6;
 $31 = $7;
 $32 = (FUNCTION_TABLE_iiiiii[$26 & 127]($27,$28,$29,$30,$31)|0);
 STACKTOP = sp;return ($32|0);
}
function _pn_disposition_finalize($ds) {
 $ds = $ds|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ds;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 _pn_free($3);
 $4 = $0;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 _pn_free($6);
 $7 = $0;
 _pn_condition_tini($7);
 STACKTOP = sp;return;
}
function _pni_connection_live($conn) {
 $conn = $conn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $conn;
 $1 = $0;
 $2 = (_pn_refcount($1)|0);
 $3 = ($2|0)>(1);
 STACKTOP = sp;return ($3|0);
}
function _pni_preserve_delivery($delivery) {
 $delivery = $delivery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $delivery;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 256|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $conn = $7;
 $8 = $0;
 $9 = (($8) + 46|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if (!($11)) {
  $25 = 1;
  STACKTOP = sp;return ($25|0);
 }
 $12 = $conn;
 $13 = (($12) + 84|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $0;
  $17 = (($16) + 128|0);
  $18 = (($17) + 5|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  if ($20) {
   $27 = 1;
  } else {
   $21 = $0;
   $22 = (($21) + 147|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&1;
   $27 = $24;
  }
  $26 = $27;
 } else {
  $26 = 0;
 }
 $25 = $26;
 STACKTOP = sp;return ($25|0);
}
function _pni_link_live($link) {
 $link = $link|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $link;
 $1 = $0;
 $2 = (($1) + 256|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_pni_session_live($3)|0);
 if ($4) {
  $8 = 1;
  STACKTOP = sp;return ($8|0);
 }
 $5 = $0;
 $6 = (_pn_refcount($5)|0);
 $7 = ($6|0)>(1);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _pni_session_live($ssn) {
 $ssn = $ssn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ssn;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_pni_connection_live($3)|0);
 if ($4) {
  $8 = 1;
  STACKTOP = sp;return ($8|0);
 }
 $5 = $0;
 $6 = (_pn_refcount($5)|0);
 $7 = ($6|0)>(1);
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _pni_preserve_child($endpoint) {
 $endpoint = $endpoint|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $1;
 $3 = (_pn_ep_get_connection($2)|0);
 $conn = $3;
 $4 = $1;
 $5 = (_pn_ep_parent($4)|0);
 $parent = $5;
 $6 = $parent;
 $7 = (_pni_endpoint_live($6)|0);
 do {
  if ($7) {
   $8 = $1;
   $9 = (($8) + 57|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if ($11) {
    $12 = $1;
    $13 = (_pn_ep_bound($12)|0);
    if (!($13)) {
     break;
    }
   }
   $14 = $1;
   $15 = (($14) + 58|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&1;
   if ($17) {
    $18 = $1;
    _pn_object_incref($18);
    $19 = $1;
    $20 = (($19) + 58|0);
    HEAP8[$20>>0] = 0;
    $21 = $parent;
    (_pn_decref($21)|0);
    $$expand_i1_val = 1;
    $0 = $$expand_i1_val;
    $$pre_trunc = $0;
    $64 = $$pre_trunc&1;
    STACKTOP = sp;return ($64|0);
   }
  }
 } while(0);
 $22 = $1;
 $23 = (($22) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = (($26) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $1;
  $30 = (($29) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 44|0);
  HEAP32[$32>>2] = $28;
 }
 $33 = $1;
 $34 = (($33) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $1;
  $38 = (($37) + 48|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = (($40) + 44|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 48|0);
  HEAP32[$43>>2] = $39;
 }
 $44 = $1;
 $45 = $conn;
 $46 = (($45) + 68|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($44|0)==($47|0);
 if ($48) {
  $49 = $1;
  $50 = (($49) + 44|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $conn;
  $53 = (($52) + 68|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $1;
 $55 = $conn;
 $56 = (($55) + 72|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($54|0)==($57|0);
 if ($58) {
  $59 = $1;
  $60 = (($59) + 48|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $conn;
  $63 = (($62) + 72|0);
  HEAP32[$63>>2] = $61;
 }
 $$expand_i1_val2 = 0;
 $0 = $$expand_i1_val2;
 $$pre_trunc = $0;
 $64 = $$pre_trunc&1;
 STACKTOP = sp;return ($64|0);
}
function _pn_ep_bound($endpoint) {
 $endpoint = $endpoint|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conn = 0, $lnk = 0, $ssn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $1;
 $3 = (_pn_ep_get_connection($2)|0);
 $conn = $3;
 $4 = $conn;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $1;
   $9 = (($8) + 56|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if ($11) {
    $$expand_i1_val2 = 1;
    $0 = $$expand_i1_val2;
    break;
   }
   $12 = $1;
   $13 = HEAP32[$12>>2]|0;
   if ((($13|0) == 0)) {
    $14 = $1;
    $15 = (($14) + 84|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    $$expand_i1_val4 = $17&1;
    $0 = $$expand_i1_val4;
    break;
   } else if ((($13|0) == 3) | (($13|0) == 2)) {
    $31 = $1;
    $lnk = $31;
    $32 = $lnk;
    $33 = (($32) + 236|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)>=(0);
    if ($35) {
     $41 = 1;
    } else {
     $36 = $lnk;
     $37 = (($36) + 236|0);
     $38 = (($37) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)>=(0);
     $41 = $40;
    }
    $$expand_i1_val8 = $41&1;
    $0 = $$expand_i1_val8;
    break;
   } else if ((($13|0) == 1)) {
    $18 = $1;
    $ssn = $18;
    $19 = $ssn;
    $20 = (($19) + 96|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 << 16 >> 16;
    $23 = ($22|0)>=(0);
    if ($23) {
     $30 = 1;
    } else {
     $24 = $ssn;
     $25 = (($24) + 96|0);
     $26 = (($25) + 2|0);
     $27 = HEAP16[$26>>1]|0;
     $28 = $27 << 16 >> 16;
     $29 = ($28|0)>=(0);
     $30 = $29;
    }
    $$expand_i1_val6 = $30&1;
    $0 = $$expand_i1_val6;
    break;
   } else {
    ___assert_fail((6424|0),(6256|0),861,(8064|0));
    // unreachable;
   }
  } else {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = $0;
 $42 = $$pre_trunc&1;
 STACKTOP = sp;return ($42|0);
}
function _pni_endpoint_live($endpoint) {
 $endpoint = $endpoint|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = (_pni_connection_live($4)|0);
  $$expand_i1_val = $5&1;
  $0 = $$expand_i1_val;
 } else if ((($3|0) == 3) | (($3|0) == 2)) {
  $8 = $1;
  $9 = (_pni_link_live($8)|0);
  $$expand_i1_val4 = $9&1;
  $0 = $$expand_i1_val4;
 } else if ((($3|0) == 1)) {
  $6 = $1;
  $7 = (_pni_session_live($6)|0);
  $$expand_i1_val2 = $7&1;
  $0 = $$expand_i1_val2;
 } else {
  ___assert_fail((6424|0),(6256|0),888,(8080|0));
  // unreachable;
 }
 $$pre_trunc = $0;
 $10 = $$pre_trunc&1;
 STACKTOP = sp;return ($10|0);
}
function _pn_ep_parent($endpoint) {
 $endpoint = $endpoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $endpoint;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 3) | (($3|0) == 2)) {
  $7 = $1;
  $8 = (($7) + 256|0);
  $9 = HEAP32[$8>>2]|0;
  $0 = $9;
 } else if ((($3|0) == 0)) {
  $0 = 0;
 } else if ((($3|0) == 1)) {
  $4 = $1;
  $5 = (($4) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 } else {
  ___assert_fail((6424|0),(6256|0),416,(8104|0));
  // unreachable;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _pni_free_children($children,$freed) {
 $children = $children|0;
 $freed = $freed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endpoint = 0, $endpoint1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $children;
 $1 = $freed;
 while(1) {
  $2 = $0;
  $3 = (_pn_list_size($2)|0);
  $4 = ($3>>>0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = (_pn_list_get($5,0)|0);
  $endpoint = $6;
  $7 = $endpoint;
  $8 = (($7) + 58|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&1;
  if ($10) {
   label = 4;
   break;
  }
  $11 = $endpoint;
  _pn_free($11);
 }
 if ((label|0) == 4) {
  ___assert_fail((8120|0),(6256|0),442,(8144|0));
  // unreachable;
 }
 while(1) {
  $12 = $1;
  $13 = (_pn_list_size($12)|0);
  $14 = ($13>>>0)>(0);
  if (!($14)) {
   label = 11;
   break;
  }
  $15 = $1;
  $16 = (_pn_list_get($15,0)|0);
  $endpoint1 = $16;
  $17 = $endpoint1;
  $18 = (($17) + 58|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  if ($20) {
   label = 9;
   break;
  }
  $21 = $endpoint1;
  _pn_free($21);
 }
 if ((label|0) == 9) {
  ___assert_fail((8120|0),(6256|0),448,(8144|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  $22 = $0;
  _pn_free($22);
  $23 = $1;
  _pn_free($23);
  STACKTOP = sp;return;
 }
}
function _endpoint_event($type,$open) {
 $type = $type|0;
 $open = $open|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $3 = $open&1;
 $2 = $3;
 $4 = $1;
 if ((($4|0) == 1)) {
  $8 = $2;
  $9 = $8&1;
  $10 = $9 ? 14 : 16;
  $0 = $10;
 } else if ((($4|0) == 0)) {
  $5 = $2;
  $6 = $5&1;
  $7 = $6 ? 8 : 10;
  $0 = $7;
 } else if ((($4|0) == 3) | (($4|0) == 2)) {
  $11 = $2;
  $12 = $11&1;
  $13 = $12 ? 20 : 22;
  $0 = $13;
 } else {
  ___assert_fail((6424|0),(6256|0),62,(8240|0));
  // unreachable;
 }
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _pn_event_inspect($event,$dst) {
 $event = $event|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $event;
 $2 = $dst;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((8584|0),(8344|0),212,(9632|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((9656|0),(8344|0),213,(9632|0));
  // unreachable;
 }
 $7 = $1;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_pn_event_type_name($9)|0);
 $name = $10;
 $11 = $name;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  $14 = $1;
  $15 = (($14) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_pn_event_type_name($16)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  $18 = (_pn_string_addf($13,9664,$vararg_buffer)|0);
  $err = $18;
 } else {
  $19 = $2;
  $20 = $1;
  $21 = (($20) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $22;
  $23 = (_pn_string_addf($19,9672,$vararg_buffer1)|0);
  $err = $23;
 }
 $24 = $err;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $err;
  $0 = $26;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $27 = $1;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 do {
  if ($30) {
   $31 = $2;
   $32 = (_pn_string_addf($31,9680,$vararg_buffer4)|0);
   $err = $32;
   $33 = $err;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $err;
    $0 = $35;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
   $36 = $1;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $2;
   $43 = (_pn_class_inspect($38,$41,$42)|0);
   $err = $43;
   $44 = $err;
   $45 = ($44|0)!=(0);
   if (!($45)) {
    break;
   }
   $46 = $err;
   $0 = $46;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  }
 } while(0);
 $47 = $2;
 $48 = (_pn_string_addf($47,9688,$vararg_buffer6)|0);
 $0 = $48;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _pn_event_finalize($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $0;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $0;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   (_pn_class_decref($11,$14)|0);
  }
 }
 $15 = $0;
 $16 = HEAP32[$15>>2]|0;
 $pool = $16;
 $17 = $pool;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $pool;
  $20 = (_pn_refcount($19)|0);
  $21 = ($20|0)>(1);
  if ($21) {
   $22 = $0;
   HEAP32[$22>>2] = 0;
   $23 = $0;
   $24 = (($23) + 20|0);
   HEAP32[$24>>2] = 0;
   $25 = $0;
   $26 = (($25) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = $0;
   $28 = (($27) + 8|0);
   HEAP32[$28>>2] = 0;
   $29 = $0;
   $30 = (($29) + 16|0);
   HEAP32[$30>>2] = 0;
   $31 = $0;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   _pn_record_clear($33);
   $34 = $pool;
   $35 = $0;
   (_pn_list_add($34,$35)|0);
   $39 = $pool;
   (_pn_decref($39)|0);
   STACKTOP = sp;return;
  }
 }
 $36 = $0;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 (_pn_decref($38)|0);
 $39 = $pool;
 (_pn_decref($39)|0);
 STACKTOP = sp;return;
}
function _pn_event_initialize($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = $0;
 $3 = (($2) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = (_pn_record()|0);
 $11 = $0;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _pn_collector_inspect($collector,$dst) {
 $collector = $collector|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $event = 0, $first = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $collector;
 $2 = $dst;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((8328|0),(8344|0),55,(9792|0));
  // unreachable;
 }
 $5 = $2;
 $6 = (_pn_string_addf($5,9816,$vararg_buffer)|0);
 $err = $6;
 $7 = $err;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $err;
  $0 = $9;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $event = $12;
 $first = 1;
 while(1) {
  $13 = $event;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 15;
   break;
  }
  $15 = $first;
  $16 = $15&1;
  if ($16) {
   $first = 0;
  } else {
   $17 = $2;
   $18 = (_pn_string_addf($17,9680,$vararg_buffer1)|0);
   $err = $18;
   $19 = $err;
   $20 = ($19|0)!=(0);
   if ($20) {
    label = 10;
    break;
   }
  }
  $22 = $event;
  $23 = $2;
  $24 = (_pn_inspect($22,$23)|0);
  $err = $24;
  $25 = $err;
  $26 = ($25|0)!=(0);
  if ($26) {
   label = 13;
   break;
  }
  $28 = $event;
  $29 = (($28) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $event = $30;
 }
 if ((label|0) == 10) {
  $21 = $err;
  $0 = $21;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 13) {
  $27 = $err;
  $0 = $27;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 15) {
  $31 = $2;
  $32 = (_pn_string_addf($31,9824,$vararg_buffer3)|0);
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _pn_collector_finalize($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = $0;
 _pn_collector_drain($1);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 (_pn_decref($3)|0);
 STACKTOP = sp;return;
}
function _pn_collector_initialize($collector) {
 $collector = $collector|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $collector;
 $1 = HEAP32[80>>2]|0;
 $2 = (_pn_list($1,0)|0);
 $3 = $0;
 HEAP32[$3>>2] = $2;
 $4 = $0;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 12|0);
 HEAP8[$9>>0] = 0;
 STACKTOP = sp;return;
}
function _pni_maybe_post_closed($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (_pni_transport_collector($1)|0);
 $collector = $2;
 $3 = $0;
 $4 = (($3) + 242|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = (($7) + 241|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $collector;
 $12 = HEAP32[80>>2]|0;
 $13 = $0;
 (_pn_collector_put($11,$12,$13,34)|0);
 STACKTOP = sp;return;
}
function _allocate_alias($aliases) {
 $aliases = $aliases|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $aliases;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(65536);
  if (!($2)) {
   label = 7;
   break;
  }
  $3 = $0;
  $4 = $i;
  $5 = (_pn_hash_get($3,$4)|0);
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 if ((label|0) == 4) {
  $7 = $i;
  $8 = $7&65535;
  STACKTOP = sp;return ($8|0);
 }
 else if ((label|0) == 7) {
  ___assert_fail((12072|0),(10248|0),1810,(12080|0));
  // unreachable;
 }
 return (0)|0;
}
function _pni_default_tracer($transport,$message) {
 $transport = $transport|0;
 $message = $message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $transport;
 $1 = $message;
 $2 = HEAP32[_stderr>>2]|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 (_fprintf(($2|0),(12424|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _pn_io_layer_setup($transport,$layer) {
 $transport = $transport|0;
 $layer = $layer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $layer;
 $2 = $1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  ___assert_fail((12712|0),(10248|0),181,(12728|0));
  // unreachable;
 }
 $4 = $0;
 $5 = (($4) + 245|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if ($7) {
  $8 = $0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $0;
   $13 = (_pn_ssl_allow_unsecured($12)|0);
   if ($13) {
    $14 = $1;
    $15 = (($14) + 1)|0;
    $1 = $15;
    $16 = $0;
    $17 = (($16) + 76|0);
    $18 = (($17) + ($14<<2)|0);
    HEAP32[$18>>2] = 10112;
    STACKTOP = sp;return;
   }
  }
 }
 $19 = $0;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $1;
  $24 = (($23) + 1)|0;
  $1 = $24;
  $25 = $0;
  $26 = (($25) + 76|0);
  $27 = (($26) + ($23<<2)|0);
  HEAP32[$27>>2] = 15088;
 }
 $28 = $0;
 $29 = (($28) + 245|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&1;
 if ($31) {
  $32 = $1;
  $33 = (($32) + 1)|0;
  $1 = $33;
  $34 = $0;
  $35 = (($34) + 76|0);
  $36 = (($35) + ($32<<2)|0);
  HEAP32[$36>>2] = 10112;
  STACKTOP = sp;return;
 }
 $37 = $0;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $1;
  $42 = (($41) + 1)|0;
  $1 = $42;
  $43 = $0;
  $44 = (($43) + 76|0);
  $45 = (($44) + ($41<<2)|0);
  HEAP32[$45>>2] = 14344;
 }
 $46 = $1;
 $47 = (($46) + 1)|0;
 $1 = $47;
 $48 = $0;
 $49 = (($48) + 76|0);
 $50 = (($49) + ($46<<2)|0);
 HEAP32[$50>>2] = 10032;
 STACKTOP = sp;return;
}
function _pn_sasl_output($transport,$bytes,$size) {
 $transport = $transport|0;
 $bytes = $bytes|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sasl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $transport;
 $2 = $bytes;
 $3 = $size;
 $4 = $1;
 _pn_sasl_process($4);
 $5 = $1;
 _pni_post_sasl_frame($5);
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $sasl = $8;
 $9 = $1;
 $10 = (($9) + 156|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $sasl;
  $14 = (_pni_sasl_is_final_output_state($13)|0);
  if ($14) {
   $15 = $sasl;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $sasl;
    $20 = (_pni_sasl_is_final_input_state($19)|0);
    if ($20) {
     $21 = $1;
     (_pn_transport_close_tail($21)|0);
    }
   }
   $0 = -1;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $22 = $1;
 $23 = $2;
 $24 = $3;
 $25 = (_pn_dispatcher_output($22,$23,$24)|0);
 $0 = $25;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _pni_sasl_is_final_input_state($sasl) {
 $sasl = $sasl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $desired_state = 0, $last_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sasl;
 $1 = $0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $last_state = $3;
 $4 = $0;
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $desired_state = $6;
 $7 = $last_state;
 $8 = ($7|0)==(6);
 if ($8) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 $9 = $desired_state;
 $10 = ($9|0)==(7);
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _pni_sasl_is_final_output_state($sasl) {
 $sasl = $sasl|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last_state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sasl;
 $1 = $0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $last_state = $3;
 $4 = $last_state;
 $5 = ($4|0)==(5);
 if ($5) {
  $10 = 1;
 } else {
  $6 = $last_state;
  $7 = ($6|0)==(6);
  if ($7) {
   $10 = 1;
  } else {
   $8 = $last_state;
   $9 = ($8|0)==(7);
   $10 = $9;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _pni_post_sasl_frame($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $count = 0, $desired_state = 0, $mechlist = 0, $mechs = 0, $out = 0, $sasl = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer = sp;
 $out = sp + 176|0;
 $mechs = sp + 104|0;
 $mechlist = sp + 96|0;
 $count = sp + 92|0;
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $sasl = $3;
 $4 = $sasl;
 $5 = (($4) + 36|0);
 ;HEAP32[$out+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$out+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $sasl;
 $7 = (($6) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $desired_state = $8;
 L1: while(1) {
  $9 = $sasl;
  $10 = (($9) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $sasl;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)>($14>>>0);
  if (!($15)) {
   label = 23;
   break;
  }
  $16 = $desired_state;
  L4: do {
   switch ($16|0) {
   case 3:  {
    $48 = $0;
    $49 = HEAP32[$out>>2]|0;
    $50 = (($out) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $vararg_buffer10;
    $53 = $52;
    HEAP32[$53>>2] = 67;
    $54 = (($52) + 4)|0;
    $55 = $54;
    HEAP32[$55>>2] = 0;
    $vararg_ptr13 = (($vararg_buffer10) + 8|0);
    HEAP32[$vararg_ptr13>>2] = $49;
    $vararg_ptr14 = (($vararg_buffer10) + 12|0);
    HEAP32[$vararg_ptr14>>2] = $51;
    (_pn_post_frame($48,1,0,14728,$vararg_buffer10)|0);
    $56 = $0;
    _pni_emit($56);
    break;
   }
   case 2:  {
    HEAP32[$mechlist>>2] = 0;
    HEAP32[$count>>2] = 0;
    $33 = $0;
    $34 = (_pni_sasl_impl_list_mechs($33,$mechlist)|0);
    $35 = ($34|0)>(0);
    if ($35) {
     $36 = HEAP32[$mechlist>>2]|0;
     $37 = $sasl;
     $38 = (($37) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     _pni_split_mechs($36,$39,$mechs,$count);
    }
    $40 = $0;
    $41 = HEAP32[$count>>2]|0;
    $42 = $vararg_buffer4;
    $43 = $42;
    HEAP32[$43>>2] = 64;
    $44 = (($42) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = 0;
    $vararg_ptr7 = (($vararg_buffer4) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 21;
    $vararg_ptr8 = (($vararg_buffer4) + 12|0);
    HEAP32[$vararg_ptr8>>2] = $41;
    $vararg_ptr9 = (($vararg_buffer4) + 16|0);
    HEAP32[$vararg_ptr9>>2] = $mechs;
    (_pn_post_frame($40,1,0,14712,$vararg_buffer4)|0);
    $46 = HEAP32[$mechlist>>2]|0;
    _free($46);
    $47 = $0;
    _pni_emit($47);
    break;
   }
   case 7:  {
    $70 = $sasl;
    $71 = (($70) + 48|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72>>>0)<(2);
    if ($73) {
     $desired_state = 2;
     continue L1;
    } else {
     $74 = $0;
     $75 = $sasl;
     $76 = (($75) + 32|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $vararg_buffer20;
     $79 = $78;
     HEAP32[$79>>2] = 68;
     $80 = (($78) + 4)|0;
     $81 = $80;
     HEAP32[$81>>2] = 0;
     $vararg_ptr23 = (($vararg_buffer20) + 8|0);
     HEAP32[$vararg_ptr23>>2] = $77;
     (_pn_post_frame($74,1,0,14736,$vararg_buffer20)|0);
     $82 = $0;
     _pni_emit($82);
     break L4;
    }
    break;
   }
   case 4:  {
    $57 = $sasl;
    $58 = (($57) + 48|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59>>>0)<(2);
    if ($60) {
     $desired_state = 2;
     continue L1;
    } else {
     $61 = $0;
     $62 = HEAP32[$out>>2]|0;
     $63 = (($out) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $vararg_buffer15;
     $66 = $65;
     HEAP32[$66>>2] = 66;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = 0;
     $vararg_ptr18 = (($vararg_buffer15) + 8|0);
     HEAP32[$vararg_ptr18>>2] = $62;
     $vararg_ptr19 = (($vararg_buffer15) + 12|0);
     HEAP32[$vararg_ptr19>>2] = $64;
     (_pn_post_frame($61,1,0,14728,$vararg_buffer15)|0);
     $69 = $0;
     _pni_emit($69);
     break L4;
    }
    break;
   }
   case 5:  {
    $29 = $sasl;
    $30 = (($29) + 48|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31>>>0)<(1);
    if ($32) {
     $desired_state = 1;
     continue L1;
    } else {
     break L4;
    }
    break;
   }
   case 0:  {
    break L1;
    break;
   }
   case 6:  {
    $83 = $sasl;
    $84 = (($83) + 48|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85>>>0)<(1);
    if ($86) {
     $desired_state = 1;
     continue L1;
    } else {
     break L4;
    }
    break;
   }
   case 1:  {
    $17 = $0;
    $18 = $sasl;
    $19 = (($18) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$out>>2]|0;
    $22 = (($out) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $vararg_buffer;
    $25 = $24;
    HEAP32[$25>>2] = 65;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = 0;
    $vararg_ptr1 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr1>>2] = $20;
    $vararg_ptr2 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr2>>2] = $21;
    $vararg_ptr3 = (($vararg_buffer) + 16|0);
    HEAP32[$vararg_ptr3>>2] = $23;
    (_pn_post_frame($17,1,0,14704,$vararg_buffer)|0);
    $28 = $0;
    _pni_emit($28);
    break;
   }
   default: {
   }
   }
  } while(0);
  $87 = $desired_state;
  $88 = $sasl;
  $89 = (($88) + 48|0);
  HEAP32[$89>>2] = $87;
  $90 = $sasl;
  $91 = (($90) + 44|0);
  $92 = HEAP32[$91>>2]|0;
  $desired_state = $92;
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _pn_sasl_process($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sasl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $sasl = $3;
 $4 = $sasl;
 $5 = (($4) + 52|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $sasl;
 $9 = (($8) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)<(2);
 if ($11) {
  $12 = $0;
  _pni_sasl_server_init($12);
 }
 STACKTOP = sp;return;
}
function _pni_sasl_server_init($transport) {
 $transport = $transport|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transport;
 $1 = $0;
 $2 = (_pni_init_server($1)|0);
 if ($2) {
  $3 = $0;
  _pni_sasl_set_desired_state($3,2);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _pn_sasl_input($transport,$bytes,$available) {
 $transport = $transport|0;
 $bytes = $bytes|0;
 $available = $available|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $n = 0;
 var $sasl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp + 24|0;
 $1 = $transport;
 $2 = $bytes;
 $3 = $available;
 $4 = $1;
 _pn_sasl_process($4);
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $sasl = $7;
 HEAP8[$dummy>>0] = 0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (_pn_dispatcher_input($8,$9,$10,0,$dummy)|0);
 $n = $11;
 $12 = $n;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $sasl;
  $15 = (_pni_sasl_is_final_input_state($14)|0);
  if ($15) {
   $0 = -1;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 }
 $16 = $n;
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01$lcssa = 0, $$019 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, $w$0$lcssa = 0, $w$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$01$lcssa = $s;
  } else {
   $5 = $c&255;
   $$019 = $s;
   while(1) {
    $12 = HEAP8[$$019>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $8 = (($$019) + 1|0);
    if ($or$cond) {
     $$0 = $$019;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$01$lcssa = $8;
     break L5;
    } else {
     $$019 = $8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$01$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $30 = $16;$w$05 = $$01$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$05) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$05;
     break L12;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$05 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$01$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond4 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond4) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i17 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i16 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i12 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i15 = 0, $$mem$0$us$i = 0, $$pr5$i = 0, $$pr5$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0;
 var $div$i = 0, $div$us$i = 0, $div3$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i11 = 0, $ip$0$ph77$i = 0, $ip$0$ph77142$i = 0, $ip$0$ph80$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph57$i = 0, $ip$1$ph60$i = 0, $jp$0$ph24$ph71$i = 0, $jp$0$ph2465$i = 0, $jp$0$ph81$i = 0, $jp$1$ph15$ph51$i = 0, $jp$1$ph1545$i = 0, $jp$1$ph61$i = 0, $k$032$i = 0;
 var $k$121$i = 0, $k$2$us$i = 0, $k$311$i = 0, $k$311$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$040$i = 0, $mem$0$us$i = 0, $or$cond$i = 0, $or$cond$i13 = 0, $or$cond4$us$i = 0, $p$0$ph$ph69$i = 0, $p$0$ph$ph69146$i = 0, $p$0$ph$ph72$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph49$i = 0, $p$1$ph$ph52$i = 0, $p$3151$i = 0, $shift$i = 0, $z$0$i = 0;
 var $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$31 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$31 = 0;
    break;
   } else {
    $$01$i = $26;$275 = $27;$hw$0$in2$i = $29;
   }
  }
  $32 = ($31<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $32 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i16 = $66;$$lcssa$i15 = 0;
  } else {
   $$02$i12 = $66;$hw$03$i11 = $92;
   while(1) {
    $94 = $hw$03$i11 << 8;
    $95 = (($$02$i12) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i13 = $99 | $100;
    if ($or$cond$i13) {
     $$0$lcssa$i16 = $95;$$lcssa$i15 = $99;
     break;
    } else {
     $$02$i12 = $95;$hw$03$i11 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i16) + -3|0);
  $$$i17 = $$lcssa$i15 ? 0 : $101;
  $$0 = $$$i17;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$040$i = 0;
 while(1) {
  $102 = (($3) + ($l$040$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 79;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div3$i = ($106&255) >>> 5;
  $109 = $div3$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$040$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   break;
  } else {
   $106 = $117;$l$040$i = $113;
  }
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 $119 = ($113>>>0)>(1);
 L49: do {
  if ($119) {
   $276 = 1;$ip$0$ph80$i = -1;$jp$0$ph81$i = 0;
   L50: while(1) {
    $277 = $276;$jp$0$ph24$ph71$i = $jp$0$ph81$i;$p$0$ph$ph72$i = 1;
    while(1) {
     $278 = $277;$jp$0$ph2465$i = $jp$0$ph24$ph71$i;
     L54: while(1) {
      $121 = $278;$k$032$i = 1;
      while(1) {
       $126 = (($k$032$i) + ($ip$0$ph80$i))|0;
       $127 = (($n) + ($126)|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = (($n) + ($121)|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = ($128<<24>>24)==($130<<24>>24);
       if (!($131)) {
        break L54;
       }
       $132 = ($k$032$i|0)==($p$0$ph$ph72$i|0);
       $124 = (($k$032$i) + 1)|0;
       if ($132) {
        break;
       }
       $123 = (($124) + ($jp$0$ph2465$i))|0;
       $125 = ($123>>>0)<($113>>>0);
       if ($125) {
        $121 = $123;$k$032$i = $124;
       } else {
        $ip$0$ph77$i = $ip$0$ph80$i;$p$0$ph$ph69$i = $p$0$ph$ph72$i;
        break L50;
       }
      }
      $133 = (($jp$0$ph2465$i) + ($p$0$ph$ph72$i))|0;
      $134 = (($133) + 1)|0;
      $135 = ($134>>>0)<($113>>>0);
      if ($135) {
       $278 = $134;$jp$0$ph2465$i = $133;
      } else {
       $ip$0$ph77$i = $ip$0$ph80$i;$p$0$ph$ph69$i = $p$0$ph$ph72$i;
       break L50;
      }
     }
     $136 = ($128&255)>($130&255);
     $137 = (($121) - ($ip$0$ph80$i))|0;
     if (!($136)) {
      break;
     }
     $120 = (($121) + 1)|0;
     $122 = ($120>>>0)<($113>>>0);
     if ($122) {
      $277 = $120;$jp$0$ph24$ph71$i = $121;$p$0$ph$ph72$i = $137;
     } else {
      $ip$0$ph77$i = $ip$0$ph80$i;$p$0$ph$ph69$i = $137;
      break L50;
     }
    }
    $138 = (($jp$0$ph2465$i) + 1)|0;
    $139 = (($jp$0$ph2465$i) + 2)|0;
    $140 = ($139>>>0)<($113>>>0);
    if ($140) {
     $276 = $139;$ip$0$ph80$i = $jp$0$ph2465$i;$jp$0$ph81$i = $138;
    } else {
     $ip$0$ph77$i = $jp$0$ph2465$i;$p$0$ph$ph69$i = 1;
     break;
    }
   }
   $279 = 1;$ip$1$ph60$i = -1;$jp$1$ph61$i = 0;
   while(1) {
    $281 = $279;$jp$1$ph15$ph51$i = $jp$1$ph61$i;$p$1$ph$ph52$i = 1;
    while(1) {
     $280 = $281;$jp$1$ph1545$i = $jp$1$ph15$ph51$i;
     L69: while(1) {
      $148 = $280;$k$121$i = 1;
      while(1) {
       $144 = (($k$121$i) + ($ip$1$ph60$i))|0;
       $145 = (($n) + ($144)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = (($n) + ($148)|0);
       $149 = HEAP8[$147>>0]|0;
       $150 = ($146<<24>>24)==($149<<24>>24);
       if (!($150)) {
        break L69;
       }
       $151 = ($k$121$i|0)==($p$1$ph$ph52$i|0);
       $142 = (($k$121$i) + 1)|0;
       if ($151) {
        break;
       }
       $141 = (($142) + ($jp$1$ph1545$i))|0;
       $143 = ($141>>>0)<($113>>>0);
       if ($143) {
        $148 = $141;$k$121$i = $142;
       } else {
        $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $ip$1$ph60$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = $p$1$ph$ph52$i;
        break L49;
       }
      }
      $152 = (($jp$1$ph1545$i) + ($p$1$ph$ph52$i))|0;
      $153 = (($152) + 1)|0;
      $154 = ($153>>>0)<($113>>>0);
      if ($154) {
       $280 = $153;$jp$1$ph1545$i = $152;
      } else {
       $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $ip$1$ph60$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = $p$1$ph$ph52$i;
       break L49;
      }
     }
     $155 = ($146&255)<($149&255);
     $156 = (($148) - ($ip$1$ph60$i))|0;
     if (!($155)) {
      break;
     }
     $157 = (($148) + 1)|0;
     $158 = ($157>>>0)<($113>>>0);
     if ($158) {
      $281 = $157;$jp$1$ph15$ph51$i = $148;$p$1$ph$ph52$i = $156;
     } else {
      $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $ip$1$ph60$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = $156;
      break L49;
     }
    }
    $159 = (($jp$1$ph1545$i) + 1)|0;
    $160 = (($jp$1$ph1545$i) + 2)|0;
    $161 = ($160>>>0)<($113>>>0);
    if ($161) {
     $279 = $160;$ip$1$ph60$i = $jp$1$ph1545$i;$jp$1$ph61$i = $159;
    } else {
     $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $jp$1$ph1545$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph77142$i = -1;$ip$1$ph57$i = -1;$p$0$ph$ph69146$i = 1;$p$1$ph$ph49$i = 1;
  }
 } while(0);
 $162 = (($ip$1$ph57$i) + 1)|0;
 $163 = (($ip$0$ph77142$i) + 1)|0;
 $164 = ($162>>>0)>($163>>>0);
 $p$1$p$0$i = $164 ? $p$1$ph$ph49$i : $p$0$ph$ph69146$i;
 $ip$1$ip$0$i = $164 ? $ip$1$ph57$i : $ip$0$ph77142$i;
 $165 = (($n) + ($p$1$p$0$i)|0);
 $166 = (($ip$1$ip$0$i) + 1)|0;
 $167 = (_memcmp($n,$165,$166)|0);
 $168 = ($167|0)==(0);
 if ($168) {
  $174 = (($113) - ($p$1$p$0$i))|0;
  $175 = $113 | 63;
  $176 = ($113|0)==($p$1$p$0$i|0);
  if ($176) {
   $232 = $175;$p$3151$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L83: while(1) {
    $178 = $z$0$us$i;
    $179 = $$02$us$i;
    $180 = (($178) - ($179))|0;
    $181 = ($180>>>0)<($113>>>0);
    do {
     if ($181) {
      $182 = (_memchr($z$0$us$i,0,$175)|0);
      $183 = ($182|0)==(0|0);
      if ($183) {
       $187 = (($z$0$us$i) + ($175)|0);
       $z$1$us$i = $187;
       break;
      } else {
       $184 = $182;
       $185 = (($184) - ($179))|0;
       $186 = ($185>>>0)<($113>>>0);
       if ($186) {
        $$0 = 0;
        label = 79;
        break L83;
       } else {
        $z$1$us$i = $182;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $188 = (($$02$us$i) + ($l$040$i)|0);
    $189 = HEAP8[$188>>0]|0;
    $div$us$i = ($189&255) >>> 5;
    $190 = $div$us$i&255;
    $191 = (($byteset$i) + ($190<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & 31;
    $194 = $193&255;
    $195 = 1 << $194;
    $196 = $195 & $192;
    $197 = ($196|0)==(0);
    if ($197) {
     $227 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $227;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $198 = $189&255;
    $199 = (($shift$i) + ($198<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($113) - ($200))|0;
    $202 = ($113|0)==($200|0);
    if (!($202)) {
     $203 = ($mem$0$us$i|0)!=(0);
     $204 = ($201>>>0)<($p$1$p$0$i>>>0);
     $or$cond4$us$i = $203 & $204;
     $k$2$us$i = $or$cond4$us$i ? $174 : $201;
     $205 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $205;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $206 = ($166>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
    $207 = (($n) + ($$mem$0$us$i)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = ($208<<24>>24)==(0);
    L97: do {
     if ($209) {
      $k$4$us$i = $166;
     } else {
      $$pr5$us$i = $208;$k$311$us$i = $$mem$0$us$i;
      while(1) {
       $214 = (($$02$us$i) + ($k$311$us$i)|0);
       $215 = HEAP8[$214>>0]|0;
       $216 = ($$pr5$us$i<<24>>24)==($215<<24>>24);
       $211 = (($k$311$us$i) + 1)|0;
       if (!($216)) {
        break;
       }
       $210 = (($n) + ($211)|0);
       $212 = HEAP8[$210>>0]|0;
       $213 = ($212<<24>>24)==(0);
       if ($213) {
        $k$4$us$i = $166;
        break L97;
       } else {
        $$pr5$us$i = $212;$k$311$us$i = $211;
       }
      }
      $217 = (($k$311$us$i) - ($ip$1$ip$0$i))|0;
      $218 = (($$02$us$i) + ($217)|0);
      $$02$us$i = $218;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($219)) {
      $$0 = $$02$us$i;
      label = 79;
      break L83;
     }
     $220 = (($k$4$us$i) + -1)|0;
     $221 = (($n) + ($220)|0);
     $222 = HEAP8[$221>>0]|0;
     $223 = (($$02$us$i) + ($220)|0);
     $224 = HEAP8[$223>>0]|0;
     $225 = ($222<<24>>24)==($224<<24>>24);
     if ($225) {
      $k$4$us$i = $220;
     } else {
      break;
     }
    }
    $226 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $226;$mem$0$us$i = $174;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 79) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $169 = (($113) - ($ip$1$ip$0$i))|0;
  $170 = (($169) + -1)|0;
  $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
  $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
  $172 = (($ip$1$ip$0$$i) + 1)|0;
  $173 = $113 | 63;
  $232 = $173;$p$3151$i = $172;
 }
 $177 = (($n) + ($166)|0);
 $$02$i = $3;$z$0$i = $3;
 L110: while(1) {
  $228 = $z$0$i;
  $229 = $$02$i;
  $230 = (($228) - ($229))|0;
  $231 = ($230>>>0)<($113>>>0);
  do {
   if ($231) {
    $233 = (_memchr($z$0$i,0,$232)|0);
    $234 = ($233|0)==(0|0);
    if ($234) {
     $238 = (($z$0$i) + ($232)|0);
     $z$1$i = $238;
     break;
    } else {
     $235 = $233;
     $236 = (($235) - ($229))|0;
     $237 = ($236>>>0)<($113>>>0);
     if ($237) {
      $$0 = 0;
      label = 79;
      break L110;
     } else {
      $z$1$i = $233;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $239 = (($$02$i) + ($l$040$i)|0);
  $240 = HEAP8[$239>>0]|0;
  $div$i = ($240&255) >>> 5;
  $241 = $div$i&255;
  $242 = (($byteset$i) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $240 & 31;
  $245 = $244&255;
  $246 = 1 << $245;
  $247 = $246 & $243;
  $248 = ($247|0)==(0);
  if ($248) {
   $255 = (($$02$i) + ($113)|0);
   $$02$i = $255;$z$0$i = $z$1$i;
   continue;
  }
  $249 = $240&255;
  $250 = (($shift$i) + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ($113|0)==($251|0);
  if (!($252)) {
   $253 = (($113) - ($251))|0;
   $254 = (($$02$i) + ($253)|0);
   $$02$i = $254;$z$0$i = $z$1$i;
   continue;
  }
  $256 = HEAP8[$177>>0]|0;
  $257 = ($256<<24>>24)==(0);
  L124: do {
   if ($257) {
    $k$4$i = $166;
   } else {
    $$pr5$i = $256;$k$311$i = $166;
    while(1) {
     $262 = (($$02$i) + ($k$311$i)|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = ($$pr5$i<<24>>24)==($263<<24>>24);
     $259 = (($k$311$i) + 1)|0;
     if (!($264)) {
      break;
     }
     $258 = (($n) + ($259)|0);
     $260 = HEAP8[$258>>0]|0;
     $261 = ($260<<24>>24)==(0);
     if ($261) {
      $k$4$i = $166;
      break L124;
     } else {
      $$pr5$i = $260;$k$311$i = $259;
     }
    }
    $265 = (($k$311$i) - ($ip$1$ip$0$i))|0;
    $266 = (($$02$i) + ($265)|0);
    $$02$i = $266;$z$0$i = $z$1$i;
    continue L110;
   }
  } while(0);
  while(1) {
   $267 = ($k$4$i|0)==(0);
   if ($267) {
    $$0 = $$02$i;
    label = 79;
    break L110;
   }
   $268 = (($k$4$i) + -1)|0;
   $269 = (($n) + ($268)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = (($$02$i) + ($268)|0);
   $272 = HEAP8[$271>>0]|0;
   $273 = ($270<<24>>24)==($272<<24>>24);
   if ($273) {
    $k$4$i = $268;
   } else {
    break;
   }
  }
  $274 = (($$02$i) + ($p$3151$i)|0);
  $$02$i = $274;$z$0$i = $z$1$i;
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[15104>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((15104 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((15104 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[15104>>2] = $22;
     } else {
      $23 = HEAP32[((15104 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((15104 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((15104 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((15104 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[15104>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((15104 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((15104 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((15104 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((15104 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[15104>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[15104>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((15104 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((15104 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((15104 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((15104 + 8|0))>>2] = $81;
     HEAP32[((15104 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((15104 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((15104 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((15104 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((15104 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((15104 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((15104 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((15104 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((15104 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((15104 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((15104 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((15104 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((15104 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[15104>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[15104>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((15104 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((15104 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((15104 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((15104 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((15104 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((15104 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((15104 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((15104 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((15104 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((15104 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((15104 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((15104 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((15104 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((15104 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((15104 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((15104 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((15104 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[15104>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[15104>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((15104 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((15104 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((15104 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((15104 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((15104 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((15104 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L108;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((15104 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((15104 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((15104 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((15104 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((15104 + 20|0))>>2] = $514;
   HEAP32[((15104 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((15104 + 8|0))>>2] = 0;
   HEAP32[((15104 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((15104 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((15104 + 12|0))>>2] = $528;
  $529 = HEAP32[((15104 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((15104 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[15576>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((15576 + 8|0))>>2] = $538;
    HEAP32[((15576 + 4|0))>>2] = $538;
    HEAP32[((15576 + 12|0))>>2] = -1;
    HEAP32[((15576 + 16|0))>>2] = -1;
    HEAP32[((15576 + 20|0))>>2] = 0;
    HEAP32[((15104 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[15576>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((15576 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((15104 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((15104 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((15104 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((15104 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((15104 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((15104 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((15576 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((15104 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((15104 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((15576 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((15104 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((15104 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((15104 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((15104 + 432|0))>>2] = $633;
  $634 = HEAP32[((15104 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((15104 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((15104 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((15104 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((15104 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((15104 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((15104 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((15104 + 460|0))>>2] = 0;
    $641 = HEAP32[15576>>2]|0;
    HEAP32[((15104 + 36|0))>>2] = $641;
    HEAP32[((15104 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((15104 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((15104 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((15104 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((15104 + 24|0))>>2] = $654;
    HEAP32[((15104 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((15576 + 16|0))>>2]|0;
    HEAP32[((15104 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((15104 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((15104 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((15104 + 24|0))>>2] = $684;
       HEAP32[((15104 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((15576 + 16|0))>>2]|0;
       HEAP32[((15104 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((15104 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((15104 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((15104 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((15104 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((15104 + 12|0))>>2] = $731;
        HEAP32[((15104 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((15104 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((15104 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((15104 + 8|0))>>2] = $737;
         HEAP32[((15104 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((15104 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[15104>>2]|0;
            $764 = $763 & $762;
            HEAP32[15104>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((15104 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((15104 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((15104 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((15104 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((15104 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((15104 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((15104 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[15104>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[15104>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((15104 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((15104 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((15104 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((15104 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((15104 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((15104 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((15104 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((15104 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((15104 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((15104 + 24|0))>>2] = $953;
    HEAP32[((15104 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((15576 + 16|0))>>2]|0;
    HEAP32[((15104 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((15104 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((15104 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((15104 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((15104 + 448|0))+12>>2]|0;
    HEAP32[((15104 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((15104 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((15104 + 460|0))>>2] = 0;
    HEAP32[((15104 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((15104 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[15104>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[15104>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((15104 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((15104 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((15104 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((15104 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((15104 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((15104 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((15104 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((15104 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((15104 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((15104 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((15104 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((15104 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((15104 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((15104 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((15104 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((15104 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[15104>>2]|0;
     $36 = $35 & $34;
     HEAP32[15104>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((15104 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((15104 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((15104 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((15104 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((15104 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((15104 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((15104 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((15104 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((15104 + 12|0))>>2] = $120;
   HEAP32[((15104 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((15104 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15104 + 20|0))>>2] = 0;
   HEAP32[((15104 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((15104 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((15104 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((15104 + 8|0))>>2] = $128;
   HEAP32[((15104 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((15104 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((15104 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[15104>>2]|0;
     $152 = $151 & $150;
     HEAP32[15104>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((15104 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((15104 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((15104 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((15104 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((15104 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((15104 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((15104 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((15104 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((15104 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((15104 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((15104 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((15104 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[15104>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[15104>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((15104 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((15104 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((15104 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((15104 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((15104 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((15104 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((15104 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((15104 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((15104 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((15104 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((15104 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((15104 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=16168+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$02 = 0, $$07 = 0, $$07$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$05 = 0, $or$cond = 0, $or$cond3 = 0, $r$0$lcssa = 0, $r$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$07$in = $n;$6 = $1;$l$05 = $_l;$r$06 = $_r;
   while(1) {
    $$07 = (($$07$in) + -1)|0;
    $3 = HEAP8[$r$06>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$07|0)!=(0);
    $or$cond = $4 & $5;
    $7 = ($6<<24>>24)==($3<<24>>24);
    $or$cond3 = $or$cond & $7;
    if (!($or$cond3)) {
     $13 = $6;$r$0$lcssa = $r$06;
     break L4;
    }
    $8 = (($l$05) + 1|0);
    $9 = (($r$06) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$07$in = $$07;$6 = $10;$l$05 = $8;$r$06 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$02 = $16;
 STACKTOP = sp;return ($$02|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((15104 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((15576 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((15104 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((15104 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((15104 + 24|0))>>2] = $36;
  HEAP32[((15104 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((15104 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((15104 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((15104 + 8|0))>>2] = $storemerge21;
  HEAP32[((15104 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((15104 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[15104>>2]|0;
    $88 = $87 & $86;
    HEAP32[15104>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((15104 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((15104 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((15104 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((15104 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((15104 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((15104 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((15104 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((15104 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((15104 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((15104 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[15104>>2]|0;
     $32 = $31 & $30;
     HEAP32[15104>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((15104 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((15104 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((15104 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((15104 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((15104 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((15104 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((15104 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((15104 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((15104 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((15104 + 12|0))>>2] = $115;
   HEAP32[((15104 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((15104 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15104 + 20|0))>>2] = 0;
   HEAP32[((15104 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((15104 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((15104 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((15104 + 8|0))>>2] = $123;
   HEAP32[((15104 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((15104 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[15104>>2]|0;
     $146 = $145 & $144;
     HEAP32[15104>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((15104 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((15104 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((15104 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((15104 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((15104 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((15104 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((15104 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((15104 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((15104 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[15104>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[15104>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((15104 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((15104 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((15104 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((15104 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((15104 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((15104 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((15104 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((15104 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$lcssa95 = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0;
 var $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre258 = 0, $$pre259 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1034$phi = 0;
 var $1035 = 0, $1035$phi = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0;
 var $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0;
 var $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0;
 var $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0;
 var $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0;
 var $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0;
 var $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0106 = 0, $fl$0111 = 0;
 var $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa265 = 0, $i$0160 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1168 = 0, $i$1225$i = 0, $i$2212$i = 0, $i$292 = 0, $i$3204$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1159 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond269 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4264 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext85 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2104 = 0, $storemerge2110 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0161 = 0, $ws$1169 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$096 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1034 = 0;$1035 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   label = 352;
   break;
  } else {
   $1036 = $22;$26 = $23;
  }
  while(1) {
   if ((($1036<<24>>24) == 0)) {
    $$lcssa95 = $26;$z$0$lcssa = $26;
    break;
   } else if ((($1036<<24>>24) == 37)) {
    $28 = $26;$z$096 = $26;
    label = 9;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1036 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = (($28) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa95 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = (($z$096) + 1|0);
     $32 = (($28) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa95 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1035$phi = $1035;$1034$phi = $1034;$23 = $$lcssa95;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1035 = $1035$phi;$1034 = $1034$phi;
   continue;
  }
  $39 = (($$lcssa95) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = (($$lcssa95) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   if ($44) {
    $45 = (($$lcssa95) + 3|0);
    $$pre258 = HEAP8[$45>>0]|0;
    $47 = $$pre258;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $45;
   } else {
    $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
   }
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $$pr = $47;$51 = $46;$fl$0111 = 0;$storemerge2110 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $61 = $$pr;$fl$0106 = $fl$0111;$storemerge2104 = $storemerge2110;
      break L25;
     }
     $55 = $52 | $fl$0111;
     $56 = (($storemerge2110) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = $58 & -32;
     $60 = ($59|0)==(32);
     if ($60) {
      $$pr = $57;$51 = $58;$fl$0111 = $55;$storemerge2110 = $56;
     } else {
      $61 = $57;$fl$0106 = $55;$storemerge2104 = $56;
      break;
     }
    }
   } else {
    $61 = $47;$fl$0106 = 0;$storemerge2104 = $storemerge;
   }
  } while(0);
  $62 = ($61<<24>>24)==(42);
  do {
   if ($62) {
    $63 = (($storemerge2104) + 1|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $isdigittmp5 = (($65) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $66 = (($storemerge2104) + 2|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = ($67<<24>>24)==(36);
     if ($68) {
      $69 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$69>>2] = 10;
      $70 = HEAP8[$63>>0]|0;
      $71 = $70 << 24 >> 24;
      $72 = (($71) + -48)|0;
      $73 = (($nl_arg) + ($72<<3)|0);
      $74 = $73;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($74) + 4)|0;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($storemerge2104) + 3|0);
      $l10n$2 = 1;$storemerge7 = $80;$w$0 = $76;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $81 = ($l10n$1|0)==(0);
     if (!($81)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $97 = $63;$fl$1 = $fl$0106;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $82 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $63;$w$0 = $82;
    }
    $83 = ($w$0|0)<(0);
    if ($83) {
     $84 = $fl$0106 | 8192;
     $85 = (0 - ($w$0))|0;
     $97 = $storemerge7;$fl$1 = $84;$l10n$3 = $l10n$2;$w$1 = $85;
    } else {
     $97 = $storemerge7;$fl$1 = $fl$0106;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $86 = $61 << 24 >> 24;
    $isdigittmp1$i = (($86) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $89 = $86;$92 = $storemerge2104;$i$03$i = 0;
     while(1) {
      $87 = ($i$03$i*10)|0;
      $88 = (($89) + -48)|0;
      $90 = (($88) + ($87))|0;
      $91 = (($92) + 1|0);
      $93 = HEAP8[$91>>0]|0;
      $94 = $93 << 24 >> 24;
      $isdigittmp$i = (($94) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $89 = $94;$92 = $91;$i$03$i = $90;
      } else {
       break;
      }
     }
     $95 = ($90|0)<(0);
     if ($95) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $97 = $91;$fl$1 = $fl$0106;$l10n$3 = $l10n$1;$w$1 = $90;
     }
    } else {
     $97 = $storemerge2104;$fl$1 = $fl$0106;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $96 = HEAP8[$97>>0]|0;
  $98 = ($96<<24>>24)==(46);
  L46: do {
   if ($98) {
    $99 = (($97) + 1|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100<<24>>24)==(42);
    if (!($101)) {
     $122 = $100 << 24 >> 24;
     $isdigittmp1$i22 = (($122) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $125 = $122;$128 = $99;$i$03$i24 = 0;
     } else {
      $1037 = $99;$p$0 = 0;
      break;
     }
     while(1) {
      $123 = ($i$03$i24*10)|0;
      $124 = (($125) + -48)|0;
      $126 = (($124) + ($123))|0;
      $127 = (($128) + 1|0);
      $129 = HEAP8[$127>>0]|0;
      $130 = $129 << 24 >> 24;
      $isdigittmp$i25 = (($130) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $125 = $130;$128 = $127;$i$03$i24 = $126;
      } else {
       $1037 = $127;$p$0 = $126;
       break L46;
      }
     }
    }
    $102 = (($97) + 2|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 << 24 >> 24;
    $isdigittmp3 = (($104) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $105 = (($97) + 3|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = ($106<<24>>24)==(36);
     if ($107) {
      $108 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$108>>2] = 10;
      $109 = HEAP8[$102>>0]|0;
      $110 = $109 << 24 >> 24;
      $111 = (($110) + -48)|0;
      $112 = (($nl_arg) + ($111<<3)|0);
      $113 = $112;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = (($113) + 4)|0;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($97) + 4|0);
      $1037 = $119;$p$0 = $115;
      break;
     }
    }
    $120 = ($l10n$3|0)==(0);
    if (!($120)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $121 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1037 = $102;$p$0 = $121;
    } else {
     $1037 = $102;$p$0 = 0;
    }
   } else {
    $1037 = $97;$p$0 = -1;
   }
  } while(0);
  $132 = $1037;$st$0 = 0;
  while(1) {
   $131 = HEAP8[$132>>0]|0;
   $133 = $131 << 24 >> 24;
   $134 = (($133) + -65)|0;
   $135 = ($134>>>0)>(57);
   if ($135) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $136 = (($132) + 1|0);
   $137 = ((15600 + (($st$0*58)|0)|0) + ($134)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($139) + -1)|0;
   $141 = ($140>>>0)<(8);
   if ($141) {
    $132 = $136;$st$0 = $139;
   } else {
    break;
   }
  }
  $142 = ($138<<24>>24)==(0);
  if ($142) {
   $$0 = -1;
   label = 370;
   break;
  }
  $143 = ($138<<24>>24)==(19);
  $144 = ($argpos$0|0)>(-1);
  L65: do {
   if ($143) {
    if ($144) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1038 = $1034;$1039 = $1035;
     label = 63;
    }
   } else {
    if ($144) {
     $145 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$145>>2] = $139;
     $146 = (($nl_arg) + ($argpos$0<<3)|0);
     $147 = $146;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147) + 4)|0;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $1038 = $149;$1039 = $152;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $153 = ($138&255)>(20);
    if ($153) {
     $187 = $131;$195 = $1034;$222 = $1035;
    } else {
     do {
      switch ($139|0) {
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $173 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $174 = $173&255;
       $175 = $174 << 24 >> 24;
       $176 = ($175|0)<(0);
       $177 = $176 << 31 >> 31;
       $sext = $173 << 24;
       $178 = $sext >> 24;
       $1040 = $177;$1041 = $178;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $160 = $arglist_current14;
       $161 = $160;
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 4)|0;
       $164 = $163;
       $165 = HEAP32[$164>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1040 = $165;$1041 = $162;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $172 & 65535;
       $1040 = 0;$1041 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $155 = $154;
       $1040 = $1035;$1041 = $155;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $179 & 255;
       $1040 = 0;$1041 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1040 = 0;$1041 = $159;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $166 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $167 = $166&65535;
       $168 = $167 << 16 >> 16;
       $169 = ($168|0)<(0);
       $170 = $169 << 31 >> 31;
       $sext85 = $166 << 16;
       $171 = $sext85 >> 16;
       $1040 = $170;$1041 = $171;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$183 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $183;$184 = HEAP32[tempDoublePtr>>2]|0;
       $185 = HEAP32[tempDoublePtr+4>>2]|0;
       $1038 = $184;$1039 = $185;
       label = 63;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$180 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $180;$181 = HEAP32[tempDoublePtr>>2]|0;
       $182 = HEAP32[tempDoublePtr+4>>2]|0;
       $1040 = $182;$1041 = $181;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $156 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $157 = ($156|0)<(0);
       $158 = $157 << 31 >> 31;
       $1040 = $158;$1041 = $156;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1040 = $1035;$1041 = $1034;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1040 = $1039;$1041 = $1038;
    label = 64;
   } else {
    $1034 = $1038;$1035 = $1039;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre259 = HEAP8[$132>>0]|0;
   $187 = $$pre259;$195 = $1041;$222 = $1040;
  }
  $186 = $187 << 24 >> 24;
  $188 = ($st$0|0)!=(0);
  $189 = $186 & 15;
  $190 = ($189|0)==(3);
  $or$cond9 = $188 & $190;
  $191 = $186 & -33;
  $t$0 = $or$cond9 ? $191 : $186;
  $192 = $fl$1 & 8192;
  $193 = ($192|0)==(0);
  $194 = $fl$1 & -65537;
  $fl$1$ = $193 ? $fl$1 : $194;
  L89: do {
   switch ($t$0|0) {
   case 109:  {
    $310 = (___errno_location()|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = (_strerror(($311|0))|0);
    $a$1 = $312;
    label = 96;
    break;
   }
   case 115:  {
    $313 = $195;
    $314 = ($195|0)==(0);
    $$15 = $314 ? 16080 : $313;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $195;
    HEAP32[$5>>2] = 0;
    $1044 = $wc;$1045 = $6;$p$4264 = -1;
    label = 101;
    break;
   }
   case 83:  {
    $321 = $195;
    $322 = ($p$0|0)==(0);
    if ($322) {
     $1046 = $195;$1047 = $321;$i$0$lcssa265 = 0;
     label = 106;
    } else {
     $1044 = $321;$1045 = $195;$p$4264 = $p$0;
     label = 101;
    }
    break;
   }
   case 111:  {
    $243 = ($195|0)==(0);
    $244 = ($222|0)==(0);
    $245 = $243 & $244;
    if ($245) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$247 = $195;$251 = $222;
     while(1) {
      $246 = $247 & 7;
      $248 = $246 | 48;
      $249 = $248&255;
      $250 = (($$03$i42) + -1|0);
      HEAP8[$250>>0] = $249;
      $252 = (_bitshift64Lshr(($247|0),($251|0),3)|0);
      $253 = tempRet0;
      $254 = ($252|0)==(0);
      $255 = ($253|0)==(0);
      $256 = $254 & $255;
      if ($256) {
       $$0$lcssa$i45 = $250;
       break;
      } else {
       $$03$i42 = $250;$247 = $252;$251 = $253;
      }
     }
    }
    $257 = $fl$1$ & 8;
    $258 = ($257|0)==(0);
    $or$cond13 = $258 | $245;
    $$19 = $or$cond13 ? 16064 : ((16064 + 5|0));
    $259 = $or$cond13&1;
    $$20 = $259 ^ 1;
    $297 = $195;$299 = $222;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 4:  {
     $207 = $cnt$1&255;
     $208 = $195;
     HEAP8[$208>>0] = $207;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $209 = $195;
     HEAP32[$209>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $210 = ($cnt$1|0)<(0);
     $211 = $210 << 31 >> 31;
     $212 = $195;
     $213 = $212;
     $214 = $213;
     HEAP32[$214>>2] = $cnt$1;
     $215 = (($213) + 4)|0;
     $216 = $215;
     HEAP32[$216>>2] = $211;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $198 = ($cnt$1|0)<(0);
     $199 = $198 << 31 >> 31;
     $200 = $195;
     $201 = $200;
     $202 = $201;
     HEAP32[$202>>2] = $cnt$1;
     $203 = (($201) + 4)|0;
     $204 = $203;
     HEAP32[$204>>2] = $199;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $205 = $cnt$1&65535;
     $206 = $195;
     HEAP16[$206>>1] = $205;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $196 = $195;
     HEAP32[$196>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $197 = $195;
     HEAP32[$197>>2] = $cnt$1;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $217 = ($p$0>>>0)>(8);
    $218 = $217 ? $p$0 : 8;
    $219 = $fl$1$ | 8;
    $fl$3 = $219;$p$1 = $218;$t$1 = 120;
    label = 75;
    break;
   }
   case 117:  {
    $267 = $222;$269 = $195;$pl$0 = 0;$prefix$0 = 16064;
    label = 86;
    break;
   }
   case 99:  {
    $309 = $195&255;
    HEAP8[$4>>0] = $309;
    $1042 = $195;$1043 = $222;$a$2 = $4;$fl$6 = $194;$p$5 = 1;$pl$2 = 0;$prefix$2 = 16064;$z$2 = $2;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $195;HEAP32[tempDoublePtr+4>>2] = $222;$360 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $361 = ($222|0)<(0);
    if ($361) {
     $362 = -$360;
     $$010$i = $362;$pl$0$i = 1;$prefix$0$i = 16088;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? ((16088 + 1|0)) : ((16088 + 6|0));
      $$010$i = $360;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$010$i = $360;$pl$0$i = 1;$prefix$0$i = ((16088 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    if (!($374)) {
     $375 = $t$0 & 32;
     $376 = ($375|0)!=(0);
     $377 = $376 ? 16112 : 16120;
     $378 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($378) {
      $379 = $376 ? 16128 : 16136;
      $pl$1$i = 0;$s1$0$i = $379;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $377;
     }
     $380 = (($pl$1$i) + 3)|0;
     $381 = $fl$1$ & 8192;
     $382 = ($381|0)==(0);
     $383 = ($w$1|0)>($380|0);
     $or$cond$i40$i = $382 & $383;
     if ($or$cond$i40$i) {
      $384 = (($w$1) - ($380))|0;
      $385 = ($384>>>0)>(256);
      $386 = $385 ? 256 : $384;
      _memset(($pad$i|0),32,($386|0))|0;
      $387 = ($384>>>0)>(255);
      if ($387) {
       $$01$i42$i = $384;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $388 = (($$01$i42$i) + -256)|0;
        $389 = ($388>>>0)>(255);
        if ($389) {
         $$01$i42$i = $388;
        } else {
         break;
        }
       }
       $390 = $384 & 255;
       $$0$lcssa$i44$i = $390;
      } else {
       $$0$lcssa$i44$i = $384;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $391 = $fl$1$ & 73728;
     $392 = ($391|0)==(8192);
     $or$cond$i47$i = $392 & $383;
     if ($or$cond$i47$i) {
      $393 = (($w$1) - ($380))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i49$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i49$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i49$i = $397;
        } else {
         break;
        }
       }
       $399 = $393 & 255;
       $$0$lcssa$i51$i = $399;
      } else {
       $$0$lcssa$i51$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $383 ? $w$1 : $380;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $400 = (+_frexpl($$010$i,$e2$i));
    $401 = $400 * 2.0;
    $402 = $401 != 0.0;
    if ($402) {
     $403 = HEAP32[$e2$i>>2]|0;
     $404 = (($403) + -1)|0;
     HEAP32[$e2$i>>2] = $404;
    }
    $405 = $t$0 | 32;
    $406 = ($405|0)==(97);
    if ($406) {
     $407 = $t$0 & 32;
     $408 = ($407|0)==(0);
     $409 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $408 ? $prefix$0$i : $409;
     $410 = $pl$0$i | 2;
     $411 = ($p$0>>>0)>(11);
     $412 = (12 - ($p$0))|0;
     $re$0$i = $411 ? 0 : $412;
     $413 = ($re$0$i|0)==(0);
     do {
      if ($413) {
       $$1$i = $401;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $414 = (($re$1163$i) + -1)|0;
        $415 = $round$0162$i * 16.0;
        $416 = ($414|0)==(0);
        if ($416) {
         break;
        } else {
         $re$1163$i = $414;$round$0162$i = $415;
        }
       }
       $417 = HEAP8[$prefix$0$$i>>0]|0;
       $418 = ($417<<24>>24)==(45);
       if ($418) {
        $419 = -$401;
        $420 = $419 - $415;
        $421 = $415 + $420;
        $422 = -$421;
        $$1$i = $422;
        break;
       } else {
        $423 = $401 + $415;
        $424 = $423 - $415;
        $$1$i = $424;
        break;
       }
      }
     } while(0);
     $425 = HEAP32[$e2$i>>2]|0;
     $426 = ($425|0)<(0);
     $427 = (0 - ($425))|0;
     $428 = $426 ? $427 : $425;
     $429 = ($428|0)<(0);
     if ($429) {
      $430 = ($428|0)<(0);
      $431 = $430 << 31 >> 31;
      $$05$i$i = $7;$432 = $428;$433 = $431;
      while(1) {
       $434 = (___uremdi3(($432|0),($433|0),10,0)|0);
       $435 = tempRet0;
       $436 = $434 | 48;
       $437 = $436&255;
       $438 = (($$05$i$i) + -1|0);
       HEAP8[$438>>0] = $437;
       $439 = (___udivdi3(($432|0),($433|0),10,0)|0);
       $440 = tempRet0;
       $441 = ($433>>>0)>(9);
       $442 = ($432>>>0)>(4294967295);
       $443 = ($433|0)==(9);
       $444 = $443 & $442;
       $445 = $441 | $444;
       if ($445) {
        $$05$i$i = $438;$432 = $439;$433 = $440;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $438;$$01$lcssa$off0$i$i = $439;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $428;
     }
     $446 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($446) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $447 = (($y$03$i$i>>>0) % 10)&-1;
       $448 = $447 | 48;
       $449 = $448&255;
       $450 = (($$12$i$i) + -1|0);
       HEAP8[$450>>0] = $449;
       $451 = (($y$03$i$i>>>0) / 10)&-1;
       $452 = ($y$03$i$i>>>0)<(10);
       if ($452) {
        $$1$lcssa$i$i = $450;
        break;
       } else {
        $$12$i$i = $450;$y$03$i$i = $451;
       }
      }
     }
     $453 = ($$1$lcssa$i$i|0)==($7|0);
     if ($453) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $454 = HEAP32[$e2$i>>2]|0;
     $455 = $454 >> 31;
     $456 = $455 & 2;
     $457 = (($456) + 43)|0;
     $458 = $457&255;
     $459 = (($estr$0$i) + -1|0);
     HEAP8[$459>>0] = $458;
     $460 = (($t$0) + 15)|0;
     $461 = $460&255;
     $462 = (($estr$0$i) + -2|0);
     HEAP8[$462>>0] = $461;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $463 = $fl$1$ & 8;
      $464 = ($463|0)==(0);
      if ($464) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $465 = (~~(($$2$us$us$i)));
        $466 = (16144 + ($465)|0);
        $467 = HEAP8[$466>>0]|0;
        $468 = $467&255;
        $469 = $468 | $407;
        $470 = $469&255;
        $471 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $470;
        $472 = (+($465|0));
        $473 = $$2$us$us$i - $472;
        $474 = $473 * 16.0;
        $475 = $471;
        $476 = (($475) - ($0))|0;
        $477 = ($476|0)!=(1);
        $notlhs$us$us$i = $474 == 0.0;
        $or$cond$i73 = $477 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $471;
        } else {
         $478 = (($s$0$us$us$i) + 2|0);
         HEAP8[$471>>0] = 46;
         $s$1$us$us$i = $478;
        }
        $479 = $474 != 0.0;
        if ($479) {
         $$2$us$us$i = $474;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $480 = (~~(($$2$us$i)));
        $481 = (16144 + ($480)|0);
        $482 = HEAP8[$481>>0]|0;
        $483 = $482&255;
        $484 = $483 | $407;
        $485 = $484&255;
        $486 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $485;
        $487 = (+($480|0));
        $488 = $$2$us$i - $487;
        $489 = $488 * 16.0;
        $490 = $486;
        $491 = (($490) - ($0))|0;
        $492 = ($491|0)==(1);
        if ($492) {
         $493 = (($s$0$us$i) + 2|0);
         HEAP8[$486>>0] = 46;
         $s$1$us$i = $493;
        } else {
         $s$1$us$i = $486;
        }
        $494 = $489 != 0.0;
        if ($494) {
         $$2$us$i = $489;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $495 = (~~(($$2$i)));
       $496 = (16144 + ($495)|0);
       $497 = HEAP8[$496>>0]|0;
       $498 = $497&255;
       $499 = $498 | $407;
       $500 = $499&255;
       $501 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $500;
       $502 = (+($495|0));
       $503 = $$2$i - $502;
       $504 = $503 * 16.0;
       $505 = $501;
       $506 = (($505) - ($0))|0;
       $507 = ($506|0)==(1);
       if ($507) {
        $508 = (($s$0$i) + 2|0);
        HEAP8[$501>>0] = 46;
        $s$1$i = $508;
       } else {
        $s$1$i = $501;
       }
       $509 = $504 != 0.0;
       if ($509) {
        $$2$i = $504;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $510 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $511 = (($11) + ($$pre306$i))|0;
     $512 = ($511|0)<($p$0|0);
     $or$cond269 = $510 & $512;
     $513 = $462;
     if ($or$cond269) {
      $514 = (($12) + ($p$0))|0;
      $515 = (($514) - ($513))|0;
      $l$0$i = $515;
     } else {
      $516 = (($10) - ($513))|0;
      $517 = (($516) + ($$pre306$i))|0;
      $l$0$i = $517;
     }
     $518 = (($l$0$i) + ($410))|0;
     $519 = $fl$1$ & 73728;
     $520 = ($519|0)==(0);
     $521 = ($w$1|0)>($518|0);
     $or$cond$i57$i = $520 & $521;
     if ($or$cond$i57$i) {
      $522 = (($w$1) - ($518))|0;
      $523 = ($522>>>0)>(256);
      $524 = $523 ? 256 : $522;
      _memset(($pad$i|0),32,($524|0))|0;
      $525 = ($522>>>0)>(255);
      if ($525) {
       $$01$i59$i = $522;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $526 = (($$01$i59$i) + -256)|0;
        $527 = ($526>>>0)>(255);
        if ($527) {
         $$01$i59$i = $526;
        } else {
         break;
        }
       }
       $528 = $522 & 255;
       $$0$lcssa$i61$i = $528;
      } else {
       $$0$lcssa$i61$i = $522;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$410,$f)|0);
     $529 = ($519|0)==(65536);
     $or$cond$i64$i = $529 & $521;
     if ($or$cond$i64$i) {
      $530 = (($w$1) - ($518))|0;
      $531 = ($530>>>0)>(256);
      $532 = $531 ? 256 : $530;
      _memset(($pad$i|0),48,($532|0))|0;
      $533 = ($530>>>0)>(255);
      if ($533) {
       $$01$i66$i = $530;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $534 = (($$01$i66$i) + -256)|0;
        $535 = ($534>>>0)>(255);
        if ($535) {
         $$01$i66$i = $534;
        } else {
         break;
        }
       }
       $536 = $530 & 255;
       $$0$lcssa$i68$i = $536;
      } else {
       $$0$lcssa$i68$i = $530;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $537 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$537,$f)|0);
     $538 = $462;
     $539 = (($9) - ($538))|0;
     $540 = (($l$0$i) - ($539))|0;
     $541 = (($540) - ($537))|0;
     $542 = ($541|0)>(0);
     if ($542) {
      $543 = ($541>>>0)>(256);
      $544 = $543 ? 256 : $541;
      _memset(($pad$i|0),48,($544|0))|0;
      $545 = ($541>>>0)>(255);
      if ($545) {
       $$01$i72$i = $541;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $546 = (($$01$i72$i) + -256)|0;
        $547 = ($546>>>0)>(255);
        if ($547) {
         $$01$i72$i = $546;
        } else {
         break;
        }
       }
       $548 = $541 & 255;
       $$0$lcssa$i74$i = $548;
      } else {
       $$0$lcssa$i74$i = $541;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($462,$539,$f)|0);
     $549 = ($519|0)==(8192);
     $or$cond$i77$i = $549 & $521;
     if ($or$cond$i77$i) {
      $550 = (($w$1) - ($518))|0;
      $551 = ($550>>>0)>(256);
      $552 = $551 ? 256 : $550;
      _memset(($pad$i|0),32,($552|0))|0;
      $553 = ($550>>>0)>(255);
      if ($553) {
       $$01$i79$i = $550;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $554 = (($$01$i79$i) + -256)|0;
        $555 = ($554>>>0)>(255);
        if ($555) {
         $$01$i79$i = $554;
        } else {
         break;
        }
       }
       $556 = $550 & 255;
       $$0$lcssa$i81$i = $556;
      } else {
       $$0$lcssa$i81$i = $550;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $521 ? $w$1 : $518;
     $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $557 = ($p$0|0)<(0);
    $$p$i = $557 ? 6 : $p$0;
    if ($402) {
     $558 = $401 * 268435456.0;
     $559 = HEAP32[$e2$i>>2]|0;
     $560 = (($559) + -28)|0;
     HEAP32[$e2$i>>2] = $560;
     $$3$i = $558;$561 = $560;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $401;$561 = $$pre$i;
    }
    $562 = ($561|0)<(0);
    $$36$i = $562 ? $big$i : $13;
    $563 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $564 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $564;
     $565 = (($z$0$i) + 4|0);
     $566 = (+($564>>>0));
     $567 = $$4$i - $566;
     $568 = $567 * 1.0E+9;
     $569 = $568 != 0.0;
     if ($569) {
      $$4$i = $568;$z$0$i = $565;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $570 = ($$pr$i|0)>(0);
    if ($570) {
     $571 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $565;
     while(1) {
      $572 = ($571|0)>(29);
      $573 = $572 ? 29 : $571;
      $d$0249$i = (($z$1257$i) + -4|0);
      $574 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($574) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $575 = HEAP32[$d$0251$i>>2]|0;
         $576 = (_bitshift64Shl(($575|0),0,($573|0))|0);
         $577 = tempRet0;
         $578 = (_i64Add(($576|0),($577|0),($carry$0250$i|0),0)|0);
         $579 = tempRet0;
         $580 = (___uremdi3(($578|0),($579|0),1000000000,0)|0);
         $581 = tempRet0;
         HEAP32[$d$0251$i>>2] = $580;
         $582 = (___udivdi3(($578|0),($579|0),1000000000,0)|0);
         $583 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $584 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($584) {
          break;
         } else {
          $carry$0250$i = $582;$d$0251$i = $d$0$i;
         }
        }
        $585 = ($582|0)==(0);
        if ($585) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $586 = (($a$1258$i) + -4|0);
        HEAP32[$586>>2] = $582;
        $a$2$ph$i = $586;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $587 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($587)) {
        break;
       }
       $588 = (($z$2$i) + -4|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = ($589|0)==(0);
       if ($590) {
        $z$2$i = $588;
       } else {
        break;
       }
      }
      $591 = HEAP32[$e2$i>>2]|0;
      $592 = (($591) - ($573))|0;
      HEAP32[$e2$i>>2] = $592;
      $593 = ($592|0)>(0);
      if ($593) {
       $571 = $592;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $592;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $565;
    }
    $594 = ($$pr151$i|0)<(0);
    L242: do {
     if ($594) {
      $595 = (($$p$i) + 25)|0;
      $596 = (($595|0) / 9)&-1;
      $597 = (($596) + 1)|0;
      $598 = ($405|0)==(102);
      if ($598) {
       $599 = (($$36$i) + ($597<<2)|0);
       $601 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $600 = (0 - ($601))|0;
        $602 = ($600|0)>(9);
        $$23$us$i = $602 ? 9 : $600;
        $603 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($603) {
          $628 = 1 << $$23$us$i;
          $622 = (($628) + -1)|0;
          $625 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $620 = HEAP32[$d$1237$us$i>>2]|0;
           $621 = $620 & $622;
           $623 = $620 >>> $$23$us$i;
           $624 = (($623) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $624;
           $610 = Math_imul($621, $625)|0;
           $626 = (($d$1237$us$i) + 4|0);
           $627 = ($626>>>0)<($z$3243$us$i>>>0);
           if ($627) {
            $carry3$0238$us$i = $610;$d$1237$us$i = $626;
           } else {
            break;
           }
          }
          $607 = HEAP32[$a$3244$us$i>>2]|0;
          $608 = ($607|0)==(0);
          $609 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $608 ? $609 : $a$3244$us$i;
          $611 = ($610|0)==(0);
          if ($611) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $612 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $610;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $612;
         } else {
          $604 = HEAP32[$a$3244$us$i>>2]|0;
          $605 = ($604|0)==(0);
          $606 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $605 ? $606 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $613 = $z$4$us$i;
        $614 = (($613) - ($563))|0;
        $615 = $614 >> 2;
        $616 = ($615|0)>($597|0);
        $$z$4$us$i = $616 ? $599 : $z$4$us$i;
        $617 = HEAP32[$e2$i>>2]|0;
        $618 = (($617) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $618;
        $619 = ($618|0)<(0);
        if ($619) {
         $601 = $618;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L242;
        }
       }
      } else {
       $630 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $629 = (0 - ($630))|0;
       $631 = ($629|0)>(9);
       $$23$i = $631 ? 9 : $629;
       $632 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($632) {
         $636 = 1 << $$23$i;
         $637 = (($636) + -1)|0;
         $638 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $639 = HEAP32[$d$1237$i>>2]|0;
          $640 = $639 & $637;
          $641 = $639 >>> $$23$i;
          $642 = (($641) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $642;
          $643 = Math_imul($640, $638)|0;
          $644 = (($d$1237$i) + 4|0);
          $645 = ($644>>>0)<($z$3243$i>>>0);
          if ($645) {
           $carry3$0238$i = $643;$d$1237$i = $644;
          } else {
           break;
          }
         }
         $646 = HEAP32[$a$3244$i>>2]|0;
         $647 = ($646|0)==(0);
         $648 = (($a$3244$i) + 4|0);
         $$a$3$i = $647 ? $648 : $a$3244$i;
         $649 = ($643|0)==(0);
         if ($649) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $650 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $643;
         $$a$3310$i = $$a$3$i;$z$4$i = $650;
        } else {
         $633 = HEAP32[$a$3244$i>>2]|0;
         $634 = ($633|0)==(0);
         $635 = (($a$3244$i) + 4|0);
         $$a$3309$i = $634 ? $635 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $651 = $z$4$i;
       $652 = $$a$3310$i;
       $653 = (($651) - ($652))|0;
       $654 = $653 >> 2;
       $655 = ($654|0)>($597|0);
       if ($655) {
        $656 = (($$a$3310$i) + ($597<<2)|0);
        $z$5$i = $656;
       } else {
        $z$5$i = $z$4$i;
       }
       $657 = HEAP32[$e2$i>>2]|0;
       $658 = (($657) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $658;
       $659 = ($658|0)<(0);
       if ($659) {
        $630 = $658;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $660 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($660) {
      $661 = $a$3$lcssa$i;
      $662 = (($563) - ($661))|0;
      $663 = $662 >> 2;
      $664 = ($663*9)|0;
      $665 = HEAP32[$a$3$lcssa$i>>2]|0;
      $666 = ($665>>>0)<(10);
      if ($666) {
       $e$1$i = $664;
       break;
      } else {
       $e$0233$i = $664;$i$0232$i = 10;
      }
      while(1) {
       $667 = ($i$0232$i*10)|0;
       $668 = (($e$0233$i) + 1)|0;
       $669 = ($665>>>0)<($667>>>0);
       if ($669) {
        $e$1$i = $668;
        break;
       } else {
        $e$0233$i = $668;$i$0232$i = $667;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $670 = ($405|0)!=(102);
    $671 = $670 ? $e$1$i : 0;
    $672 = (($$p$i) - ($671))|0;
    $673 = ($405|0)==(103);
    $674 = ($$p$i|0)!=(0);
    $$24$i = $673 & $674;
    $$neg156$i = $$24$i << 31 >> 31;
    $675 = (($672) + ($$neg156$i))|0;
    $676 = $z$3$lcssa$i;
    $677 = (($676) - ($563))|0;
    $678 = $677 >> 2;
    $679 = ($678*9)|0;
    $680 = (($679) + -9)|0;
    $681 = ($675|0)<($680|0);
    if ($681) {
     $682 = (($675) + 9216)|0;
     $683 = (($682|0) / 9)&-1;
     $$sum$i = (($683) + -1023)|0;
     $684 = (($$36$i) + ($$sum$i<<2)|0);
     $685 = (($682|0) % 9)&-1;
     $j$0224$i = (($685) + 1)|0;
     $686 = ($j$0224$i|0)<(9);
     if ($686) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $687 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $687;
        break;
       } else {
        $i$1225$i = $687;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $688 = HEAP32[$684>>2]|0;
     $689 = (($688>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $690 = ($689|0)==(0);
     if ($690) {
      $$sum18$i = (($683) + -1022)|0;
      $691 = (($$36$i) + ($$sum18$i<<2)|0);
      $692 = ($691|0)==($z$3$lcssa$i|0);
      if ($692) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $684;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $693 = (($688>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $694 = $693 & 1;
       $695 = ($694|0)==(0);
       $$25$i = $695 ? 9007199254740992.0 : 9007199254740994.0;
       $696 = (($i$1$lcssa$i|0) / 2)&-1;
       $697 = ($689>>>0)<($696>>>0);
       do {
        if ($697) {
         $small$0$i = 0.5;
        } else {
         $698 = ($689|0)==($696|0);
         if ($698) {
          $$sum19$i = (($683) + -1022)|0;
          $699 = (($$36$i) + ($$sum19$i<<2)|0);
          $700 = ($699|0)==($z$3$lcssa$i|0);
          if ($700) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $701 = ($pl$0$i|0)==(0);
       do {
        if ($701) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $702 = HEAP8[$prefix$0$i>>0]|0;
         $703 = ($702<<24>>24)==(45);
         if (!($703)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $704 = $$25$i * -1.0;
         $705 = $small$0$i * -1.0;
         $round6$1$i = $704;$small$1$i = $705;
        }
       } while(0);
       $706 = (($688) - ($689))|0;
       HEAP32[$684>>2] = $706;
       $707 = $round6$1$i + $small$1$i;
       $708 = $707 != $round6$1$i;
       if (!($708)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $684;$e$3$i = $e$1$i;
        break;
       }
       $709 = (($706) + ($i$1$lcssa$i))|0;
       HEAP32[$684>>2] = $709;
       $710 = ($709>>>0)>(999999999);
       if ($710) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $684;
        while(1) {
         $711 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $712 = ($711>>>0)<($a$5218$i>>>0);
         if ($712) {
          $713 = (($a$5218$i) + -4|0);
          HEAP32[$713>>2] = 0;
          $a$6$i = $713;
         } else {
          $a$6$i = $a$5218$i;
         }
         $714 = HEAP32[$711>>2]|0;
         $715 = (($714) + 1)|0;
         HEAP32[$711>>2] = $715;
         $716 = ($715>>>0)>(999999999);
         if ($716) {
          $a$5218$i = $a$6$i;$d$2217$i = $711;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $711;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $684;
       }
       $717 = $a$5$lcssa$i;
       $718 = (($563) - ($717))|0;
       $719 = $718 >> 2;
       $720 = ($719*9)|0;
       $721 = HEAP32[$a$5$lcssa$i>>2]|0;
       $722 = ($721>>>0)<(10);
       if ($722) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $720;
        break;
       } else {
        $e$2213$i = $720;$i$2212$i = 10;
       }
       while(1) {
        $723 = ($i$2212$i*10)|0;
        $724 = (($e$2213$i) + 1)|0;
        $725 = ($721>>>0)<($723>>>0);
        if ($725) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $724;
         break;
        } else {
         $e$2213$i = $724;$i$2212$i = $723;
        }
       }
      }
     } while(0);
     $726 = (($d$3$i) + 4|0);
     $727 = ($z$3$lcssa$i>>>0)>($726>>>0);
     $$z$3$i = $727 ? $726 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $728 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $729 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($729)) {
      $$lcssa292$i = 0;
      break;
     }
     $730 = (($z$6$i) + -4|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = ($731|0)==(0);
     if ($732) {
      $z$6$i = $730;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($673) {
      $733 = ($$p$i|0)==(0);
      $734 = $733&1;
      $$$p$i = (($734) + ($$p$i))|0;
      $735 = ($$$p$i|0)>($e$4$ph$i|0);
      $736 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $735 & $736;
      if ($or$cond5$i) {
       $737 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $738 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $737;$$213$i = $738;
      } else {
       $739 = (($t$0) + -2)|0;
       $740 = (($$$p$i) + -1)|0;
       $$016$i = $739;$$213$i = $740;
      }
      $741 = $fl$1$ & 8;
      $742 = ($741|0)==(0);
      if (!($742)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $743 = (($z$6$i) + -4|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = ($744|0)==(0);
        if ($745) {
         $j$2$i = 9;
         break;
        }
        $746 = (($744>>>0) % 10)&-1;
        $747 = ($746|0)==(0);
        if ($747) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $748 = ($i$3204$i*10)|0;
         $749 = (($j$1205$i) + 1)|0;
         $750 = (($744>>>0) % ($748>>>0))&-1;
         $751 = ($750|0)==(0);
         if ($751) {
          $i$3204$i = $748;$j$1205$i = $749;
         } else {
          $j$2$i = $749;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $752 = $$016$i | 32;
      $753 = ($752|0)==(102);
      $754 = $z$6$i;
      $755 = (($754) - ($563))|0;
      $756 = $755 >> 2;
      $757 = ($756*9)|0;
      $758 = (($757) + -9)|0;
      if ($753) {
       $759 = (($758) - ($j$2$i))|0;
       $760 = ($759|0)<(0);
       $$26$i = $760 ? 0 : $759;
       $761 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $761 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $762 = (($758) + ($e$4$ph$i))|0;
       $763 = (($762) - ($j$2$i))|0;
       $764 = ($763|0)<(0);
       $$28$i = $764 ? 0 : $763;
       $765 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $765 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $766 = ($$314$i|0)!=(0);
    if ($766) {
     $770 = 1;
    } else {
     $767 = $fl$1$ & 8;
     $768 = ($767|0)!=(0);
     $770 = $768;
    }
    $769 = $770&1;
    $771 = $$117$i | 32;
    $772 = ($771|0)==(102);
    if ($772) {
     $773 = ($e$4$ph$i|0)>(0);
     $774 = $773 ? $e$4$ph$i : 0;
     $$pn$i = $774;$estr$2$i = 0;
    } else {
     $775 = ($e$4$ph$i|0)<(0);
     $776 = $775 ? $728 : $e$4$ph$i;
     $777 = ($776|0)<(0);
     if ($777) {
      $778 = ($776|0)<(0);
      $779 = $778 << 31 >> 31;
      $$05$i84$i = $7;$780 = $776;$781 = $779;
      while(1) {
       $782 = (___uremdi3(($780|0),($781|0),10,0)|0);
       $783 = tempRet0;
       $784 = $782 | 48;
       $785 = $784&255;
       $786 = (($$05$i84$i) + -1|0);
       HEAP8[$786>>0] = $785;
       $787 = (___udivdi3(($780|0),($781|0),10,0)|0);
       $788 = tempRet0;
       $789 = ($781>>>0)>(9);
       $790 = ($780>>>0)>(4294967295);
       $791 = ($781|0)==(9);
       $792 = $791 & $790;
       $793 = $789 | $792;
       if ($793) {
        $$05$i84$i = $786;$780 = $787;$781 = $788;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $786;$$01$lcssa$off0$i90$i = $787;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $776;
     }
     $794 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($794) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $795 = (($y$03$i91$i>>>0) % 10)&-1;
       $796 = $795 | 48;
       $797 = $796&255;
       $798 = (($$12$i92$i) + -1|0);
       HEAP8[$798>>0] = $797;
       $799 = (($y$03$i91$i>>>0) / 10)&-1;
       $800 = ($y$03$i91$i>>>0)<(10);
       if ($800) {
        $estr$1$ph$i = $798;
        break;
       } else {
        $$12$i92$i = $798;$y$03$i91$i = $799;
       }
      }
     }
     $801 = $estr$1$ph$i;
     $802 = (($9) - ($801))|0;
     $803 = ($802|0)<(2);
     if ($803) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $804 = (($estr$1195$i) + -1|0);
       HEAP8[$804>>0] = 48;
       $805 = $804;
       $806 = (($9) - ($805))|0;
       $807 = ($806|0)<(2);
       if ($807) {
        $estr$1195$i = $804;
       } else {
        $estr$1$lcssa$i = $804;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $808 = $e$4$ph$i >> 31;
     $809 = $808 & 2;
     $810 = (($809) + 43)|0;
     $811 = $810&255;
     $812 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$812>>0] = $811;
     $813 = $$117$i&255;
     $814 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$814>>0] = $813;
     $815 = $814;
     $816 = (($9) - ($815))|0;
     $$pn$i = $816;$estr$2$i = $814;
    }
    $817 = (($pl$0$i) + 1)|0;
    $818 = (($817) + ($$314$i))|0;
    $l$1$i = (($818) + ($769))|0;
    $819 = (($l$1$i) + ($$pn$i))|0;
    $820 = $fl$1$ & 73728;
    $821 = ($820|0)==(0);
    $822 = ($w$1|0)>($819|0);
    $or$cond$i98$i = $821 & $822;
    if ($or$cond$i98$i) {
     $823 = (($w$1) - ($819))|0;
     $824 = ($823>>>0)>(256);
     $825 = $824 ? 256 : $823;
     _memset(($pad$i|0),32,($825|0))|0;
     $826 = ($823>>>0)>(255);
     if ($826) {
      $$01$i100$i = $823;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $827 = (($$01$i100$i) + -256)|0;
       $828 = ($827>>>0)>(255);
       if ($828) {
        $$01$i100$i = $827;
       } else {
        break;
       }
      }
      $829 = $823 & 255;
      $$0$lcssa$i102$i = $829;
     } else {
      $$0$lcssa$i102$i = $823;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $830 = ($820|0)==(65536);
    $or$cond$i105$i = $830 & $822;
    if ($or$cond$i105$i) {
     $831 = (($w$1) - ($819))|0;
     $832 = ($831>>>0)>(256);
     $833 = $832 ? 256 : $831;
     _memset(($pad$i|0),48,($833|0))|0;
     $834 = ($831>>>0)>(255);
     if ($834) {
      $$01$i107$i = $831;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $835 = (($$01$i107$i) + -256)|0;
       $836 = ($835>>>0)>(255);
       if ($836) {
        $$01$i107$i = $835;
       } else {
        break;
       }
      }
      $837 = $831 & 255;
      $$0$lcssa$i109$i = $837;
     } else {
      $$0$lcssa$i109$i = $831;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($772) {
      $838 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $838 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $839 = HEAP32[$d$4180$i>>2]|0;
       $840 = ($839|0)==(0);
       if ($840) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $839;
        while(1) {
         $841 = (($y$03$i114$i>>>0) % 10)&-1;
         $842 = $841 | 48;
         $843 = $842&255;
         $844 = (($$12$i115$i) + -1|0);
         HEAP8[$844>>0] = $843;
         $845 = (($y$03$i114$i>>>0) / 10)&-1;
         $846 = ($y$03$i114$i>>>0)<(10);
         if ($846) {
          $$1$lcssa$i117$i = $844;
          break;
         } else {
          $$12$i115$i = $844;$y$03$i114$i = $845;
         }
        }
       }
       $847 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($847) {
         $851 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($851)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $848 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($848) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $849 = (($s7$0177$i) + -1|0);
          HEAP8[$849>>0] = 48;
          $850 = ($849>>>0)>($buf$i>>>0);
          if ($850) {
           $s7$0177$i = $849;
          } else {
           $s7$1$i = $849;
           break;
          }
         }
        }
       } while(0);
       $852 = $s7$1$i;
       $853 = (($15) - ($852))|0;
       (___fwritex($s7$1$i,$853,$f)|0);
       $854 = (($d$4180$i) + 4|0);
       $855 = ($854>>>0)>($$36$i>>>0);
       if ($855) {
        break;
       } else {
        $d$4180$i = $854;
       }
      }
      $$not$i = $766 ^ 1;
      $856 = $fl$1$ & 8;
      $857 = ($856|0)==(0);
      $or$cond32$i = $857 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(16160,1,$f)|0);
      }
      $858 = ($854>>>0)<($z$6$i>>>0);
      $859 = ($$314$i|0)>(0);
      $or$cond7169$i = $858 & $859;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $854;
       while(1) {
        $860 = HEAP32[$d$5170$i>>2]|0;
        $861 = ($860|0)==(0);
        if ($861) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $860;
         while(1) {
          $862 = (($y$03$i123$i>>>0) % 10)&-1;
          $863 = $862 | 48;
          $864 = $863&255;
          $865 = (($$12$i124$i) + -1|0);
          HEAP8[$865>>0] = $864;
          $866 = (($y$03$i123$i>>>0) / 10)&-1;
          $867 = ($y$03$i123$i>>>0)<(10);
          if ($867) {
           break;
          } else {
           $$12$i124$i = $865;$y$03$i123$i = $866;
          }
         }
         $868 = ($865>>>0)>($buf$i>>>0);
         if ($868) {
          $s8$0165$i = $865;
          label = 301;
         } else {
          $s8$0$lcssa$i = $865;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $869 = (($s8$0165$i) + -1|0);
          HEAP8[$869>>0] = 48;
          $870 = ($869>>>0)>($buf$i>>>0);
          if ($870) {
           $s8$0165$i = $869;
           label = 301;
          } else {
           $s8$0$lcssa$i = $869;
           break;
          }
         }
        }
        $871 = ($$415171$i|0)>(9);
        $872 = $871 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$872,$f)|0);
        $873 = (($d$5170$i) + 4|0);
        $874 = (($$415171$i) + -9)|0;
        $875 = ($873>>>0)<($z$6$i>>>0);
        $876 = ($874|0)>(0);
        $or$cond7$i = $875 & $876;
        if ($or$cond7$i) {
         $$415171$i = $874;$d$5170$i = $873;
        } else {
         $$415$lcssa$i = $874;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $877 = ($$415$lcssa$i|0)>(0);
      if (!($877)) {
       break;
      }
      $878 = ($$415$lcssa$i>>>0)>(256);
      $879 = $878 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($879|0))|0;
      $880 = ($$415$lcssa$i>>>0)>(255);
      if ($880) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $881 = (($$01$i131$i) + -256)|0;
        $882 = ($881>>>0)>(255);
        if ($882) {
         $$01$i131$i = $881;
        } else {
         break;
        }
       }
       $883 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $883;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $884 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $884;
      $885 = ($$314$i|0)>(-1);
      do {
       if ($885) {
        $886 = $fl$1$ & 8;
        $887 = ($886|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $888 = HEAP32[$d$6188$i>>2]|0;
         $889 = ($888|0)==(0);
         if ($889) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $888;
          while(1) {
           $890 = (($y$03$i138$i>>>0) % 10)&-1;
           $891 = $890 | 48;
           $892 = $891&255;
           $893 = (($$12$i139$i) + -1|0);
           HEAP8[$893>>0] = $892;
           $894 = (($y$03$i138$i>>>0) / 10)&-1;
           $895 = ($y$03$i138$i>>>0)<(10);
           if ($895) {
            break;
           } else {
            $$12$i139$i = $893;$y$03$i138$i = $894;
           }
          }
          $896 = ($893|0)==($14|0);
          if ($896) {
           label = 313;
          } else {
           $s9$0$i = $893;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $897 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($897) {
           $901 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $902 = ($$5189$i|0)<(1);
           $or$cond34$i = $902 & $887;
           if ($or$cond34$i) {
            $s9$2$i = $901;
            break;
           }
           (___fwritex(16160,1,$f)|0);
           $s9$2$i = $901;
          } else {
           $898 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($898) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $899 = (($s9$1184$i) + -1|0);
            HEAP8[$899>>0] = 48;
            $900 = ($899>>>0)>($buf$i>>>0);
            if ($900) {
             $s9$1184$i = $899;
            } else {
             $s9$2$i = $899;
             break;
            }
           }
          }
         } while(0);
         $903 = $s9$2$i;
         $904 = (($15) - ($903))|0;
         $905 = ($$5189$i|0)>($904|0);
         $$$5$i = $905 ? $904 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $906 = (($$5189$i) - ($904))|0;
         $907 = (($d$6188$i) + 4|0);
         $908 = ($907>>>0)<($z$6$$i>>>0);
         $909 = ($906|0)>(-1);
         $or$cond9$i = $908 & $909;
         if ($or$cond9$i) {
          $$5189$i = $906;$d$6188$i = $907;
         } else {
          break;
         }
        }
        $910 = ($906|0)>(0);
        if (!($910)) {
         break;
        }
        $911 = ($906>>>0)>(256);
        $912 = $911 ? 256 : $906;
        _memset(($pad$i|0),48,($912|0))|0;
        $913 = ($906>>>0)>(255);
        if ($913) {
         $$01$i146$i = $906;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $914 = (($$01$i146$i) + -256)|0;
          $915 = ($914>>>0)>(255);
          if ($915) {
           $$01$i146$i = $914;
          } else {
           break;
          }
         }
         $916 = $906 & 255;
         $$0$lcssa$i148$i = $916;
        } else {
         $$0$lcssa$i148$i = $906;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $917 = $estr$2$i;
      $918 = (($9) - ($917))|0;
      (___fwritex($estr$2$i,$918,$f)|0);
     }
    } while(0);
    $919 = ($820|0)==(8192);
    $or$cond$i$i = $919 & $822;
    if ($or$cond$i$i) {
     $920 = (($w$1) - ($819))|0;
     $921 = ($920>>>0)>(256);
     $922 = $921 ? 256 : $920;
     _memset(($pad$i|0),32,($922|0))|0;
     $923 = ($920>>>0)>(255);
     if ($923) {
      $$01$i$i = $920;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $924 = (($$01$i$i) + -256)|0;
       $925 = ($924>>>0)>(255);
       if ($925) {
        $$01$i$i = $924;
       } else {
        break;
       }
      }
      $926 = $920 & 255;
      $$0$lcssa$i$i = $926;
     } else {
      $$0$lcssa$i$i = $920;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $822 ? $w$1 : $819;
    $1034 = $195;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 105: case 100:  {
    $260 = ($222|0)<(0);
    if ($260) {
     $261 = (_i64Subtract(0,0,($195|0),($222|0))|0);
     $262 = tempRet0;
     $267 = $262;$269 = $261;$pl$0 = 1;$prefix$0 = 16064;
     label = 86;
     break L89;
    }
    $263 = $fl$1$ & 2048;
    $264 = ($263|0)==(0);
    if ($264) {
     $265 = $fl$1$ & 1;
     $266 = ($265|0)==(0);
     $$ = $266 ? 16064 : ((16064 + 2|0));
     $267 = $222;$269 = $195;$pl$0 = $265;$prefix$0 = $$;
     label = 86;
    } else {
     $267 = $222;$269 = $195;$pl$0 = 1;$prefix$0 = ((16064 + 1|0));
     label = 86;
    }
    break;
   }
   default: {
    $1042 = $195;$1043 = $222;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 16064;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $220 = $t$1 & 32;
    $221 = ($195|0)==(0);
    $223 = ($222|0)==(0);
    $224 = $221 & $223;
    if ($224) {
     $297 = $195;$299 = $222;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 16064;
     label = 91;
    } else {
     $$012$i = $2;$226 = $195;$233 = $222;
     while(1) {
      $225 = $226 & 15;
      $227 = (16144 + ($225)|0);
      $228 = HEAP8[$227>>0]|0;
      $229 = $228&255;
      $230 = $229 | $220;
      $231 = $230&255;
      $232 = (($$012$i) + -1|0);
      HEAP8[$232>>0] = $231;
      $234 = (_bitshift64Lshr(($226|0),($233|0),4)|0);
      $235 = tempRet0;
      $236 = ($234|0)==(0);
      $237 = ($235|0)==(0);
      $238 = $236 & $237;
      if ($238) {
       break;
      } else {
       $$012$i = $232;$226 = $234;$233 = $235;
      }
     }
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     if ($240) {
      $297 = $195;$299 = $222;$a$0 = $232;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 16064;
      label = 91;
     } else {
      $241 = $t$1 >> 4;
      $242 = (16064 + ($241)|0);
      $297 = $195;$299 = $222;$a$0 = $232;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $268 = ($267>>>0)>(0);
    $270 = ($269>>>0)>(4294967295);
    $271 = ($267|0)==(0);
    $272 = $271 & $270;
    $273 = $268 | $272;
    if ($273) {
     $$05$i = $2;$274 = $269;$275 = $267;
     while(1) {
      $276 = (___uremdi3(($274|0),($275|0),10,0)|0);
      $277 = tempRet0;
      $278 = $276 | 48;
      $279 = $278&255;
      $280 = (($$05$i) + -1|0);
      HEAP8[$280>>0] = $279;
      $281 = (___udivdi3(($274|0),($275|0),10,0)|0);
      $282 = tempRet0;
      $283 = ($275>>>0)>(9);
      $284 = ($274>>>0)>(4294967295);
      $285 = ($275|0)==(9);
      $286 = $285 & $284;
      $287 = $283 | $286;
      if ($287) {
       $$05$i = $280;$274 = $281;$275 = $282;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $280;$$01$lcssa$off0$i = $281;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $269;
    }
    $288 = ($$01$lcssa$off0$i|0)==(0);
    if ($288) {
     $297 = $269;$299 = $267;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $289 = (($y$03$i>>>0) % 10)&-1;
      $290 = $289 | 48;
      $291 = $290&255;
      $292 = (($$12$i) + -1|0);
      HEAP8[$292>>0] = $291;
      $293 = (($y$03$i>>>0) / 10)&-1;
      $294 = ($y$03$i>>>0)<(10);
      if ($294) {
       $297 = $269;$299 = $267;$a$0 = $292;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $292;$y$03$i = $293;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $315 = (_memchr($a$1,0,$p$0)|0);
    $316 = ($315|0)==(0|0);
    if ($316) {
     $317 = (($a$1) + ($p$0)|0);
     $1042 = $195;$1043 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 16064;$z$2 = $317;
     break;
    } else {
     $318 = $315;
     $319 = $a$1;
     $320 = (($318) - ($319))|0;
     $1042 = $195;$1043 = $222;$a$2 = $a$1;$fl$6 = $194;$p$5 = $320;$pl$2 = 0;$prefix$2 = 16064;$z$2 = $315;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0160 = 0;$l$1159 = 0;$ws$0161 = $1044;
    while(1) {
     $323 = HEAP32[$ws$0161>>2]|0;
     $324 = ($323|0)==(0);
     if ($324) {
      $i$0$lcssa = $i$0160;$l$2 = $l$1159;
      break;
     }
     $325 = (_wctomb($mb,$323)|0);
     $326 = ($325|0)<(0);
     $327 = (($p$4264) - ($i$0160))|0;
     $328 = ($325>>>0)>($327>>>0);
     $or$cond17 = $326 | $328;
     if ($or$cond17) {
      $i$0$lcssa = $i$0160;$l$2 = $325;
      break;
     }
     $329 = (($ws$0161) + 4|0);
     $330 = (($325) + ($i$0160))|0;
     $331 = ($p$4264>>>0)>($330>>>0);
     if ($331) {
      $i$0160 = $330;$l$1159 = $325;$ws$0161 = $329;
     } else {
      $i$0$lcssa = $330;$l$2 = $325;
      break;
     }
    }
    $332 = ($l$2|0)<(0);
    if ($332) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1046 = $1045;$1047 = $1044;$i$0$lcssa265 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $295 = ($p$2|0)>(-1);
   $296 = $fl$4 & -65537;
   $$fl$4 = $295 ? $296 : $fl$4;
   $298 = ($297|0)!=(0);
   $300 = ($299|0)!=(0);
   $301 = $298 | $300;
   $302 = ($p$2|0)!=(0);
   $or$cond = $301 | $302;
   if ($or$cond) {
    $303 = $a$0;
    $304 = (($3) - ($303))|0;
    $305 = $301&1;
    $306 = $305 ^ 1;
    $307 = (($306) + ($304))|0;
    $308 = ($p$2|0)>($307|0);
    $p$2$ = $308 ? $p$2 : $307;
    $1042 = $297;$1043 = $299;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1042 = $297;$1043 = $299;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $333 = $fl$1$ & 73728;
   $334 = ($333|0)==(0);
   $335 = ($w$1|0)>($i$0$lcssa265|0);
   $or$cond$i58 = $334 & $335;
   if ($or$cond$i58) {
    $336 = (($w$1) - ($i$0$lcssa265))|0;
    $337 = ($336>>>0)>(256);
    $338 = $337 ? 256 : $336;
    _memset(($pad$i|0),32,($338|0))|0;
    $339 = ($336>>>0)>(255);
    if ($339) {
     $$01$i60 = $336;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $340 = (($$01$i60) + -256)|0;
      $341 = ($340>>>0)>(255);
      if ($341) {
       $$01$i60 = $340;
      } else {
       break;
      }
     }
     $342 = $336 & 255;
     $$0$lcssa$i62 = $342;
    } else {
     $$0$lcssa$i62 = $336;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $343 = ($i$0$lcssa265|0)==(0);
   L479: do {
    if (!($343)) {
     $i$1168 = 0;$ws$1169 = $1047;
     while(1) {
      $344 = HEAP32[$ws$1169>>2]|0;
      $345 = ($344|0)==(0);
      if ($345) {
       break L479;
      }
      $346 = (_wctomb($mb,$344)|0);
      $347 = (($346) + ($i$1168))|0;
      $348 = ($347|0)>($i$0$lcssa265|0);
      if ($348) {
       break L479;
      }
      $349 = (($ws$1169) + 4|0);
      (___fwritex($mb,$346,$f)|0);
      $350 = ($347>>>0)<($i$0$lcssa265>>>0);
      if ($350) {
       $i$1168 = $347;$ws$1169 = $349;
      } else {
       break;
      }
     }
    }
   } while(0);
   $351 = ($333|0)==(8192);
   $or$cond$i65 = $351 & $335;
   if ($or$cond$i65) {
    $352 = (($w$1) - ($i$0$lcssa265))|0;
    $353 = ($352>>>0)>(256);
    $354 = $353 ? 256 : $352;
    _memset(($pad$i|0),32,($354|0))|0;
    $355 = ($352>>>0)>(255);
    if ($355) {
     $$01$i67 = $352;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $356 = (($$01$i67) + -256)|0;
      $357 = ($356>>>0)>(255);
      if ($357) {
       $$01$i67 = $356;
      } else {
       break;
      }
     }
     $358 = $352 & 255;
     $$0$lcssa$i69 = $358;
    } else {
     $$0$lcssa$i69 = $352;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $359 = $335 ? $w$1 : $i$0$lcssa265;
   $1034 = $1046;$1035 = $222;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $359;$l10n$0 = $l10n$3;
   continue;
  }
  $927 = $z$2;
  $928 = $a$2;
  $929 = (($927) - ($928))|0;
  $930 = ($p$5|0)<($929|0);
  $$p$5 = $930 ? $929 : $p$5;
  $931 = (($pl$2) + ($$p$5))|0;
  $932 = ($w$1|0)<($931|0);
  $w$2 = $932 ? $931 : $w$1;
  $933 = $fl$6 & 73728;
  $934 = ($933|0)==(0);
  $935 = ($w$2|0)>($931|0);
  $or$cond$i75 = $934 & $935;
  if ($or$cond$i75) {
   $936 = (($w$2) - ($931))|0;
   $937 = ($936>>>0)>(256);
   $938 = $937 ? 256 : $936;
   _memset(($pad$i|0),32,($938|0))|0;
   $939 = ($936>>>0)>(255);
   if ($939) {
    $$01$i77 = $936;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $940 = (($$01$i77) + -256)|0;
     $941 = ($940>>>0)>(255);
     if ($941) {
      $$01$i77 = $940;
     } else {
      break;
     }
    }
    $942 = $936 & 255;
    $$0$lcssa$i79 = $942;
   } else {
    $$0$lcssa$i79 = $936;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $943 = ($933|0)==(65536);
  $or$cond$i51 = $943 & $935;
  if ($or$cond$i51) {
   $944 = (($w$2) - ($931))|0;
   $945 = ($944>>>0)>(256);
   $946 = $945 ? 256 : $944;
   _memset(($pad$i|0),48,($946|0))|0;
   $947 = ($944>>>0)>(255);
   if ($947) {
    $$01$i53 = $944;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $948 = (($$01$i53) + -256)|0;
     $949 = ($948>>>0)>(255);
     if ($949) {
      $$01$i53 = $948;
     } else {
      break;
     }
    }
    $950 = $944 & 255;
    $$0$lcssa$i55 = $950;
   } else {
    $$0$lcssa$i55 = $944;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $951 = ($$p$5|0)>($929|0);
  if ($951) {
   $952 = (($$p$5) - ($929))|0;
   $953 = ($952>>>0)>(256);
   $954 = $953 ? 256 : $952;
   _memset(($pad$i|0),48,($954|0))|0;
   $955 = ($952>>>0)>(255);
   if ($955) {
    $$01$i38 = $952;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $956 = (($$01$i38) + -256)|0;
     $957 = ($956>>>0)>(255);
     if ($957) {
      $$01$i38 = $956;
     } else {
      break;
     }
    }
    $958 = $952 & 255;
    $$0$lcssa$i40 = $958;
   } else {
    $$0$lcssa$i40 = $952;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$929,$f)|0);
  $959 = ($933|0)==(8192);
  $or$cond$i = $959 & $935;
  if (!($or$cond$i)) {
   $1034 = $1042;$1035 = $1043;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $960 = (($w$2) - ($931))|0;
  $961 = ($960>>>0)>(256);
  $962 = $961 ? 256 : $960;
  _memset(($pad$i|0),32,($962|0))|0;
  $963 = ($960>>>0)>(255);
  if ($963) {
   $$01$i = $960;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $964 = (($$01$i) + -256)|0;
    $965 = ($964>>>0)>(255);
    if ($965) {
     $$01$i = $964;
    } else {
     break;
    }
   }
   $966 = $960 & 255;
   $$0$lcssa$i = $966;
  } else {
   $$0$lcssa$i = $960;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1034 = $1042;$1035 = $1043;$23 = $136;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $967 = ($f|0)==(0|0);
  if (!($967)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $968 = ($l10n$0|0)==(0);
  if ($968) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$292 = 1;
  }
  while(1) {
   $969 = (($nl_type) + ($i$292<<2)|0);
   $970 = HEAP32[$969>>2]|0;
   $971 = ($970|0)==(0);
   if ($971) {
    $i$389 = $i$292;
    break;
   }
   $972 = (($nl_arg) + ($i$292<<3)|0);
   $973 = ($970>>>0)>(20);
   L534: do {
    if (!($973)) {
     do {
      switch ($970|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $974 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$972>>2] = $974;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $975 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $976 = ($975|0)<(0);
       $977 = $976 << 31 >> 31;
       $978 = $972;
       $979 = $978;
       HEAP32[$979>>2] = $975;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = $977;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $982 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $983 = $972;
       $984 = $983;
       HEAP32[$984>>2] = $982;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $987 = $arglist_current44;
       $988 = $987;
       $989 = HEAP32[$988>>2]|0;
       $990 = (($987) + 4)|0;
       $991 = $990;
       $992 = HEAP32[$991>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $993 = $972;
       $994 = $993;
       HEAP32[$994>>2] = $989;
       $995 = (($993) + 4)|0;
       $996 = $995;
       HEAP32[$996>>2] = $992;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $997 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $998 = $997&65535;
       $999 = $998 << 16 >> 16;
       $1000 = ($999|0)<(0);
       $1001 = $1000 << 31 >> 31;
       $1002 = $972;
       $1003 = $1002;
       HEAP32[$1003>>2] = $999;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1001;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1006 & 65535;
       $1007 = $972;
       $1008 = $1007;
       HEAP32[$1008>>2] = $$mask1$i;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = 0;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1012 = $1011&255;
       $1013 = $1012 << 24 >> 24;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $972;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1020 & 255;
       $1021 = $972;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1025 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$972>>3] = $1025;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1026 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$972>>3] = $1026;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1027 = (($i$292) + 1)|0;
   $1028 = ($1027|0)<(10);
   if ($1028) {
    $i$292 = $1027;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1031 = (($nl_type) + ($i$389<<2)|0);
   $1032 = HEAP32[$1031>>2]|0;
   $1033 = ($1032|0)==(0);
   $1029 = (($i$389) + 1)|0;
   if (!($1033)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1030 = ($1029|0)<(10);
   if ($1030) {
    $i$389 = $1029;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&127](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
  function b3(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
  function b4(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0; }
  function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0; }
  function b6(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(6);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,_sn_write,b0,b0,b0,b0,_pni_encoder_enter,_pni_encoder_exit,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_pni_inspect_enter,_pni_inspect_exit,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_vi = [b1,b1,_pn_object_incref,_pn_object_decref,b1,_pn_object_free,b1,b1,b1,b1,_pn_void_incref,_pn_void_decref,b1,_pn_void_free,b1,b1,b1,b1,_pn_weakref_incref,_pn_weakref_decref,b1,b1,b1,b1,b1,_pn_list_finalize,b1,b1,b1
  ,_pn_map_finalize,b1,b1,_pni_uintptr_incref,_pni_uintptr_decref,b1,b1,_pn_string_finalize,b1,b1,b1,_pn_record_initialize,_pn_record_finalize,_pn_data_finalize,b1,_pn_decoder_initialize,_pn_decoder_finalize,_pn_encoder_initialize,_pn_encoder_finalize,_pn_connection_finalize,_pn_session_incref,_pn_session_finalize,_pn_link_incref,_pn_link_finalize,_pn_delivery_incref,_pn_delivery_finalize,_pn_collector_initialize_cast,_pn_collector_finalize_cast,b1,b1
  ,b1,_pn_event_initialize_cast,_pn_event_finalize_cast,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_pn_transport_initialize,_pn_transport_incref,_pn_transport_finalize,_pn_message_finalize,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_pni_default_tracer,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_ii = [b3,b3,b3,b3,_pn_object_refcount,b3,_pn_object_reify,_pn_object_hashcode,b3,b3,b3,b3,_pn_void_refcount,b3,_pn_void_reify,_pn_void_hashcode,b3,b3,b3,b3,_pn_weakref_refcount,_pn_weakref_reify,_pn_weakref_hashcode,b3,b3,b3,_pn_list_hashcode,b3,b3
  ,b3,_pn_map_hashcode,b3,b3,b3,_pni_uintptr_refcount,_pni_uintptr_reify,b3,_pn_string_hashcode,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_pn_collector_hashcode_cast,b3
  ,b3,b3,b3,_pn_event_hashcode_cast,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_pn_hashcode,b3,_pni_identity_hashcode,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,_pn_input_read_amqp_header,_pn_output_write_amqp_header,_pn_tick_amqp,_pn_input_read_amqp,_pn_output_write_amqp,_pn_io_layer_input_setup,_pn_io_layer_output_setup,_pn_io_layer_input_autodetect,_pn_io_layer_output_null,_pn_io_layer_input_passthru,_pn_io_layer_output_passthru,_pn_io_layer_input_error,_pn_io_layer_output_error,b4,b4,b4,b4,b4,_pn_input_read_sasl_header,_pn_output_write_sasl_header,_pn_input_read_sasl,_pn_output_write_sasl,_pn_ssl_input,_pn_ssl_output
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iii = [b5,_pn_object_new,b5,b5,b5,b5,b5,b5,_pn_object_compare,_pn_void_new,b5,b5,b5,b5,b5,b5,_pn_void_compare,_pn_void_inspect,b5,b5,b5,b5,b5,_pn_weakref_compare,_pn_weakref_inspect,b5,b5,_pn_list_compare,_pn_list_inspect
  ,b5,b5,_pn_map_inspect,b5,b5,b5,b5,b5,b5,_pn_string_compare,_pn_string_inspect,b5,b5,b5,_pn_data_inspect,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_pn_collector_compare_cast
  ,_pn_collector_inspect_cast,b5,b5,b5,_pn_event_compare_cast,_pn_event_inspect_cast,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_pn_message_inspect,b5,b5,b5,b5,b5,b5
  ,b5,b5,_pn_equals,b5,_pni_identity_equals,b5,b5,_pn_process_conn_setup,_pn_process_ssn_setup,_pn_process_link_setup,_pn_process_flow_receiver,_pn_process_tpwork,_pn_process_flush_disp,_pn_process_flow_sender,_pn_process_link_teardown,_pn_process_ssn_teardown,_pn_process_conn_teardown,b5,b5,_pn_collector_inspect,_pn_event_inspect,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_pn_do_open,_pn_do_begin,_pn_do_attach,_pn_do_flow,_pn_do_transfer,_pn_do_disposition,_pn_do_detach,_pn_do_end
  ,_pn_do_close,_pni_bad_frame,_pn_do_mechanisms,_pn_do_init,_pn_do_challenge,_pn_do_response,_pn_do_outcome,_pni_bad_frame_type,b6];

  return { _pn_data_rewind: _pn_data_rewind, _strlen: _strlen, _pn_event_delivery: _pn_event_delivery, _pn_message_set_durable: _pn_message_set_durable, _strncpy: _strncpy, _bitshift64Lshr: _bitshift64Lshr, _pn_session_close: _pn_session_close, _pn_message_set_group_id: _pn_message_set_group_id, _pn_message_set_content_type: _pn_message_set_content_type, _pn_transport_tick: _pn_transport_tick, _pn_delivery_settle: _pn_delivery_settle, _memcpy: _memcpy, _pn_data_put_string: _pn_data_put_string, _pn_message_get_priority: _pn_message_get_priority, _pn_collector: _pn_collector, _pn_event_type_name: _pn_event_type_name, _pn_connection: _pn_connection, _pn_message_encode: _pn_message_encode, _pn_link_credit: _pn_link_credit, _pn_connection_collect: _pn_connection_collect, _pn_message_set_address: _pn_message_set_address, _pn_link_close: _pn_link_close, _free: _free, _pn_link_current: _pn_link_current, _pn_link_advance: _pn_link_advance, _pn_link_send: _pn_link_send, _pn_link_remote_target: _pn_link_remote_target, _pn_connection_set_hostname: _pn_connection_set_hostname, _pn_message_correlation_id: _pn_message_correlation_id, _pn_message_set_content_encoding: _pn_message_set_content_encoding, _pn_link_queued: _pn_link_queued, _pn_event_link: _pn_event_link, _pn_terminus_set_address: _pn_terminus_set_address, _pn_transport: _pn_transport, _pn_delivery_partial: _pn_delivery_partial, _pn_message_set_first_acquirer: _pn_message_set_first_acquirer, _pn_terminus_set_durability: _pn_terminus_set_durability, _pn_connection_set_password: _pn_connection_set_password, _pn_delivery_tag: _pn_delivery_tag, _pn_delivery_settled: _pn_delivery_settled, _pn_terminus_set_type: _pn_terminus_set_type, _pn_transport_close_head: _pn_transport_close_head, _pn_session_open: _pn_session_open, _pn_link_recv: _pn_link_recv, _pn_terminus_set_dynamic: _pn_terminus_set_dynamic, _pn_message_is_first_acquirer: _pn_message_is_first_acquirer, _pn_transport_require_auth: _pn_transport_require_auth, _i64Add: _i64Add, _pn_link_detach: _pn_link_detach, _pn_get_version_major: _pn_get_version_major, _pn_link_name: _pn_link_name, _pn_event_session: _pn_event_session, _pn_delivery_readable: _pn_delivery_readable, _pn_get_version_minor: _pn_get_version_minor, _pn_connection_remote_container: _pn_connection_remote_container, _pn_data_next: _pn_data_next, _pn_transport_set_server: _pn_transport_set_server, _pn_connection_get_user: _pn_connection_get_user, _pn_transport_push: _pn_transport_push, _pn_message_free: _pn_message_free, _pn_transport_pending: _pn_transport_pending, _pn_data_type: _pn_data_type, _pn_link_is_receiver: _pn_link_is_receiver, _pn_delivery_remote_state: _pn_delivery_remote_state, _pn_collector_more: _pn_collector_more, _pn_message_set_reply_to: _pn_message_set_reply_to, _pn_connection_close: _pn_connection_close, _pn_terminus_get_expiry_policy: _pn_terminus_get_expiry_policy, _pn_delivery: _pn_delivery, _pn_message_set_subject: _pn_message_set_subject, _pn_type_name: _pn_type_name, _pn_collector_free: _pn_collector_free, _pn_terminus_get_durability: _pn_terminus_get_durability, _memset: _memset, _pn_delivery_writable: _pn_delivery_writable, _pn_collector_peek: _pn_collector_peek, _pn_transport_free: _pn_transport_free, _pn_event_type: _pn_event_type, _pn_link_flow: _pn_link_flow, _pn_connection_set_container: _pn_connection_set_container, _i64Subtract: _i64Subtract, _pn_connection_free: _pn_connection_free, _pn_receiver: _pn_receiver, _pn_message_decode: _pn_message_decode, _pn_message_get_reply_to: _pn_message_get_reply_to, _pn_delivery_updated: _pn_delivery_updated, _pn_link_target: _pn_link_target, _pn_message_get_ttl: _pn_message_get_ttl, _pn_link_is_sender: _pn_link_is_sender, _pn_session: _pn_session, _pn_message_set_priority: _pn_message_set_priority, _malloc: _malloc, _pn_message_is_durable: _pn_message_is_durable, _pn_link_source: _pn_link_source, _pn_connection_get_hostname: _pn_connection_get_hostname, _pn_message_get_address: _pn_message_get_address, _pn_transport_bind: _pn_transport_bind, _pn_bytes: _pn_bytes, _pn_terminus_get_address: _pn_terminus_get_address, _pn_transport_unbind: _pn_transport_unbind, _pn_message_get_group_id: _pn_message_get_group_id, _pn_message_get_content_encoding: _pn_message_get_content_encoding, _pn_collector_pop: _pn_collector_pop, _pn_connection_get_container: _pn_connection_get_container, _bitshift64Shl: _bitshift64Shl, _pn_data_get_string: _pn_data_get_string, _pn_link_open: _pn_link_open, _pn_delivery_update: _pn_delivery_update, _pn_transport_capacity: _pn_transport_capacity, _pn_message_set_delivery_count: _pn_message_set_delivery_count, _pn_message_get_delivery_count: _pn_message_get_delivery_count, _pn_message_id: _pn_message_id, _pn_delivery_local_state: _pn_delivery_local_state, _pn_message_body: _pn_message_body, _pn_transport_pop: _pn_transport_pop, _pn_connection_state: _pn_connection_state, _pn_session_state: _pn_session_state, _pn_delivery_pending: _pn_delivery_pending, _realloc: _realloc, _pn_message_get_subject: _pn_message_get_subject, _pn_message_clear: _pn_message_clear, _pn_link_remote_source: _pn_link_remote_source, _pn_message_set_ttl: _pn_message_set_ttl, _pn_connection_set_user: _pn_connection_set_user, _pn_terminus_get_type: _pn_terminus_get_type, _pn_message_get_content_type: _pn_message_get_content_type, _pn_connection_remote_hostname: _pn_connection_remote_hostname, _pn_link_state: _pn_link_state, _pn_terminus_set_expiry_policy: _pn_terminus_set_expiry_policy, _pn_connection_open: _pn_connection_open, _memmove: _memmove, _pn_sender: _pn_sender, _strcpy: _strcpy, _pn_message: _pn_message, _pn_terminus_is_dynamic: _pn_terminus_is_dynamic, _pn_transport_close_tail: _pn_transport_close_tail, _pn_transport_peek: _pn_transport_peek, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__pn_data_rewind = asm["_pn_data_rewind"]; asm["_pn_data_rewind"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_data_rewind.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__pn_event_delivery = asm["_pn_event_delivery"]; asm["_pn_event_delivery"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_event_delivery.apply(null, arguments);
};

var real__pn_message_set_durable = asm["_pn_message_set_durable"]; asm["_pn_message_set_durable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_durable.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__pn_session_close = asm["_pn_session_close"]; asm["_pn_session_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_session_close.apply(null, arguments);
};

var real__pn_message_set_group_id = asm["_pn_message_set_group_id"]; asm["_pn_message_set_group_id"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_group_id.apply(null, arguments);
};

var real__pn_message_set_content_type = asm["_pn_message_set_content_type"]; asm["_pn_message_set_content_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_content_type.apply(null, arguments);
};

var real__pn_transport_tick = asm["_pn_transport_tick"]; asm["_pn_transport_tick"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_tick.apply(null, arguments);
};

var real__pn_delivery_settle = asm["_pn_delivery_settle"]; asm["_pn_delivery_settle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_settle.apply(null, arguments);
};

var real__pn_data_put_string = asm["_pn_data_put_string"]; asm["_pn_data_put_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_data_put_string.apply(null, arguments);
};

var real__pn_message_get_priority = asm["_pn_message_get_priority"]; asm["_pn_message_get_priority"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_priority.apply(null, arguments);
};

var real__pn_collector = asm["_pn_collector"]; asm["_pn_collector"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_collector.apply(null, arguments);
};

var real__pn_event_type_name = asm["_pn_event_type_name"]; asm["_pn_event_type_name"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_event_type_name.apply(null, arguments);
};

var real__pn_connection = asm["_pn_connection"]; asm["_pn_connection"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection.apply(null, arguments);
};

var real__pn_message_encode = asm["_pn_message_encode"]; asm["_pn_message_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_encode.apply(null, arguments);
};

var real__pn_link_credit = asm["_pn_link_credit"]; asm["_pn_link_credit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_credit.apply(null, arguments);
};

var real__pn_connection_collect = asm["_pn_connection_collect"]; asm["_pn_connection_collect"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_collect.apply(null, arguments);
};

var real__pn_message_set_address = asm["_pn_message_set_address"]; asm["_pn_message_set_address"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_address.apply(null, arguments);
};

var real__pn_link_close = asm["_pn_link_close"]; asm["_pn_link_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_close.apply(null, arguments);
};

var real__pn_link_current = asm["_pn_link_current"]; asm["_pn_link_current"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_current.apply(null, arguments);
};

var real__pn_link_advance = asm["_pn_link_advance"]; asm["_pn_link_advance"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_advance.apply(null, arguments);
};

var real__pn_link_send = asm["_pn_link_send"]; asm["_pn_link_send"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_send.apply(null, arguments);
};

var real__pn_link_remote_target = asm["_pn_link_remote_target"]; asm["_pn_link_remote_target"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_remote_target.apply(null, arguments);
};

var real__pn_connection_set_hostname = asm["_pn_connection_set_hostname"]; asm["_pn_connection_set_hostname"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_set_hostname.apply(null, arguments);
};

var real__pn_message_correlation_id = asm["_pn_message_correlation_id"]; asm["_pn_message_correlation_id"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_correlation_id.apply(null, arguments);
};

var real__pn_message_set_content_encoding = asm["_pn_message_set_content_encoding"]; asm["_pn_message_set_content_encoding"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_content_encoding.apply(null, arguments);
};

var real__pn_link_queued = asm["_pn_link_queued"]; asm["_pn_link_queued"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_queued.apply(null, arguments);
};

var real__pn_event_link = asm["_pn_event_link"]; asm["_pn_event_link"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_event_link.apply(null, arguments);
};

var real__pn_terminus_set_address = asm["_pn_terminus_set_address"]; asm["_pn_terminus_set_address"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_set_address.apply(null, arguments);
};

var real__pn_transport = asm["_pn_transport"]; asm["_pn_transport"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport.apply(null, arguments);
};

var real__pn_delivery_partial = asm["_pn_delivery_partial"]; asm["_pn_delivery_partial"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_partial.apply(null, arguments);
};

var real__pn_message_set_first_acquirer = asm["_pn_message_set_first_acquirer"]; asm["_pn_message_set_first_acquirer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_first_acquirer.apply(null, arguments);
};

var real__pn_terminus_set_durability = asm["_pn_terminus_set_durability"]; asm["_pn_terminus_set_durability"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_set_durability.apply(null, arguments);
};

var real__pn_connection_set_password = asm["_pn_connection_set_password"]; asm["_pn_connection_set_password"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_set_password.apply(null, arguments);
};

var real__pn_delivery_tag = asm["_pn_delivery_tag"]; asm["_pn_delivery_tag"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_tag.apply(null, arguments);
};

var real__pn_delivery_settled = asm["_pn_delivery_settled"]; asm["_pn_delivery_settled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_settled.apply(null, arguments);
};

var real__pn_terminus_set_type = asm["_pn_terminus_set_type"]; asm["_pn_terminus_set_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_set_type.apply(null, arguments);
};

var real__pn_transport_close_head = asm["_pn_transport_close_head"]; asm["_pn_transport_close_head"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_close_head.apply(null, arguments);
};

var real__pn_session_open = asm["_pn_session_open"]; asm["_pn_session_open"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_session_open.apply(null, arguments);
};

var real__pn_link_recv = asm["_pn_link_recv"]; asm["_pn_link_recv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_recv.apply(null, arguments);
};

var real__pn_terminus_set_dynamic = asm["_pn_terminus_set_dynamic"]; asm["_pn_terminus_set_dynamic"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_set_dynamic.apply(null, arguments);
};

var real__pn_message_is_first_acquirer = asm["_pn_message_is_first_acquirer"]; asm["_pn_message_is_first_acquirer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_is_first_acquirer.apply(null, arguments);
};

var real__pn_transport_require_auth = asm["_pn_transport_require_auth"]; asm["_pn_transport_require_auth"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_require_auth.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pn_link_detach = asm["_pn_link_detach"]; asm["_pn_link_detach"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_detach.apply(null, arguments);
};

var real__pn_get_version_major = asm["_pn_get_version_major"]; asm["_pn_get_version_major"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_get_version_major.apply(null, arguments);
};

var real__pn_link_name = asm["_pn_link_name"]; asm["_pn_link_name"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_name.apply(null, arguments);
};

var real__pn_event_session = asm["_pn_event_session"]; asm["_pn_event_session"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_event_session.apply(null, arguments);
};

var real__pn_delivery_readable = asm["_pn_delivery_readable"]; asm["_pn_delivery_readable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_readable.apply(null, arguments);
};

var real__pn_get_version_minor = asm["_pn_get_version_minor"]; asm["_pn_get_version_minor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_get_version_minor.apply(null, arguments);
};

var real__pn_connection_remote_container = asm["_pn_connection_remote_container"]; asm["_pn_connection_remote_container"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_remote_container.apply(null, arguments);
};

var real__pn_data_next = asm["_pn_data_next"]; asm["_pn_data_next"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_data_next.apply(null, arguments);
};

var real__pn_transport_set_server = asm["_pn_transport_set_server"]; asm["_pn_transport_set_server"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_set_server.apply(null, arguments);
};

var real__pn_connection_get_user = asm["_pn_connection_get_user"]; asm["_pn_connection_get_user"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_get_user.apply(null, arguments);
};

var real__pn_transport_push = asm["_pn_transport_push"]; asm["_pn_transport_push"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_push.apply(null, arguments);
};

var real__pn_message_free = asm["_pn_message_free"]; asm["_pn_message_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_free.apply(null, arguments);
};

var real__pn_transport_pending = asm["_pn_transport_pending"]; asm["_pn_transport_pending"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_pending.apply(null, arguments);
};

var real__pn_data_type = asm["_pn_data_type"]; asm["_pn_data_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_data_type.apply(null, arguments);
};

var real__pn_link_is_receiver = asm["_pn_link_is_receiver"]; asm["_pn_link_is_receiver"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_is_receiver.apply(null, arguments);
};

var real__pn_delivery_remote_state = asm["_pn_delivery_remote_state"]; asm["_pn_delivery_remote_state"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_remote_state.apply(null, arguments);
};

var real__pn_collector_more = asm["_pn_collector_more"]; asm["_pn_collector_more"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_collector_more.apply(null, arguments);
};

var real__pn_message_set_reply_to = asm["_pn_message_set_reply_to"]; asm["_pn_message_set_reply_to"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_reply_to.apply(null, arguments);
};

var real__pn_connection_close = asm["_pn_connection_close"]; asm["_pn_connection_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_close.apply(null, arguments);
};

var real__pn_terminus_get_expiry_policy = asm["_pn_terminus_get_expiry_policy"]; asm["_pn_terminus_get_expiry_policy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_get_expiry_policy.apply(null, arguments);
};

var real__pn_delivery = asm["_pn_delivery"]; asm["_pn_delivery"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery.apply(null, arguments);
};

var real__pn_message_set_subject = asm["_pn_message_set_subject"]; asm["_pn_message_set_subject"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_subject.apply(null, arguments);
};

var real__pn_type_name = asm["_pn_type_name"]; asm["_pn_type_name"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_type_name.apply(null, arguments);
};

var real__pn_collector_free = asm["_pn_collector_free"]; asm["_pn_collector_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_collector_free.apply(null, arguments);
};

var real__pn_terminus_get_durability = asm["_pn_terminus_get_durability"]; asm["_pn_terminus_get_durability"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_get_durability.apply(null, arguments);
};

var real__pn_delivery_writable = asm["_pn_delivery_writable"]; asm["_pn_delivery_writable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_writable.apply(null, arguments);
};

var real__pn_collector_peek = asm["_pn_collector_peek"]; asm["_pn_collector_peek"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_collector_peek.apply(null, arguments);
};

var real__pn_transport_free = asm["_pn_transport_free"]; asm["_pn_transport_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_free.apply(null, arguments);
};

var real__pn_event_type = asm["_pn_event_type"]; asm["_pn_event_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_event_type.apply(null, arguments);
};

var real__pn_link_flow = asm["_pn_link_flow"]; asm["_pn_link_flow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_flow.apply(null, arguments);
};

var real__pn_connection_set_container = asm["_pn_connection_set_container"]; asm["_pn_connection_set_container"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_set_container.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__pn_connection_free = asm["_pn_connection_free"]; asm["_pn_connection_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_free.apply(null, arguments);
};

var real__pn_receiver = asm["_pn_receiver"]; asm["_pn_receiver"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_receiver.apply(null, arguments);
};

var real__pn_message_decode = asm["_pn_message_decode"]; asm["_pn_message_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_decode.apply(null, arguments);
};

var real__pn_message_get_reply_to = asm["_pn_message_get_reply_to"]; asm["_pn_message_get_reply_to"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_reply_to.apply(null, arguments);
};

var real__pn_delivery_updated = asm["_pn_delivery_updated"]; asm["_pn_delivery_updated"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_updated.apply(null, arguments);
};

var real__pn_link_target = asm["_pn_link_target"]; asm["_pn_link_target"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_target.apply(null, arguments);
};

var real__pn_message_get_ttl = asm["_pn_message_get_ttl"]; asm["_pn_message_get_ttl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_ttl.apply(null, arguments);
};

var real__pn_link_is_sender = asm["_pn_link_is_sender"]; asm["_pn_link_is_sender"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_is_sender.apply(null, arguments);
};

var real__pn_session = asm["_pn_session"]; asm["_pn_session"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_session.apply(null, arguments);
};

var real__pn_message_set_priority = asm["_pn_message_set_priority"]; asm["_pn_message_set_priority"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_priority.apply(null, arguments);
};

var real__pn_message_is_durable = asm["_pn_message_is_durable"]; asm["_pn_message_is_durable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_is_durable.apply(null, arguments);
};

var real__pn_link_source = asm["_pn_link_source"]; asm["_pn_link_source"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_source.apply(null, arguments);
};

var real__pn_connection_get_hostname = asm["_pn_connection_get_hostname"]; asm["_pn_connection_get_hostname"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_get_hostname.apply(null, arguments);
};

var real__pn_message_get_address = asm["_pn_message_get_address"]; asm["_pn_message_get_address"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_address.apply(null, arguments);
};

var real__pn_transport_bind = asm["_pn_transport_bind"]; asm["_pn_transport_bind"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_bind.apply(null, arguments);
};

var real__pn_bytes = asm["_pn_bytes"]; asm["_pn_bytes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_bytes.apply(null, arguments);
};

var real__pn_terminus_get_address = asm["_pn_terminus_get_address"]; asm["_pn_terminus_get_address"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_get_address.apply(null, arguments);
};

var real__pn_transport_unbind = asm["_pn_transport_unbind"]; asm["_pn_transport_unbind"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_unbind.apply(null, arguments);
};

var real__pn_message_get_group_id = asm["_pn_message_get_group_id"]; asm["_pn_message_get_group_id"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_group_id.apply(null, arguments);
};

var real__pn_message_get_content_encoding = asm["_pn_message_get_content_encoding"]; asm["_pn_message_get_content_encoding"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_content_encoding.apply(null, arguments);
};

var real__pn_collector_pop = asm["_pn_collector_pop"]; asm["_pn_collector_pop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_collector_pop.apply(null, arguments);
};

var real__pn_connection_get_container = asm["_pn_connection_get_container"]; asm["_pn_connection_get_container"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_get_container.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__pn_data_get_string = asm["_pn_data_get_string"]; asm["_pn_data_get_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_data_get_string.apply(null, arguments);
};

var real__pn_link_open = asm["_pn_link_open"]; asm["_pn_link_open"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_open.apply(null, arguments);
};

var real__pn_delivery_update = asm["_pn_delivery_update"]; asm["_pn_delivery_update"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_update.apply(null, arguments);
};

var real__pn_transport_capacity = asm["_pn_transport_capacity"]; asm["_pn_transport_capacity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_capacity.apply(null, arguments);
};

var real__pn_message_set_delivery_count = asm["_pn_message_set_delivery_count"]; asm["_pn_message_set_delivery_count"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_delivery_count.apply(null, arguments);
};

var real__pn_message_get_delivery_count = asm["_pn_message_get_delivery_count"]; asm["_pn_message_get_delivery_count"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_delivery_count.apply(null, arguments);
};

var real__pn_message_id = asm["_pn_message_id"]; asm["_pn_message_id"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_id.apply(null, arguments);
};

var real__pn_delivery_local_state = asm["_pn_delivery_local_state"]; asm["_pn_delivery_local_state"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_local_state.apply(null, arguments);
};

var real__pn_message_body = asm["_pn_message_body"]; asm["_pn_message_body"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_body.apply(null, arguments);
};

var real__pn_transport_pop = asm["_pn_transport_pop"]; asm["_pn_transport_pop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_pop.apply(null, arguments);
};

var real__pn_connection_state = asm["_pn_connection_state"]; asm["_pn_connection_state"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_state.apply(null, arguments);
};

var real__pn_session_state = asm["_pn_session_state"]; asm["_pn_session_state"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_session_state.apply(null, arguments);
};

var real__pn_delivery_pending = asm["_pn_delivery_pending"]; asm["_pn_delivery_pending"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_delivery_pending.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__pn_message_get_subject = asm["_pn_message_get_subject"]; asm["_pn_message_get_subject"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_subject.apply(null, arguments);
};

var real__pn_message_clear = asm["_pn_message_clear"]; asm["_pn_message_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_clear.apply(null, arguments);
};

var real__pn_link_remote_source = asm["_pn_link_remote_source"]; asm["_pn_link_remote_source"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_remote_source.apply(null, arguments);
};

var real__pn_message_set_ttl = asm["_pn_message_set_ttl"]; asm["_pn_message_set_ttl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_set_ttl.apply(null, arguments);
};

var real__pn_connection_set_user = asm["_pn_connection_set_user"]; asm["_pn_connection_set_user"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_set_user.apply(null, arguments);
};

var real__pn_terminus_get_type = asm["_pn_terminus_get_type"]; asm["_pn_terminus_get_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_get_type.apply(null, arguments);
};

var real__pn_message_get_content_type = asm["_pn_message_get_content_type"]; asm["_pn_message_get_content_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message_get_content_type.apply(null, arguments);
};

var real__pn_connection_remote_hostname = asm["_pn_connection_remote_hostname"]; asm["_pn_connection_remote_hostname"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_remote_hostname.apply(null, arguments);
};

var real__pn_link_state = asm["_pn_link_state"]; asm["_pn_link_state"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_link_state.apply(null, arguments);
};

var real__pn_terminus_set_expiry_policy = asm["_pn_terminus_set_expiry_policy"]; asm["_pn_terminus_set_expiry_policy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_set_expiry_policy.apply(null, arguments);
};

var real__pn_connection_open = asm["_pn_connection_open"]; asm["_pn_connection_open"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_connection_open.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__pn_sender = asm["_pn_sender"]; asm["_pn_sender"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_sender.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__pn_message = asm["_pn_message"]; asm["_pn_message"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_message.apply(null, arguments);
};

var real__pn_terminus_is_dynamic = asm["_pn_terminus_is_dynamic"]; asm["_pn_terminus_is_dynamic"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_terminus_is_dynamic.apply(null, arguments);
};

var real__pn_transport_close_tail = asm["_pn_transport_close_tail"]; asm["_pn_transport_close_tail"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_close_tail.apply(null, arguments);
};

var real__pn_transport_peek = asm["_pn_transport_peek"]; asm["_pn_transport_peek"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pn_transport_peek.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _pn_data_rewind = Module["_pn_data_rewind"] = asm["_pn_data_rewind"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _pn_event_delivery = Module["_pn_event_delivery"] = asm["_pn_event_delivery"];
var _pn_message_set_durable = Module["_pn_message_set_durable"] = asm["_pn_message_set_durable"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _pn_session_close = Module["_pn_session_close"] = asm["_pn_session_close"];
var _pn_message_set_group_id = Module["_pn_message_set_group_id"] = asm["_pn_message_set_group_id"];
var _pn_message_set_content_type = Module["_pn_message_set_content_type"] = asm["_pn_message_set_content_type"];
var _pn_transport_tick = Module["_pn_transport_tick"] = asm["_pn_transport_tick"];
var _pn_delivery_settle = Module["_pn_delivery_settle"] = asm["_pn_delivery_settle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _pn_data_put_string = Module["_pn_data_put_string"] = asm["_pn_data_put_string"];
var _pn_message_get_priority = Module["_pn_message_get_priority"] = asm["_pn_message_get_priority"];
var _pn_collector = Module["_pn_collector"] = asm["_pn_collector"];
var _pn_event_type_name = Module["_pn_event_type_name"] = asm["_pn_event_type_name"];
var _pn_connection = Module["_pn_connection"] = asm["_pn_connection"];
var _pn_message_encode = Module["_pn_message_encode"] = asm["_pn_message_encode"];
var _pn_link_credit = Module["_pn_link_credit"] = asm["_pn_link_credit"];
var _pn_connection_collect = Module["_pn_connection_collect"] = asm["_pn_connection_collect"];
var _pn_message_set_address = Module["_pn_message_set_address"] = asm["_pn_message_set_address"];
var _pn_link_close = Module["_pn_link_close"] = asm["_pn_link_close"];
var _free = Module["_free"] = asm["_free"];
var _pn_link_current = Module["_pn_link_current"] = asm["_pn_link_current"];
var _pn_link_advance = Module["_pn_link_advance"] = asm["_pn_link_advance"];
var _pn_link_send = Module["_pn_link_send"] = asm["_pn_link_send"];
var _pn_link_remote_target = Module["_pn_link_remote_target"] = asm["_pn_link_remote_target"];
var _pn_connection_set_hostname = Module["_pn_connection_set_hostname"] = asm["_pn_connection_set_hostname"];
var _pn_message_correlation_id = Module["_pn_message_correlation_id"] = asm["_pn_message_correlation_id"];
var _pn_message_set_content_encoding = Module["_pn_message_set_content_encoding"] = asm["_pn_message_set_content_encoding"];
var _pn_link_queued = Module["_pn_link_queued"] = asm["_pn_link_queued"];
var _pn_event_link = Module["_pn_event_link"] = asm["_pn_event_link"];
var _pn_terminus_set_address = Module["_pn_terminus_set_address"] = asm["_pn_terminus_set_address"];
var _pn_transport = Module["_pn_transport"] = asm["_pn_transport"];
var _pn_delivery_partial = Module["_pn_delivery_partial"] = asm["_pn_delivery_partial"];
var _pn_message_set_first_acquirer = Module["_pn_message_set_first_acquirer"] = asm["_pn_message_set_first_acquirer"];
var _pn_terminus_set_durability = Module["_pn_terminus_set_durability"] = asm["_pn_terminus_set_durability"];
var _pn_connection_set_password = Module["_pn_connection_set_password"] = asm["_pn_connection_set_password"];
var _pn_delivery_tag = Module["_pn_delivery_tag"] = asm["_pn_delivery_tag"];
var _pn_delivery_settled = Module["_pn_delivery_settled"] = asm["_pn_delivery_settled"];
var _pn_terminus_set_type = Module["_pn_terminus_set_type"] = asm["_pn_terminus_set_type"];
var _pn_transport_close_head = Module["_pn_transport_close_head"] = asm["_pn_transport_close_head"];
var _pn_session_open = Module["_pn_session_open"] = asm["_pn_session_open"];
var _pn_link_recv = Module["_pn_link_recv"] = asm["_pn_link_recv"];
var _pn_terminus_set_dynamic = Module["_pn_terminus_set_dynamic"] = asm["_pn_terminus_set_dynamic"];
var _pn_message_is_first_acquirer = Module["_pn_message_is_first_acquirer"] = asm["_pn_message_is_first_acquirer"];
var _pn_transport_require_auth = Module["_pn_transport_require_auth"] = asm["_pn_transport_require_auth"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pn_link_detach = Module["_pn_link_detach"] = asm["_pn_link_detach"];
var _pn_get_version_major = Module["_pn_get_version_major"] = asm["_pn_get_version_major"];
var _pn_link_name = Module["_pn_link_name"] = asm["_pn_link_name"];
var _pn_event_session = Module["_pn_event_session"] = asm["_pn_event_session"];
var _pn_delivery_readable = Module["_pn_delivery_readable"] = asm["_pn_delivery_readable"];
var _pn_get_version_minor = Module["_pn_get_version_minor"] = asm["_pn_get_version_minor"];
var _pn_connection_remote_container = Module["_pn_connection_remote_container"] = asm["_pn_connection_remote_container"];
var _pn_data_next = Module["_pn_data_next"] = asm["_pn_data_next"];
var _pn_transport_set_server = Module["_pn_transport_set_server"] = asm["_pn_transport_set_server"];
var _pn_connection_get_user = Module["_pn_connection_get_user"] = asm["_pn_connection_get_user"];
var _pn_transport_push = Module["_pn_transport_push"] = asm["_pn_transport_push"];
var _pn_message_free = Module["_pn_message_free"] = asm["_pn_message_free"];
var _pn_transport_pending = Module["_pn_transport_pending"] = asm["_pn_transport_pending"];
var _pn_data_type = Module["_pn_data_type"] = asm["_pn_data_type"];
var _pn_link_is_receiver = Module["_pn_link_is_receiver"] = asm["_pn_link_is_receiver"];
var _pn_delivery_remote_state = Module["_pn_delivery_remote_state"] = asm["_pn_delivery_remote_state"];
var _pn_collector_more = Module["_pn_collector_more"] = asm["_pn_collector_more"];
var _pn_message_set_reply_to = Module["_pn_message_set_reply_to"] = asm["_pn_message_set_reply_to"];
var _pn_connection_close = Module["_pn_connection_close"] = asm["_pn_connection_close"];
var _pn_terminus_get_expiry_policy = Module["_pn_terminus_get_expiry_policy"] = asm["_pn_terminus_get_expiry_policy"];
var _pn_delivery = Module["_pn_delivery"] = asm["_pn_delivery"];
var _pn_message_set_subject = Module["_pn_message_set_subject"] = asm["_pn_message_set_subject"];
var _pn_type_name = Module["_pn_type_name"] = asm["_pn_type_name"];
var _pn_collector_free = Module["_pn_collector_free"] = asm["_pn_collector_free"];
var _pn_terminus_get_durability = Module["_pn_terminus_get_durability"] = asm["_pn_terminus_get_durability"];
var _memset = Module["_memset"] = asm["_memset"];
var _pn_delivery_writable = Module["_pn_delivery_writable"] = asm["_pn_delivery_writable"];
var _pn_collector_peek = Module["_pn_collector_peek"] = asm["_pn_collector_peek"];
var _pn_transport_free = Module["_pn_transport_free"] = asm["_pn_transport_free"];
var _pn_event_type = Module["_pn_event_type"] = asm["_pn_event_type"];
var _pn_link_flow = Module["_pn_link_flow"] = asm["_pn_link_flow"];
var _pn_connection_set_container = Module["_pn_connection_set_container"] = asm["_pn_connection_set_container"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _pn_connection_free = Module["_pn_connection_free"] = asm["_pn_connection_free"];
var _pn_receiver = Module["_pn_receiver"] = asm["_pn_receiver"];
var _pn_message_decode = Module["_pn_message_decode"] = asm["_pn_message_decode"];
var _pn_message_get_reply_to = Module["_pn_message_get_reply_to"] = asm["_pn_message_get_reply_to"];
var _pn_delivery_updated = Module["_pn_delivery_updated"] = asm["_pn_delivery_updated"];
var _pn_link_target = Module["_pn_link_target"] = asm["_pn_link_target"];
var _pn_message_get_ttl = Module["_pn_message_get_ttl"] = asm["_pn_message_get_ttl"];
var _pn_link_is_sender = Module["_pn_link_is_sender"] = asm["_pn_link_is_sender"];
var _pn_session = Module["_pn_session"] = asm["_pn_session"];
var _pn_message_set_priority = Module["_pn_message_set_priority"] = asm["_pn_message_set_priority"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pn_message_is_durable = Module["_pn_message_is_durable"] = asm["_pn_message_is_durable"];
var _pn_link_source = Module["_pn_link_source"] = asm["_pn_link_source"];
var _pn_connection_get_hostname = Module["_pn_connection_get_hostname"] = asm["_pn_connection_get_hostname"];
var _pn_message_get_address = Module["_pn_message_get_address"] = asm["_pn_message_get_address"];
var _pn_transport_bind = Module["_pn_transport_bind"] = asm["_pn_transport_bind"];
var _pn_bytes = Module["_pn_bytes"] = asm["_pn_bytes"];
var _pn_terminus_get_address = Module["_pn_terminus_get_address"] = asm["_pn_terminus_get_address"];
var _pn_transport_unbind = Module["_pn_transport_unbind"] = asm["_pn_transport_unbind"];
var _pn_message_get_group_id = Module["_pn_message_get_group_id"] = asm["_pn_message_get_group_id"];
var _pn_message_get_content_encoding = Module["_pn_message_get_content_encoding"] = asm["_pn_message_get_content_encoding"];
var _pn_collector_pop = Module["_pn_collector_pop"] = asm["_pn_collector_pop"];
var _pn_connection_get_container = Module["_pn_connection_get_container"] = asm["_pn_connection_get_container"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _pn_data_get_string = Module["_pn_data_get_string"] = asm["_pn_data_get_string"];
var _pn_link_open = Module["_pn_link_open"] = asm["_pn_link_open"];
var _pn_delivery_update = Module["_pn_delivery_update"] = asm["_pn_delivery_update"];
var _pn_transport_capacity = Module["_pn_transport_capacity"] = asm["_pn_transport_capacity"];
var _pn_message_set_delivery_count = Module["_pn_message_set_delivery_count"] = asm["_pn_message_set_delivery_count"];
var _pn_message_get_delivery_count = Module["_pn_message_get_delivery_count"] = asm["_pn_message_get_delivery_count"];
var _pn_message_id = Module["_pn_message_id"] = asm["_pn_message_id"];
var _pn_delivery_local_state = Module["_pn_delivery_local_state"] = asm["_pn_delivery_local_state"];
var _pn_message_body = Module["_pn_message_body"] = asm["_pn_message_body"];
var _pn_transport_pop = Module["_pn_transport_pop"] = asm["_pn_transport_pop"];
var _pn_connection_state = Module["_pn_connection_state"] = asm["_pn_connection_state"];
var _pn_session_state = Module["_pn_session_state"] = asm["_pn_session_state"];
var _pn_delivery_pending = Module["_pn_delivery_pending"] = asm["_pn_delivery_pending"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _pn_message_get_subject = Module["_pn_message_get_subject"] = asm["_pn_message_get_subject"];
var _pn_message_clear = Module["_pn_message_clear"] = asm["_pn_message_clear"];
var _pn_link_remote_source = Module["_pn_link_remote_source"] = asm["_pn_link_remote_source"];
var _pn_message_set_ttl = Module["_pn_message_set_ttl"] = asm["_pn_message_set_ttl"];
var _pn_connection_set_user = Module["_pn_connection_set_user"] = asm["_pn_connection_set_user"];
var _pn_terminus_get_type = Module["_pn_terminus_get_type"] = asm["_pn_terminus_get_type"];
var _pn_message_get_content_type = Module["_pn_message_get_content_type"] = asm["_pn_message_get_content_type"];
var _pn_connection_remote_hostname = Module["_pn_connection_remote_hostname"] = asm["_pn_connection_remote_hostname"];
var _pn_link_state = Module["_pn_link_state"] = asm["_pn_link_state"];
var _pn_terminus_set_expiry_policy = Module["_pn_terminus_set_expiry_policy"] = asm["_pn_terminus_set_expiry_policy"];
var _pn_connection_open = Module["_pn_connection_open"] = asm["_pn_connection_open"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _pn_sender = Module["_pn_sender"] = asm["_pn_sender"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _pn_message = Module["_pn_message"] = asm["_pn_message"];
var _pn_terminus_is_dynamic = Module["_pn_terminus_is_dynamic"] = asm["_pn_terminus_is_dynamic"];
var _pn_transport_close_tail = Module["_pn_transport_close_tail"] = asm["_pn_transport_close_tail"];
var _pn_transport_peek = Module["_pn_transport_peek"] = asm["_pn_transport_peek"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/*
 * Some constants
 */
var PN_EOS = -1;
var PN_OVERFLOW = -3;
var PN_UNDERFLOW = -3;


Module['PN_LOCAL_UNINIT'] = 1;
Module['PN_LOCAL_ACTIVE'] = 2;
Module['PN_LOCAL_CLOSED'] = 4;
Module['PN_REMOTE_UNINIT'] = 8;
Module['PN_REMOTE_ACTIVE'] = 16;
Module['PN_REMOTE_CLOSED']  = 32;

Module['PN_RECEIVED'] = 0x23;
Module['PN_ACCEPTED'] = 0x24;
Module['PN_REJECTED'] = 0x25;
Module['PN_RELEASED'] = 0x26;
Module['PN_MODIFIED'] = 0x27;

var EXPIRY_POLICIES = {
  'link-detach' : 0,
  'session-end': 1,
  'connection-close': 2,
  'never': 3
};


/*
 * Define wrappers for engine objects
 */

// allows creation of a prototype object based on
// another prototype:
var create = function (ptype) {
    var F = function () {};
    F.prototype = ptype;
    return new F();
};

// create a wrapped object given a pointer to the underlying proton
// type and a prototype describing the methods and fields:

var wrap = function (impl, ptype) {
    var F = function (impl) {
        this.impl = impl;
    };
    F.prototype = ptype;
    return new F(impl);
};

var add_method = function (obj, name, fn) {
    obj[name] = function () {
        return fn(this.impl);
    };
};

var add_method_1arg = function (obj, name, fn) {
    obj[name] = function (arg1) {
        return fn(this.impl, arg1);
    };
};

var add_wrapped_accessor = function(obj, name, fn, type) {
    obj[name] = function () {
        var ptr = fn(this.impl);
        return ptr ? wrap(ptr, type) : null;
    };
};

var add_method_with_wrapped_argument = function (obj, name, fn) {
    obj[name] = function (param) {
        fn(this.impl, param.impl);
    };
};

var add_property = function(obj, property, getter, setter) {
    if (getter) {
        obj['get_' + property] = function () {
            return getter(this.impl);
        };
    }
    if (setter) {
        obj['set_' + property] = function (value) {
            setter(this.impl, value);
        };
    }
};

var add_string_property = function(obj, property, getter, setter) {
    if (getter) {
        obj['get_' + property] = function () {
            return Pointer_stringify(getter(this.impl));
        };
    }
    if (setter) {
        obj['set_' + property] = function (value) {
            var sp = Runtime.stackSave();
            setter(this.impl, allocate(intArrayFromString(value), 'i8', ALLOC_STACK));
            Runtime.stackRestore(sp);
        };
    }
};

var connection = {};
add_property(connection, 'state', _pn_connection_state);
add_method(connection, 'open', _pn_connection_open);
add_method(connection, 'close', _pn_connection_close);
add_method(connection, 'free', _pn_connection_free);
add_string_property(connection, 'container', _pn_connection_get_container, _pn_connection_set_container);
add_string_property(connection, 'user', _pn_connection_get_user, _pn_connection_set_user);
add_string_property(connection, 'password', undefined, _pn_connection_set_password);
add_string_property(connection, 'hostname', _pn_connection_get_hostname, _pn_connection_set_hostname);
add_string_property(connection, 'remote_container', _pn_connection_remote_container);
add_string_property(connection, 'remote_hostname', _pn_connection_remote_hostname);
add_method_with_wrapped_argument(connection, 'collect', _pn_connection_collect);

var session = {};
add_property(session, 'state', _pn_session_state);
add_method(session, 'open', _pn_session_open);
add_method(session, 'close', _pn_session_close);

var terminus = {};
add_string_property(terminus, 'address', _pn_terminus_get_address, _pn_terminus_set_address);
add_property(terminus, 'type', _pn_terminus_get_type, _pn_terminus_set_type);
add_property(terminus, 'dynamic', _pn_terminus_is_dynamic, _pn_terminus_set_dynamic);
add_property(terminus, 'durability', _pn_terminus_get_durability, _pn_terminus_set_durability);
add_property(terminus, 'expiry_policy', _pn_terminus_get_expiry_policy, _pn_terminus_set_expiry_policy);

var delivery = {};
add_string_property(delivery, 'tag', _pn_delivery_tag);
add_property(delivery, 'local_state', _pn_delivery_local_state, _pn_delivery_update);
add_property(delivery, 'remote_state', _pn_delivery_remote_state);
add_method(delivery, 'readable', _pn_delivery_readable);
add_method(delivery, 'writable', _pn_delivery_writable);
add_method(delivery, 'updated', _pn_delivery_updated);
add_method(delivery, 'pending', _pn_delivery_pending);
add_method(delivery, 'partial', _pn_delivery_partial);
add_method(delivery, 'settle', _pn_delivery_settle);
add_method(delivery, 'settled', _pn_delivery_settled);
delivery['link'] = function () {
    var l = _pn_delivery_link(this.impl);
    if (l) {
        if (_pn_link_is_receiver(l)) {
            return wrap(l, receiver);
        } else {
            return wrap(l, sender);
        }
    } else {
        return null;
    }
};

var message = {};
add_property(message, 'durable', _pn_message_is_durable, _pn_message_set_durable);
add_property(message, 'first_acquirer', _pn_message_is_first_acquirer, _pn_message_set_first_acquirer);
add_property(message, 'priority', _pn_message_get_priority, _pn_message_set_priority);
add_property(message, 'ttl', _pn_message_get_ttl, _pn_message_set_ttl);
add_property(message, 'delivery_count', _pn_message_get_delivery_count, _pn_message_set_delivery_count);
add_string_property(message, 'reply_to', _pn_message_get_reply_to, _pn_message_set_reply_to);
add_string_property(message, 'to', _pn_message_get_address, _pn_message_set_address);
add_string_property(message, 'subject', _pn_message_get_subject, _pn_message_set_subject);
add_string_property(message, 'content_type', _pn_message_get_content_type, _pn_message_set_content_type);
add_string_property(message, 'content_encoding', _pn_message_get_content_encoding, _pn_message_set_content_encoding);
add_string_property(message, 'group_id', _pn_message_get_group_id, _pn_message_set_group_id);
//TODO: creation time and expiry time
add_method(message, 'free', _pn_message_free);
var add_data_put = function (obj, name, fn1, fn2) {
    obj[name] = function(value) {
        var data = fn2(this.impl);
        var sp = Runtime.stackSave();
        var array = intArrayFromString(value, true); // The true means don't add NULL.
        //allocate a buffer holding the value
        var str = allocate(array, 'i8', ALLOC_STACK);
        //create region to represent a pn_bytes_t (size and start field, 4 bytes each)
        var bytes = allocate(8, 'i8', ALLOC_STACK);
        //update that region with the size and start of the buffer
        _pn_bytes(bytes, array.length, str);
        //function can now read the region
        fn1(data, bytes);//TODO: check for error
        Runtime.stackRestore(sp);
    };
};
var add_data_get = function (obj, name, fn1, fn2) {
    obj[name] = function() {
        var data = fn2(this.impl);
        _pn_data_rewind(data);
        if (_pn_data_next(data)) {
            var sp = Runtime.stackSave();
            //create region to represent a pn_bytes_t struct instance (size and start field, 4 bytes each)
            var bytes = allocate(8, 'i8', ALLOC_STACK);
            //function called will update the region with size and start
            var retval = fn1(bytes, data);
            var size  = getValue(bytes, 'i32');
            var start = getValue(bytes + 4, '*');
            //can now read those values out the region
            var value = Pointer_stringify(start, size);
            Runtime.stackRestore(sp);
            //_pn_data_rewind(data);
            return value;
        } else {
            return undefined;
        }
    };
};
//TODO: need to types other than string
add_data_put(message, 'set_body', _pn_data_put_string, _pn_message_body);
add_data_get(message, 'get_body', _pn_data_get_string, _pn_message_body);
add_data_put(message, 'set_id', _pn_data_put_string, _pn_message_id);
add_data_get(message, 'get_id', _pn_data_get_string, _pn_message_id);
add_data_put(message, 'set_correlation_id', _pn_data_put_string, _pn_message_correlation_id);
add_data_get(message, 'get_correlation_id', _pn_data_get_string, _pn_message_correlation_id);
//TODO: application properties

Module['message'] = function (body) {
    msg = wrap(_pn_message(), message);
    if (body) {
        msg.set_body(body);
    }
    return msg;
};

var link = {};
add_property(link, 'state', _pn_link_state);
add_string_property(link, 'name', _pn_link_name);
add_method(link, 'is_sender', _pn_link_is_sender);
add_method(link, 'is_receiver', _pn_link_is_receiver);
add_method(link, 'advance', _pn_link_advance);
add_method(link, 'credit', _pn_link_credit);
add_method(link, 'queued', _pn_link_queued);
add_method(link, 'open', _pn_link_open);
add_method(link, 'close', _pn_link_close);
add_method(link, 'detach', _pn_link_detach);
add_wrapped_accessor(link, 'source', _pn_link_source, terminus);
add_wrapped_accessor(link, 'target', _pn_link_target, terminus);
add_wrapped_accessor(link, 'remote_source', _pn_link_remote_source, terminus);
add_wrapped_accessor(link, 'remote_target', _pn_link_remote_target, terminus);
link['delivery'] = function (tag) {
    var sp = Runtime.stackSave();
    var array = intArrayFromString(tag, true); // The true means don't add NULL.
    //allocate a buffer holding the value
    var str = allocate(array, 'i8', ALLOC_STACK);
    //create region to represent a pn_bytes_t (size and start field, 4 bytes each)
    var bytes = allocate(8, 'i8', ALLOC_STACK);
    //update that region with the size and start of the buffer
    _pn_bytes(bytes, array.length, str);
    //function can now read the region
    var d = _pn_delivery(this.impl, bytes);
    Runtime.stackRestore(sp);
    return d;
};
add_wrapped_accessor(link, 'current', _pn_link_current, delivery);

var receiver = create(link);
add_method_1arg(receiver, 'flow', _pn_link_flow);
receiver['recv'] = function (msg) {
    var sp = Runtime.stackSave();
    var dlv = this['current']();
    if (!dlv || !dlv['readable'] || dlv['partial']()) {
        return false;
    }
    var size = dlv['pending']();
    var ptr = allocate(size, 'i8', ALLOC_STACK);
    var received = _pn_link_recv(this.impl, ptr, size);
    var error = null;
    if (received < 0) {
        //TODO: proper error info
        error = {name: 'IO_ERROR', message: 'Error on recv'};
    } else {
        _pn_message_clear(msg.impl);
        if (_pn_message_decode(msg.impl, ptr, received) !== 0) {
            //TODO: proper error info
            error = {name: 'IO_ERROR', message: 'Error on decode'};
        }
        this['advance']();
    }
    Runtime.stackRestore(sp);
    if (error !== null) {
        throw error;
    }
    return true;
};
var sender = create(link);
sender['send'] = function (msg, tag) {
    var dlv = this['delivery'](tag);

    var size = 1024;
    var bytes, written, error;

    while (true) {
        //allocate space for data plus 4 bytes for size pointer
        bytes = _malloc(size + 4);
        if (bytes <= 0) {
            error = -77;
            break;
        }
        setValue(bytes, size, 'i32');
        var error = _pn_message_encode(msg.impl, bytes+4, bytes);
        if (error == PN_OVERFLOW) {
            //double the size and try again
            size = size * 2;
            _free(bytes);
        } else {
            break;
        }
    }
    if (error === 0) {
        written = getValue(bytes, 'i32');
        _pn_link_send(this.impl, bytes+4, written);
        this['advance']();
    } else {
        console.log('Error in send: ' + error);
    }
    _free(bytes);

    //TODO:
    //if sender.snd_settle_mode == Link.SND_SETTLED:
    //    dlv.settle()
    return dlv;
};

connection['create_session'] = function () {
    ssn = wrap(_pn_session(this.impl), session);
    ssn['connection'] = this;
    return ssn;
};

terminus['update'] = function (a_spec) {
    var my_spec;
    if (typeof a_spec === 'string') {
        my_spec = {};
        my_spec['address'] = a_spec;
    } else {
        my_spec = a_spec;
    }
    if (my_spec['address']) {
        this['set_address'](my_spec['address']);
    }
    if (my_spec['dynamic']) {
        this['set_dynamic'](my_spec['dynamic']);
    }
    if (my_spec['durable']) {
        this['set_durability'](my_spec['durable']);
    }
    if (my_spec['expiry_policy']) {
        var code = EXPIRY_POLICIES[my_spec['expiry_policy']]
        if (code) {
            this['set_expiry_policy'](code);
        }
    }
};

session['configure_link'] = function (link, source, target) {
    link['session'] = this;
    link['connection'] = this.connection;
    if (source) {
        link['source']()['update'](source);
    } else {
        //link['source']()['set_type'](0);
    }
    if (target) {
        link['target']()['update'](target);
    } else {
        //link['target']()['set_type'](0);
    }
    link['open']();
};

session['create_receiver'] = function (name, options) {
    var sp = Runtime.stackSave();
    var str = allocate(intArrayFromString(name), 'i8', ALLOC_STACK);
    var ptr = _pn_receiver(this.impl, str);
    Runtime.stackRestore(sp);

    var rcvr = wrap(ptr, receiver);
    this['configure_link'](rcvr, options.source, options.target);
    return rcvr;
};

session['create_sender'] = function (name, options) {
    var sp = Runtime.stackSave();
    var str = allocate(intArrayFromString(name), 'i8', ALLOC_STACK);
    var ptr = _pn_sender(this.impl, str);
    Runtime.stackRestore(sp);

    var sndr = wrap(ptr, sender);
    this['configure_link'](sndr, options.source, options.target);
    return sndr;
};

Module['connection'] = function () {
    return wrap(_pn_connection(), connection);
};

var event = {};
event['type'] = function () {
    return Pointer_stringify(_pn_event_type_name(_pn_event_type(this.impl)));
};
event['link'] = function () {
    var l = _pn_event_link(this.impl);
    if (l) {
        if (_pn_link_is_receiver(l)) {
            return wrap(l, receiver);
        } else {
            return wrap(l, sender);
        }
    } else {
        return null;
    }
};
add_wrapped_accessor(event, 'delivery', _pn_event_delivery, delivery);
add_wrapped_accessor(event, 'session', _pn_event_session, session);

var collector = {};
add_method(collector, 'pop', _pn_collector_pop);
add_method(collector, 'has_more', _pn_collector_more);
add_wrapped_accessor(collector, 'peek', _pn_collector_peek, event);
add_method(collector, 'free', _pn_collector_free);

Module['collector'] = function () {
    return wrap(_pn_collector(), collector);
};

var transport = {};
add_method_with_wrapped_argument(transport, 'bind', _pn_transport_bind);
add_method(transport, 'unbind', _pn_transport_unbind);
add_method(transport, 'require_auth', _pn_transport_require_auth);
add_method(transport, 'set_server', _pn_transport_set_server);
add_method(transport, 'capacity', _pn_transport_capacity);
add_method(transport, 'pending', _pn_transport_pending);
add_method(transport, 'close_head', _pn_transport_close_head);
add_method(transport, 'close_tail', _pn_transport_close_tail);
add_method(transport, 'free', _pn_transport_free);
add_method_1arg(transport, 'pop', _pn_transport_pop);
add_method_1arg(transport, 'tick', _pn_transport_tick);
transport['push'] = function (data) {
    var sp = Runtime.stackSave();
    result = _pn_transport_push(this.impl, allocate(data, 'i8', ALLOC_STACK), data.length);
    Runtime.stackRestore(sp);
    return result;
}
transport['peek'] = function (size) {
    var buffer = _malloc(size);
    if (buffer < 0) {
        return null;
    }
    var copied = _pn_transport_peek(this.impl, buffer, size);
    var error = undefined;
    var data = '';
    var i;
    if (copied === PN_EOS) {
        data = null;
    } else if (copied < 0) {
        //TODO: proper error info
        error = {name: 'IO_ERROR', message: 'Error on peek'};
    } else if (copied > 0) {
        data = [];
        for (i = 0; i < copied; i++) {
            data.push(getValue(buffer + i, 'i8'));
        }
    }
    _free(buffer);
    if (error) {
        throw error;
    }
    return data;
}

Module['transport'] = function () {
    return wrap(_pn_transport(), transport);
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/**
 * These values are essentially constants sitting in the proton namespace
 * that is to say they will be exported via:
 * proton.VERSION_MAJOR
 * proton.VERSION_MINOR
 * We have to set them after pn_get_version_major/pn_get_version_minor have been
 * defined so we must do it here in binding-close.js as it's a --post-js block.
 */
Module['VERSION_MAJOR'] = _pn_get_version_major();
Module['VERSION_MINOR'] = _pn_get_version_minor();

})(); // End of self calling lambda used to wrap library.


